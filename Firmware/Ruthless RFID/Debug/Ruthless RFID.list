
Ruthless RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000102a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000870  08010440  08010440  00020440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010cb0  08010cb0  0003068c  2**0
                  CONTENTS
  4 .ARM          00000008  08010cb0  08010cb0  00020cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010cb8  08010cb8  0003068c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010cb8  08010cb8  00020cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010cbc  08010cbc  00020cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000068c  20000000  08010cc0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000077d8  2000068c  0801134c  0003068c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007e64  0801134c  00037e64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003068c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002839e  00000000  00000000  000306bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a6e  00000000  00000000  00058a5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002140  00000000  00000000  0005e4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f00  00000000  00000000  00060608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d8ee  00000000  00000000  00062508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027941  00000000  00000000  0007fdf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ef84  00000000  00000000  000a7737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001466bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009114  00000000  00000000  0014670c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000068c 	.word	0x2000068c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010428 	.word	0x08010428

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000690 	.word	0x20000690
 80001dc:	08010428 	.word	0x08010428

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b974 	b.w	8000b9c <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	4604      	mov	r4, r0
 80008d4:	468e      	mov	lr, r1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d14d      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008da:	428a      	cmp	r2, r1
 80008dc:	4694      	mov	ip, r2
 80008de:	d969      	bls.n	80009b4 <__udivmoddi4+0xe8>
 80008e0:	fab2 f282 	clz	r2, r2
 80008e4:	b152      	cbz	r2, 80008fc <__udivmoddi4+0x30>
 80008e6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ea:	f1c2 0120 	rsb	r1, r2, #32
 80008ee:	fa20 f101 	lsr.w	r1, r0, r1
 80008f2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f6:	ea41 0e03 	orr.w	lr, r1, r3
 80008fa:	4094      	lsls	r4, r2
 80008fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000900:	0c21      	lsrs	r1, r4, #16
 8000902:	fbbe f6f8 	udiv	r6, lr, r8
 8000906:	fa1f f78c 	uxth.w	r7, ip
 800090a:	fb08 e316 	mls	r3, r8, r6, lr
 800090e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000912:	fb06 f107 	mul.w	r1, r6, r7
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000922:	f080 811f 	bcs.w	8000b64 <__udivmoddi4+0x298>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 811c 	bls.w	8000b64 <__udivmoddi4+0x298>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a5b      	subs	r3, r3, r1
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb3 f0f8 	udiv	r0, r3, r8
 8000938:	fb08 3310 	mls	r3, r8, r0, r3
 800093c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000940:	fb00 f707 	mul.w	r7, r0, r7
 8000944:	42a7      	cmp	r7, r4
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x92>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000950:	f080 810a 	bcs.w	8000b68 <__udivmoddi4+0x29c>
 8000954:	42a7      	cmp	r7, r4
 8000956:	f240 8107 	bls.w	8000b68 <__udivmoddi4+0x29c>
 800095a:	4464      	add	r4, ip
 800095c:	3802      	subs	r0, #2
 800095e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000962:	1be4      	subs	r4, r4, r7
 8000964:	2600      	movs	r6, #0
 8000966:	b11d      	cbz	r5, 8000970 <__udivmoddi4+0xa4>
 8000968:	40d4      	lsrs	r4, r2
 800096a:	2300      	movs	r3, #0
 800096c:	e9c5 4300 	strd	r4, r3, [r5]
 8000970:	4631      	mov	r1, r6
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d909      	bls.n	800098e <__udivmoddi4+0xc2>
 800097a:	2d00      	cmp	r5, #0
 800097c:	f000 80ef 	beq.w	8000b5e <__udivmoddi4+0x292>
 8000980:	2600      	movs	r6, #0
 8000982:	e9c5 0100 	strd	r0, r1, [r5]
 8000986:	4630      	mov	r0, r6
 8000988:	4631      	mov	r1, r6
 800098a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098e:	fab3 f683 	clz	r6, r3
 8000992:	2e00      	cmp	r6, #0
 8000994:	d14a      	bne.n	8000a2c <__udivmoddi4+0x160>
 8000996:	428b      	cmp	r3, r1
 8000998:	d302      	bcc.n	80009a0 <__udivmoddi4+0xd4>
 800099a:	4282      	cmp	r2, r0
 800099c:	f200 80f9 	bhi.w	8000b92 <__udivmoddi4+0x2c6>
 80009a0:	1a84      	subs	r4, r0, r2
 80009a2:	eb61 0303 	sbc.w	r3, r1, r3
 80009a6:	2001      	movs	r0, #1
 80009a8:	469e      	mov	lr, r3
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d0e0      	beq.n	8000970 <__udivmoddi4+0xa4>
 80009ae:	e9c5 4e00 	strd	r4, lr, [r5]
 80009b2:	e7dd      	b.n	8000970 <__udivmoddi4+0xa4>
 80009b4:	b902      	cbnz	r2, 80009b8 <__udivmoddi4+0xec>
 80009b6:	deff      	udf	#255	; 0xff
 80009b8:	fab2 f282 	clz	r2, r2
 80009bc:	2a00      	cmp	r2, #0
 80009be:	f040 8092 	bne.w	8000ae6 <__udivmoddi4+0x21a>
 80009c2:	eba1 010c 	sub.w	r1, r1, ip
 80009c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ca:	fa1f fe8c 	uxth.w	lr, ip
 80009ce:	2601      	movs	r6, #1
 80009d0:	0c20      	lsrs	r0, r4, #16
 80009d2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009d6:	fb07 1113 	mls	r1, r7, r3, r1
 80009da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009de:	fb0e f003 	mul.w	r0, lr, r3
 80009e2:	4288      	cmp	r0, r1
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0x12c>
 80009e6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ea:	f103 38ff 	add.w	r8, r3, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x12a>
 80009f0:	4288      	cmp	r0, r1
 80009f2:	f200 80cb 	bhi.w	8000b8c <__udivmoddi4+0x2c0>
 80009f6:	4643      	mov	r3, r8
 80009f8:	1a09      	subs	r1, r1, r0
 80009fa:	b2a4      	uxth	r4, r4
 80009fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a00:	fb07 1110 	mls	r1, r7, r0, r1
 8000a04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a08:	fb0e fe00 	mul.w	lr, lr, r0
 8000a0c:	45a6      	cmp	lr, r4
 8000a0e:	d908      	bls.n	8000a22 <__udivmoddi4+0x156>
 8000a10:	eb1c 0404 	adds.w	r4, ip, r4
 8000a14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a18:	d202      	bcs.n	8000a20 <__udivmoddi4+0x154>
 8000a1a:	45a6      	cmp	lr, r4
 8000a1c:	f200 80bb 	bhi.w	8000b96 <__udivmoddi4+0x2ca>
 8000a20:	4608      	mov	r0, r1
 8000a22:	eba4 040e 	sub.w	r4, r4, lr
 8000a26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a2a:	e79c      	b.n	8000966 <__udivmoddi4+0x9a>
 8000a2c:	f1c6 0720 	rsb	r7, r6, #32
 8000a30:	40b3      	lsls	r3, r6
 8000a32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a42:	431c      	orrs	r4, r3
 8000a44:	40f9      	lsrs	r1, r7
 8000a46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a52:	0c20      	lsrs	r0, r4, #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fb09 1118 	mls	r1, r9, r8, r1
 8000a5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a60:	fb08 f00e 	mul.w	r0, r8, lr
 8000a64:	4288      	cmp	r0, r1
 8000a66:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6a:	d90b      	bls.n	8000a84 <__udivmoddi4+0x1b8>
 8000a6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a74:	f080 8088 	bcs.w	8000b88 <__udivmoddi4+0x2bc>
 8000a78:	4288      	cmp	r0, r1
 8000a7a:	f240 8085 	bls.w	8000b88 <__udivmoddi4+0x2bc>
 8000a7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a82:	4461      	add	r1, ip
 8000a84:	1a09      	subs	r1, r1, r0
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a98:	458e      	cmp	lr, r1
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x1e2>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aa4:	d26c      	bcs.n	8000b80 <__udivmoddi4+0x2b4>
 8000aa6:	458e      	cmp	lr, r1
 8000aa8:	d96a      	bls.n	8000b80 <__udivmoddi4+0x2b4>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4461      	add	r1, ip
 8000aae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ab2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ab6:	eba1 010e 	sub.w	r1, r1, lr
 8000aba:	42a1      	cmp	r1, r4
 8000abc:	46c8      	mov	r8, r9
 8000abe:	46a6      	mov	lr, r4
 8000ac0:	d356      	bcc.n	8000b70 <__udivmoddi4+0x2a4>
 8000ac2:	d053      	beq.n	8000b6c <__udivmoddi4+0x2a0>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x212>
 8000ac6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aca:	eb61 010e 	sbc.w	r1, r1, lr
 8000ace:	fa01 f707 	lsl.w	r7, r1, r7
 8000ad2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ad6:	40f1      	lsrs	r1, r6
 8000ad8:	431f      	orrs	r7, r3
 8000ada:	e9c5 7100 	strd	r7, r1, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	40d8      	lsrs	r0, r3
 8000aec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af0:	fa21 f303 	lsr.w	r3, r1, r3
 8000af4:	4091      	lsls	r1, r2
 8000af6:	4301      	orrs	r1, r0
 8000af8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afc:	fa1f fe8c 	uxth.w	lr, ip
 8000b00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b04:	fb07 3610 	mls	r6, r7, r0, r3
 8000b08:	0c0b      	lsrs	r3, r1, #16
 8000b0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b12:	429e      	cmp	r6, r3
 8000b14:	fa04 f402 	lsl.w	r4, r4, r2
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x260>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b22:	d22f      	bcs.n	8000b84 <__udivmoddi4+0x2b8>
 8000b24:	429e      	cmp	r6, r3
 8000b26:	d92d      	bls.n	8000b84 <__udivmoddi4+0x2b8>
 8000b28:	3802      	subs	r0, #2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	1b9b      	subs	r3, r3, r6
 8000b2e:	b289      	uxth	r1, r1
 8000b30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b34:	fb07 3316 	mls	r3, r7, r6, r3
 8000b38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b40:	428b      	cmp	r3, r1
 8000b42:	d908      	bls.n	8000b56 <__udivmoddi4+0x28a>
 8000b44:	eb1c 0101 	adds.w	r1, ip, r1
 8000b48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b4c:	d216      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d914      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b52:	3e02      	subs	r6, #2
 8000b54:	4461      	add	r1, ip
 8000b56:	1ac9      	subs	r1, r1, r3
 8000b58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b5c:	e738      	b.n	80009d0 <__udivmoddi4+0x104>
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e705      	b.n	8000970 <__udivmoddi4+0xa4>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e3      	b.n	8000930 <__udivmoddi4+0x64>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6f8      	b.n	800095e <__udivmoddi4+0x92>
 8000b6c:	454b      	cmp	r3, r9
 8000b6e:	d2a9      	bcs.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b70:	ebb9 0802 	subs.w	r8, r9, r2
 8000b74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7a3      	b.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b7c:	4646      	mov	r6, r8
 8000b7e:	e7ea      	b.n	8000b56 <__udivmoddi4+0x28a>
 8000b80:	4620      	mov	r0, r4
 8000b82:	e794      	b.n	8000aae <__udivmoddi4+0x1e2>
 8000b84:	4640      	mov	r0, r8
 8000b86:	e7d1      	b.n	8000b2c <__udivmoddi4+0x260>
 8000b88:	46d0      	mov	r8, sl
 8000b8a:	e77b      	b.n	8000a84 <__udivmoddi4+0x1b8>
 8000b8c:	3b02      	subs	r3, #2
 8000b8e:	4461      	add	r1, ip
 8000b90:	e732      	b.n	80009f8 <__udivmoddi4+0x12c>
 8000b92:	4630      	mov	r0, r6
 8000b94:	e709      	b.n	80009aa <__udivmoddi4+0xde>
 8000b96:	4464      	add	r4, ip
 8000b98:	3802      	subs	r0, #2
 8000b9a:	e742      	b.n	8000a22 <__udivmoddi4+0x156>

08000b9c <__aeabi_idiv0>:
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <MFRC_REGW>:
 * @param addr: register address
 *
 * @param data: value to write to register
 */

PCD_StatusTypeDef MFRC_REGW(uint8_t addr,uint8_t data){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b088      	sub	sp, #32
 8000ba4:	af04      	add	r7, sp, #16
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	460a      	mov	r2, r1
 8000baa:	71fb      	strb	r3, [r7, #7]
 8000bac:	4613      	mov	r3, r2
 8000bae:	71bb      	strb	r3, [r7, #6]
	uint8_t value=data;
 8000bb0:	79bb      	ldrb	r3, [r7, #6]
 8000bb2:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, addr, 1, &value, 1, 100)!=HAL_OK){
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	2364      	movs	r3, #100	; 0x64
 8000bba:	9302      	str	r3, [sp, #8]
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	9301      	str	r3, [sp, #4]
 8000bc0:	f107 030f 	add.w	r3, r7, #15
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	2150      	movs	r1, #80	; 0x50
 8000bca:	4806      	ldr	r0, [pc, #24]	; (8000be4 <MFRC_REGW+0x44>)
 8000bcc:	f003 fcd4 	bl	8004578 <HAL_I2C_Mem_Write>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MFRC_REGW+0x3a>
		return(PCD_I2C_ERR);
 8000bd6:	23bb      	movs	r3, #187	; 0xbb
 8000bd8:	e000      	b.n	8000bdc <MFRC_REGW+0x3c>
	}
	else{
		return(PCD_OK);
 8000bda:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	200006a8 	.word	0x200006a8

08000be8 <MFRC_REGR>:
 * @param addr: register address
 *
 * @param data: pointer to store read value
 */

PCD_StatusTypeDef MFRC_REGR(uint8_t addr,uint8_t* data){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af04      	add	r7, sp, #16
 8000bee:	4603      	mov	r3, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, addr, 1, data, 1, 100)!=HAL_OK){
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	2364      	movs	r3, #100	; 0x64
 8000bfa:	9302      	str	r3, [sp, #8]
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	9301      	str	r3, [sp, #4]
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	2301      	movs	r3, #1
 8000c06:	2150      	movs	r1, #80	; 0x50
 8000c08:	4806      	ldr	r0, [pc, #24]	; (8000c24 <MFRC_REGR+0x3c>)
 8000c0a:	f003 fdaf 	bl	800476c <HAL_I2C_Mem_Read>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MFRC_REGR+0x30>
		return(PCD_I2C_ERR);
 8000c14:	23bb      	movs	r3, #187	; 0xbb
 8000c16:	e000      	b.n	8000c1a <MFRC_REGR+0x32>
	}
	else{
		return(PCD_OK);
 8000c18:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200006a8 	.word	0x200006a8

08000c28 <MFRC_FIFOW>:
 * @param data: Array of data to write to FIFO
 *
 * @param size: Size of array (bytes)
 */

PCD_StatusTypeDef MFRC_FIFOW(uint8_t* data,uint8_t size){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af04      	add	r7, sp, #16
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	460b      	mov	r3, r1
 8000c32:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	e018      	b.n	8000c6c <MFRC_FIFOW+0x44>
		if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	4413      	add	r3, r2
 8000c40:	2264      	movs	r2, #100	; 0x64
 8000c42:	9202      	str	r2, [sp, #8]
 8000c44:	2201      	movs	r2, #1
 8000c46:	9201      	str	r2, [sp, #4]
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	2209      	movs	r2, #9
 8000c4e:	2150      	movs	r1, #80	; 0x50
 8000c50:	480b      	ldr	r0, [pc, #44]	; (8000c80 <MFRC_FIFOW+0x58>)
 8000c52:	f003 fc91 	bl	8004578 <HAL_I2C_Mem_Write>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MFRC_FIFOW+0x38>
			return(PCD_I2C_ERR);
 8000c5c:	23bb      	movs	r3, #187	; 0xbb
 8000c5e:	e00a      	b.n	8000c76 <MFRC_FIFOW+0x4e>

		}
		HAL_Delay(1);
 8000c60:	2001      	movs	r0, #1
 8000c62:	f003 f871 	bl	8003d48 <HAL_Delay>
	for(int i=0;i<size;i++){
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	78fb      	ldrb	r3, [r7, #3]
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	dbe2      	blt.n	8000c3a <MFRC_FIFOW+0x12>

	}
	return(PCD_OK);
 8000c74:	23cc      	movs	r3, #204	; 0xcc
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200006a8 	.word	0x200006a8

08000c84 <MFRC_FIFOR>:
 * @param data: Array to store read values (Ensure array is large enough)
 *
 * @param size: Number of bytes to read from FIFO
 */

PCD_StatusTypeDef MFRC_FIFOR(uint8_t* data,uint8_t size){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af04      	add	r7, sp, #16
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	e018      	b.n	8000cc8 <MFRC_FIFOR+0x44>
		if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	2264      	movs	r2, #100	; 0x64
 8000c9e:	9202      	str	r2, [sp, #8]
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	9201      	str	r2, [sp, #4]
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	2209      	movs	r2, #9
 8000caa:	2150      	movs	r1, #80	; 0x50
 8000cac:	480b      	ldr	r0, [pc, #44]	; (8000cdc <MFRC_FIFOR+0x58>)
 8000cae:	f003 fd5d 	bl	800476c <HAL_I2C_Mem_Read>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MFRC_FIFOR+0x38>
			return(PCD_I2C_ERR);
 8000cb8:	23bb      	movs	r3, #187	; 0xbb
 8000cba:	e00a      	b.n	8000cd2 <MFRC_FIFOR+0x4e>
		}
		HAL_Delay(1);
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	f003 f843 	bl	8003d48 <HAL_Delay>
	for(int i=0;i<size;i++){
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	78fb      	ldrb	r3, [r7, #3]
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	dbe2      	blt.n	8000c96 <MFRC_FIFOR+0x12>

	}
	return(PCD_OK);
 8000cd0:	23cc      	movs	r3, #204	; 0xcc
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200006a8 	.word	0x200006a8

08000ce0 <MFRC_ANTON>:
	uint8_t value;
	MFRC_REGR(0x37,&value); //Expect 0x91 or 0x92
	CDC_Transmit_FS(&value,1);
}

void MFRC_ANTON(void){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
	uint8_t value;
	MFRC_REGR(TX_CONT, &value);
 8000ce6:	1dfb      	adds	r3, r7, #7
 8000ce8:	4619      	mov	r1, r3
 8000cea:	2014      	movs	r0, #20
 8000cec:	f7ff ff7c 	bl	8000be8 <MFRC_REGR>
	if ((value & 0x03) != 0x03) {
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	f003 0303 	and.w	r3, r3, #3
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d007      	beq.n	8000d0a <MFRC_ANTON+0x2a>
		MFRC_REGW(TX_CONT, value | 0x03);
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f043 0303 	orr.w	r3, r3, #3
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	4619      	mov	r1, r3
 8000d04:	2014      	movs	r0, #20
 8000d06:	f7ff ff4b 	bl	8000ba0 <MFRC_REGW>
	}
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <ClearBitMask>:
	uint8_t value;
	MFRC_REGR(RFCfgReg,&value);
	MFRC_REGW(RFCfgReg,value|0x70); //Set receiver gain to 48dB
}

void ClearBitMask(uint8_t addr,uint8_t mask){
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b084      	sub	sp, #16
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	460a      	mov	r2, r1
 8000d1c:	71fb      	strb	r3, [r7, #7]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	MFRC_REGR(addr,&tmp);
 8000d22:	f107 020f 	add.w	r2, r7, #15
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	4611      	mov	r1, r2
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff5c 	bl	8000be8 <MFRC_REGR>
	MFRC_REGW(addr,tmp&(~mask));
 8000d30:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d34:	43db      	mvns	r3, r3
 8000d36:	b25a      	sxtb	r2, r3
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	b25b      	sxtb	r3, r3
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	b25b      	sxtb	r3, r3
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	4611      	mov	r1, r2
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff ff2a 	bl	8000ba0 <MFRC_REGW>
}
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <MFRC_ANTOFF>:

void MFRC_ANTOFF(void){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	ClearBitMask(TX_CONT,0x03);
 8000d58:	2103      	movs	r1, #3
 8000d5a:	2014      	movs	r0, #20
 8000d5c:	f7ff ffd9 	bl	8000d12 <ClearBitMask>
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <CALC_CRC>:
 *
 * @param result: Array to store the two bytes of CRC
 *
 * */

PCD_StatusTypeDef CALC_CRC(uint8_t* data,uint8_t size,uint8_t* result){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	72fb      	strb	r3, [r7, #11]
	uint8_t CRCIRQ;
	MFRC_REGW(CMD_REG,IDLE); //clear command register
 8000d72:	2100      	movs	r1, #0
 8000d74:	2001      	movs	r0, #1
 8000d76:	f7ff ff13 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(DIVIRQ,0x04); //Clear interrupt bits so we can detect when CRCIRQ is set
 8000d7a:	2104      	movs	r1, #4
 8000d7c:	2005      	movs	r0, #5
 8000d7e:	f7ff ff0f 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80);
 8000d82:	2180      	movs	r1, #128	; 0x80
 8000d84:	200a      	movs	r0, #10
 8000d86:	f7ff ff0b 	bl	8000ba0 <MFRC_REGW>
	MFRC_FIFOW(data, size); //Write data to FIFO ready for CRC calculation
 8000d8a:	7afb      	ldrb	r3, [r7, #11]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	68f8      	ldr	r0, [r7, #12]
 8000d90:	f7ff ff4a 	bl	8000c28 <MFRC_FIFOW>
	MFRC_REGW(CMD_REG,CALCCRC); //Execute CRC calculation command
 8000d94:	2103      	movs	r1, #3
 8000d96:	2001      	movs	r0, #1
 8000d98:	f7ff ff02 	bl	8000ba0 <MFRC_REGW>
	HAL_Delay(100);
 8000d9c:	2064      	movs	r0, #100	; 0x64
 8000d9e:	f002 ffd3 	bl	8003d48 <HAL_Delay>
	MFRC_REGR(DIVIRQ,&CRCIRQ);
 8000da2:	f107 0317 	add.w	r3, r7, #23
 8000da6:	4619      	mov	r1, r3
 8000da8:	2005      	movs	r0, #5
 8000daa:	f7ff ff1d 	bl	8000be8 <MFRC_REGR>
	if((CRCIRQ&0x04)!=0x04){
 8000dae:	7dfb      	ldrb	r3, [r7, #23]
 8000db0:	f003 0304 	and.w	r3, r3, #4
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d101      	bne.n	8000dbc <CALC_CRC+0x58>
		return(CRC_ERR); //CRC calculation took too long
 8000db8:	23ee      	movs	r3, #238	; 0xee
 8000dba:	e00e      	b.n	8000dda <CALC_CRC+0x76>
	}
	MFRC_REGW(CMD_REG,IDLE);
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f7ff feee 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGR(CRCL, &result[0]);
 8000dc4:	6879      	ldr	r1, [r7, #4]
 8000dc6:	2022      	movs	r0, #34	; 0x22
 8000dc8:	f7ff ff0e 	bl	8000be8 <MFRC_REGR>
	MFRC_REGR(CRCH, &result[1]); //Store the 16-bit CRC in result
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	2021      	movs	r0, #33	; 0x21
 8000dd4:	f7ff ff08 	bl	8000be8 <MFRC_REGR>
	return(PCD_OK);
 8000dd8:	23cc      	movs	r3, #204	; 0xcc

}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <MFRC_INIT>:
/* Initialise MFRC to begin transceiving
 *
 * Code is written to interface with MIFARE Ultralight PICC. Different PICCs will need different baud rate.
 */

PCD_StatusTypeDef MFRC_INIT(void){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, NRST, 1); //Make sure MFRC is not reset
 8000de8:	2201      	movs	r2, #1
 8000dea:	2120      	movs	r1, #32
 8000dec:	4815      	ldr	r0, [pc, #84]	; (8000e44 <MFRC_INIT+0x60>)
 8000dee:	f003 fa4d 	bl	800428c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, NRST, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2120      	movs	r1, #32
 8000df6:	4813      	ldr	r0, [pc, #76]	; (8000e44 <MFRC_INIT+0x60>)
 8000df8:	f003 fa48 	bl	800428c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f002 ffa3 	bl	8003d48 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, NRST, 1);
 8000e02:	2201      	movs	r2, #1
 8000e04:	2120      	movs	r1, #32
 8000e06:	480f      	ldr	r0, [pc, #60]	; (8000e44 <MFRC_INIT+0x60>)
 8000e08:	f003 fa40 	bl	800428c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000e0c:	2032      	movs	r0, #50	; 0x32
 8000e0e:	f002 ff9b 	bl	8003d48 <HAL_Delay>
	MFRC_REGW(TX_REG,0x00);
 8000e12:	2100      	movs	r1, #0
 8000e14:	2012      	movs	r0, #18
 8000e16:	f7ff fec3 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(RX_REG,0x00);
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2013      	movs	r0, #19
 8000e1e:	f7ff febf 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(MODWIDTH,0x26);
 8000e22:	2126      	movs	r1, #38	; 0x26
 8000e24:	2024      	movs	r0, #36	; 0x24
 8000e26:	f7ff febb 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(TXASK,0x40); //Force 100% ASK modulation regardless of ModGsPrereg
 8000e2a:	2140      	movs	r1, #64	; 0x40
 8000e2c:	2015      	movs	r0, #21
 8000e2e:	f7ff feb7 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(MODE_REG,0x3D);
 8000e32:	213d      	movs	r1, #61	; 0x3d
 8000e34:	2011      	movs	r0, #17
 8000e36:	f7ff feb3 	bl	8000ba0 <MFRC_REGW>
	MFRC_ANTON();
 8000e3a:	f7ff ff51 	bl	8000ce0 <MFRC_ANTON>
	return(PCD_OK);
 8000e3e:	23cc      	movs	r3, #204	; 0xcc



}
 8000e40:	4618      	mov	r0, r3
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40020400 	.word	0x40020400

08000e48 <MFRC_TRANSCEIVE>:
 * !!Check PICC datasheet to see what data is needed in sendData i.e. Read/Write command, response bytes etc!!
 * !!When writing ensure correct address, most MIFARE PICCs contain OTP (one-time-programmable) sections as well as
 * lock bytes to remove write permissions from certain pages. These operations are NOT reversable!!
 */

PCD_StatusTypeDef MFRC_TRANSCEIVE(uint8_t* sendData,uint8_t sendsize,uint8_t* recdata,uint8_t recsize,uint8_t validbits){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	607a      	str	r2, [r7, #4]
 8000e52:	461a      	mov	r2, r3
 8000e54:	460b      	mov	r3, r1
 8000e56:	72fb      	strb	r3, [r7, #11]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	72bb      	strb	r3, [r7, #10]
	uint8_t IRQval=0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	75fb      	strb	r3, [r7, #23]
	uint8_t BIT_val=0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	75bb      	strb	r3, [r7, #22]

	MFRC_REGW(CMD_REG,IDLE); //Clear command register
 8000e64:	2100      	movs	r1, #0
 8000e66:	2001      	movs	r0, #1
 8000e68:	f7ff fe9a 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(IRQ_REG,0x7F);
 8000e6c:	217f      	movs	r1, #127	; 0x7f
 8000e6e:	2004      	movs	r0, #4
 8000e70:	f7ff fe96 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80); //Clear FIFO buffer
 8000e74:	2180      	movs	r1, #128	; 0x80
 8000e76:	200a      	movs	r0, #10
 8000e78:	f7ff fe92 	bl	8000ba0 <MFRC_REGW>
	MFRC_FIFOW(sendData,sendsize); //Write data to FIFO ready for transmission
 8000e7c:	7afb      	ldrb	r3, [r7, #11]
 8000e7e:	4619      	mov	r1, r3
 8000e80:	68f8      	ldr	r0, [r7, #12]
 8000e82:	f7ff fed1 	bl	8000c28 <MFRC_FIFOW>
	MFRC_REGW(BITFRAME,validbits);
 8000e86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	200d      	movs	r0, #13
 8000e8e:	f7ff fe87 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(CMD_REG,TRANSCEIVE); //Send FIFO data and receive PICC response
 8000e92:	210c      	movs	r1, #12
 8000e94:	2001      	movs	r0, #1
 8000e96:	f7ff fe83 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGR(BITFRAME,&BIT_val);
 8000e9a:	f107 0316 	add.w	r3, r7, #22
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	200d      	movs	r0, #13
 8000ea2:	f7ff fea1 	bl	8000be8 <MFRC_REGR>
	MFRC_REGW(BITFRAME,(BIT_val|0x80)); //Start send bit
 8000ea6:	7dbb      	ldrb	r3, [r7, #22]
 8000ea8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	4619      	mov	r1, r3
 8000eb0:	200d      	movs	r0, #13
 8000eb2:	f7ff fe75 	bl	8000ba0 <MFRC_REGW>
	while(IRQval&0x30!=0x30){ //Hang here until RXIRQ and IDLEIRQ bits are set
 8000eb6:	bf00      	nop
		MFRC_REGR(IRQ_REG,&IRQval);
	}
	HAL_Delay(1);
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f002 ff45 	bl	8003d48 <HAL_Delay>
	MFRC_FIFOR(recdata,recsize); //Read and store received data
 8000ebe:	7abb      	ldrb	r3, [r7, #10]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff fede 	bl	8000c84 <MFRC_FIFOR>


	return(PCD_OK);
 8000ec8:	23cc      	movs	r3, #204	; 0xcc
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <MFRC_WUPA>:
 * Function to issue the WUPA command to PICC (We use this to go from HALT to READY state check ISO standard)
 *
 * @param reponse: PICC reponse to WUPA (Expect 0x44, 0x00 for ULTRALIGHT
 * */

PCD_StatusTypeDef MFRC_WUPA(uint8_t* response){
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af02      	add	r7, sp, #8
 8000ed8:	6078      	str	r0, [r7, #4]
	uint8_t WUPA=0x52;
 8000eda:	2352      	movs	r3, #82	; 0x52
 8000edc:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 8000ede:	2180      	movs	r1, #128	; 0x80
 8000ee0:	200e      	movs	r0, #14
 8000ee2:	f7ff ff16 	bl	8000d12 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&WUPA,1, response, 2, 7)!=PCD_OK){//WUPA is a 7-bit command
 8000ee6:	f107 000f 	add.w	r0, r7, #15
 8000eea:	2307      	movs	r3, #7
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	2302      	movs	r3, #2
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	f7ff ffa8 	bl	8000e48 <MFRC_TRANSCEIVE>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2bcc      	cmp	r3, #204	; 0xcc
 8000efc:	d001      	beq.n	8000f02 <MFRC_WUPA+0x30>
		return(PCD_COMM_ERR);
 8000efe:	23aa      	movs	r3, #170	; 0xaa
 8000f00:	e000      	b.n	8000f04 <MFRC_WUPA+0x32>
	}

	else{
		return(PCD_OK);
 8000f02:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <MFRC_HALTA>:

/*
 * Function to issue HALTA command to PICC (Change from READY to HALT state) Send WUPA and select sequence to re-select PICC
 * */

PCD_StatusTypeDef MFRC_HALTA(void){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af02      	add	r7, sp, #8
	uint8_t transaction[4]={ULTRA_HALTA,0x00};
 8000f12:	2350      	movs	r3, #80	; 0x50
 8000f14:	60fb      	str	r3, [r7, #12]
	uint8_t CRC_val[2];
	uint8_t ack;

	if(CALC_CRC(transaction, 2, CRC_val)!=PCD_OK){
 8000f16:	f107 0208 	add.w	r2, r7, #8
 8000f1a:	f107 030c 	add.w	r3, r7, #12
 8000f1e:	2102      	movs	r1, #2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff1f 	bl	8000d64 <CALC_CRC>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2bcc      	cmp	r3, #204	; 0xcc
 8000f2a:	d001      	beq.n	8000f30 <MFRC_HALTA+0x24>
		return(CRC_ERR);
 8000f2c:	23ee      	movs	r3, #238	; 0xee
 8000f2e:	e013      	b.n	8000f58 <MFRC_HALTA+0x4c>
	}
	memcpy(transaction+2,CRC_val,2);
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	3302      	adds	r3, #2
 8000f36:	893a      	ldrh	r2, [r7, #8]
 8000f38:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, &ack, 1, 0)!=PCD_OK){
 8000f3a:	1dfa      	adds	r2, r7, #7
 8000f3c:	f107 000c 	add.w	r0, r7, #12
 8000f40:	2300      	movs	r3, #0
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2301      	movs	r3, #1
 8000f46:	2104      	movs	r1, #4
 8000f48:	f7ff ff7e 	bl	8000e48 <MFRC_TRANSCEIVE>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2bcc      	cmp	r3, #204	; 0xcc
 8000f50:	d001      	beq.n	8000f56 <MFRC_HALTA+0x4a>
		return(PCD_COMM_ERR);
 8000f52:	23aa      	movs	r3, #170	; 0xaa
 8000f54:	e000      	b.n	8000f58 <MFRC_HALTA+0x4c>
	}

	else{
		return(PCD_OK);
 8000f56:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <MFRC_ANTICOL1>:
 * Function to transceive anticollision cascade level 1 command (Second step after REQA to select PICC)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL1(uint8_t* reponse){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af02      	add	r7, sp, #8
 8000f66:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x93,0x20};
 8000f68:	f242 0393 	movw	r3, #8339	; 0x2093
 8000f6c:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 8000f6e:	2180      	movs	r1, #128	; 0x80
 8000f70:	200e      	movs	r0, #14
 8000f72:	f7ff fece 	bl	8000d12 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 8000f76:	f107 000c 	add.w	r0, r7, #12
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2305      	movs	r3, #5
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	2102      	movs	r1, #2
 8000f84:	f7ff ff60 	bl	8000e48 <MFRC_TRANSCEIVE>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2bcc      	cmp	r3, #204	; 0xcc
 8000f8c:	d001      	beq.n	8000f92 <MFRC_ANTICOL1+0x32>
		return(PCD_COMM_ERR);
 8000f8e:	23aa      	movs	r3, #170	; 0xaa
 8000f90:	e000      	b.n	8000f94 <MFRC_ANTICOL1+0x34>
	}
	else{
		return(PCD_OK);
 8000f92:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <MFRC_SEL1>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x04 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL1(uint8_t* anticol,uint8_t* response){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af02      	add	r7, sp, #8
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x93,0x70};
 8000fa6:	f247 0393 	movw	r3, #28819	; 0x7093
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	3302      	adds	r3, #2
 8000fbc:	2205      	movs	r2, #5
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f00e fd9f 	bl	800fb04 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 8000fc6:	f107 0208 	add.w	r2, r7, #8
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	2107      	movs	r1, #7
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fec7 	bl	8000d64 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	3307      	adds	r3, #7
 8000fdc:	893a      	ldrh	r2, [r7, #8]
 8000fde:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000fe0:	f107 000c 	add.w	r0, r7, #12
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2303      	movs	r3, #3
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	2109      	movs	r1, #9
 8000fee:	f7ff ff2b 	bl	8000e48 <MFRC_TRANSCEIVE>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2bcc      	cmp	r3, #204	; 0xcc
 8000ff6:	d001      	beq.n	8000ffc <MFRC_SEL1+0x60>
		return(PCD_COMM_ERR);
 8000ff8:	23aa      	movs	r3, #170	; 0xaa
 8000ffa:	e000      	b.n	8000ffe <MFRC_SEL1+0x62>
	}

	else{
		return(PCD_OK);
 8000ffc:	23cc      	movs	r3, #204	; 0xcc
	}

}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <MFRC_ANTICOL2>:
 * Function to transceive anticollision cascade level 2 command (Cascade level 1 commands must be performed first)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL2(uint8_t* reponse){
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af02      	add	r7, sp, #8
 800100c:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x95,0x20};
 800100e:	f242 0395 	movw	r3, #8341	; 0x2095
 8001012:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 8001014:	2180      	movs	r1, #128	; 0x80
 8001016:	200e      	movs	r0, #14
 8001018:	f7ff fe7b 	bl	8000d12 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 800101c:	f107 000c 	add.w	r0, r7, #12
 8001020:	2300      	movs	r3, #0
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2305      	movs	r3, #5
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	2102      	movs	r1, #2
 800102a:	f7ff ff0d 	bl	8000e48 <MFRC_TRANSCEIVE>
 800102e:	4603      	mov	r3, r0
 8001030:	2bcc      	cmp	r3, #204	; 0xcc
 8001032:	d001      	beq.n	8001038 <MFRC_ANTICOL2+0x32>
		return(PCD_COMM_ERR);
 8001034:	23aa      	movs	r3, #170	; 0xaa
 8001036:	e000      	b.n	800103a <MFRC_ANTICOL2+0x34>
	}
	else{
		return(PCD_OK);
 8001038:	23cc      	movs	r3, #204	; 0xcc
	}
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <MFRC_SEL2>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x00 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL2(uint8_t* anticol,uint8_t* response){
 8001042:	b580      	push	{r7, lr}
 8001044:	b088      	sub	sp, #32
 8001046:	af02      	add	r7, sp, #8
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x95,0x70};
 800104c:	f247 0395 	movw	r3, #28821	; 0x7095
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	f107 0310 	add.w	r3, r7, #16
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	3302      	adds	r3, #2
 8001062:	2205      	movs	r2, #5
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	4618      	mov	r0, r3
 8001068:	f00e fd4c 	bl	800fb04 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 800106c:	f107 0208 	add.w	r2, r7, #8
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2107      	movs	r1, #7
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fe74 	bl	8000d64 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	3307      	adds	r3, #7
 8001082:	893a      	ldrh	r2, [r7, #8]
 8001084:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8001086:	f107 000c 	add.w	r0, r7, #12
 800108a:	2300      	movs	r3, #0
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	2303      	movs	r3, #3
 8001090:	683a      	ldr	r2, [r7, #0]
 8001092:	2109      	movs	r1, #9
 8001094:	f7ff fed8 	bl	8000e48 <MFRC_TRANSCEIVE>
 8001098:	4603      	mov	r3, r0
 800109a:	2bcc      	cmp	r3, #204	; 0xcc
 800109c:	d001      	beq.n	80010a2 <MFRC_SEL2+0x60>
		return(PCD_COMM_ERR);
 800109e:	23aa      	movs	r3, #170	; 0xaa
 80010a0:	e000      	b.n	80010a4 <MFRC_SEL2+0x62>
	}

	else{
		return(PCD_OK);
 80010a2:	23cc      	movs	r3, #204	; 0xcc
	}

}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <PICC_Select>:

/*
 * Function to select the MIFARE ULTRALIGHT PICC (Don't forget to call REQA on first power up or use PICC_CHECK below)
 * */

PCD_StatusTypeDef PICC_Select(void){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0
	  uint8_t SELECT1[3];
	  uint8_t ANTICOL2[5];
	  uint8_t SELECT2[3];
	  uint8_t ATQA[2];

	  if (PICC_CHECK() != PCD_OK) {
 80010b2:	f000 f839 	bl	8001128 <PICC_CHECK>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2bcc      	cmp	r3, #204	; 0xcc
 80010ba:	d001      	beq.n	80010c0 <PICC_Select+0x14>
		  return PCD_COMM_ERR;
 80010bc:	23aa      	movs	r3, #170	; 0xaa
 80010be:	e02f      	b.n	8001120 <PICC_Select+0x74>
	  }
	  MFRC_WUPA(ATQA);
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ff05 	bl	8000ed2 <MFRC_WUPA>
	  MFRC_ANTICOL1(ANTICOL1);
 80010c8:	f107 0318 	add.w	r3, r7, #24
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff47 	bl	8000f60 <MFRC_ANTICOL1>
	  if(ANTICOL1[0]!=0x88){
 80010d2:	7e3b      	ldrb	r3, [r7, #24]
 80010d4:	2b88      	cmp	r3, #136	; 0x88
 80010d6:	d001      	beq.n	80010dc <PICC_Select+0x30>
		  return(PCD_COMM_ERR);
 80010d8:	23aa      	movs	r3, #170	; 0xaa
 80010da:	e021      	b.n	8001120 <PICC_Select+0x74>
	  }
	  HAL_Delay(10);
 80010dc:	200a      	movs	r0, #10
 80010de:	f002 fe33 	bl	8003d48 <HAL_Delay>
	  MFRC_SEL1(ANTICOL1, SELECT1);
 80010e2:	f107 0214 	add.w	r2, r7, #20
 80010e6:	f107 0318 	add.w	r3, r7, #24
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff55 	bl	8000f9c <MFRC_SEL1>
	  HAL_Delay(10);
 80010f2:	200a      	movs	r0, #10
 80010f4:	f002 fe28 	bl	8003d48 <HAL_Delay>
	  MFRC_ANTICOL2(ANTICOL2);
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff82 	bl	8001006 <MFRC_ANTICOL2>
	  HAL_Delay(10);
 8001102:	200a      	movs	r0, #10
 8001104:	f002 fe20 	bl	8003d48 <HAL_Delay>
	  MFRC_SEL2(ANTICOL2, SELECT2);
 8001108:	f107 0208 	add.w	r2, r7, #8
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	4611      	mov	r1, r2
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff95 	bl	8001042 <MFRC_SEL2>
	  HAL_Delay(10);
 8001118:	200a      	movs	r0, #10
 800111a:	f002 fe15 	bl	8003d48 <HAL_Delay>
	  return(PCD_OK);
 800111e:	23cc      	movs	r3, #204	; 0xcc
}
 8001120:	4618      	mov	r0, r3
 8001122:	3720      	adds	r7, #32
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <PICC_CHECK>:

/*
 * Function to check for PICC in field
 * */

PCD_StatusTypeDef PICC_CHECK(void){
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
	uint8_t ATQA[2];
	if(MFRC_WUPA(ATQA)!=PCD_OK){
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fece 	bl	8000ed2 <MFRC_WUPA>
 8001136:	4603      	mov	r3, r0
 8001138:	2bcc      	cmp	r3, #204	; 0xcc
 800113a:	d001      	beq.n	8001140 <PICC_CHECK+0x18>
		return(PCD_COMM_ERR);
 800113c:	23aa      	movs	r3, #170	; 0xaa
 800113e:	e00a      	b.n	8001156 <PICC_CHECK+0x2e>
	}

	else{
		if((ATQA[0]!=ULTRA_ATQA0) || (ATQA[1] != ULTRA_ATQA1)){
 8001140:	793b      	ldrb	r3, [r7, #4]
 8001142:	2b44      	cmp	r3, #68	; 0x44
 8001144:	d102      	bne.n	800114c <PICC_CHECK+0x24>
 8001146:	797b      	ldrb	r3, [r7, #5]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <PICC_CHECK+0x28>
			return(PCD_COMM_ERR);
 800114c:	23aa      	movs	r3, #170	; 0xaa
 800114e:	e002      	b.n	8001156 <PICC_CHECK+0x2e>
		}
		else{
			MFRC_HALTA();
 8001150:	f7ff fedc 	bl	8000f0c <MFRC_HALTA>
			return(PCD_OK);
 8001154:	23cc      	movs	r3, #204	; 0xcc
		}
	}
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <UL_READ>:
 *
 * @param data: Array to store read data
 *
 * */

PCD_StatusTypeDef UL_READ(uint8_t addr,uint8_t* data){
 800115e:	b580      	push	{r7, lr}
 8001160:	b086      	sub	sp, #24
 8001162:	af02      	add	r7, sp, #8
 8001164:	4603      	mov	r3, r0
 8001166:	6039      	str	r1, [r7, #0]
 8001168:	71fb      	strb	r3, [r7, #7]

	uint8_t transaction[4]={ULTRA_READ,addr};
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	2330      	movs	r3, #48	; 0x30
 8001170:	733b      	strb	r3, [r7, #12]
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	737b      	strb	r3, [r7, #13]
	uint8_t CRC_val[2];

	CALC_CRC(transaction, 2, CRC_val);
 8001176:	f107 0208 	add.w	r2, r7, #8
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	2102      	movs	r1, #2
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fdef 	bl	8000d64 <CALC_CRC>

	memcpy(transaction+2,CRC_val,2);
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	3302      	adds	r3, #2
 800118c:	893a      	ldrh	r2, [r7, #8]
 800118e:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, data, UL_READSIZE, 0)!=PCD_OK){
 8001190:	f107 000c 	add.w	r0, r7, #12
 8001194:	2300      	movs	r3, #0
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2310      	movs	r3, #16
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	2104      	movs	r1, #4
 800119e:	f7ff fe53 	bl	8000e48 <MFRC_TRANSCEIVE>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2bcc      	cmp	r3, #204	; 0xcc
 80011a6:	d001      	beq.n	80011ac <UL_READ+0x4e>
		return(PCD_COMM_ERR);
 80011a8:	23aa      	movs	r3, #170	; 0xaa
 80011aa:	e000      	b.n	80011ae <UL_READ+0x50>
	}

	else{
		return(PCD_OK);
 80011ac:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <UL_WRITE>:
 *
 * @param data: Array of 4 bytes to write
 *
 * */

PCD_StatusTypeDef UL_WRITE(uint8_t addr,uint8_t* data){
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b088      	sub	sp, #32
 80011ba:	af02      	add	r7, sp, #8
 80011bc:	4603      	mov	r3, r0
 80011be:	6039      	str	r1, [r7, #0]
 80011c0:	71fb      	strb	r3, [r7, #7]
	uint8_t transaction[8]={ULTRA_WRITE,addr};
 80011c2:	f107 0310 	add.w	r3, r7, #16
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	23a2      	movs	r3, #162	; 0xa2
 80011ce:	743b      	strb	r3, [r7, #16]
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	747b      	strb	r3, [r7, #17]
	uint8_t ack;
	uint8_t CRC_val[2];

	//Safety check to see if we're trying to write to any of the first four pages which contain sensitive data (uid, OTP etc)
	if (addr <= 3) {
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d801      	bhi.n	80011de <UL_WRITE+0x28>
		return PCD_PROTECTED_ERR;
 80011da:	2302      	movs	r3, #2
 80011dc:	e022      	b.n	8001224 <UL_WRITE+0x6e>
	}

	memcpy(transaction+2,data,4);
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	3302      	adds	r3, #2
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	6812      	ldr	r2, [r2, #0]
 80011e8:	601a      	str	r2, [r3, #0]

	CALC_CRC(transaction, 6, CRC_val);
 80011ea:	f107 020c 	add.w	r2, r7, #12
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	2106      	movs	r1, #6
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fdb5 	bl	8000d64 <CALC_CRC>

	memcpy(transaction+6,CRC_val,2);
 80011fa:	f107 0310 	add.w	r3, r7, #16
 80011fe:	3306      	adds	r3, #6
 8001200:	89ba      	ldrh	r2, [r7, #12]
 8001202:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 8, &ack, 1, 0)!=PCD_OK){
 8001204:	f107 020f 	add.w	r2, r7, #15
 8001208:	f107 0010 	add.w	r0, r7, #16
 800120c:	2300      	movs	r3, #0
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2301      	movs	r3, #1
 8001212:	2108      	movs	r1, #8
 8001214:	f7ff fe18 	bl	8000e48 <MFRC_TRANSCEIVE>
 8001218:	4603      	mov	r3, r0
 800121a:	2bcc      	cmp	r3, #204	; 0xcc
 800121c:	d001      	beq.n	8001222 <UL_WRITE+0x6c>
		return(PCD_COMM_ERR);
 800121e:	23aa      	movs	r3, #170	; 0xaa
 8001220:	e000      	b.n	8001224 <UL_WRITE+0x6e>
	}

	else{
		return(PCD_OK);
 8001222:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <UL_getuid>:
 * Read the 7 byte uid of MIFARE Ultralight card
 *
 * @param uid - Array to store uid
 * @return PCD_OK if uid was successfully read
 * */
PCD_StatusTypeDef UL_getuid(uint8_t* uid) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	uint8_t read[UL_READSIZE];

	if (UL_READ(0x00, read) != PCD_OK) {
 8001234:	f107 0308 	add.w	r3, r7, #8
 8001238:	4619      	mov	r1, r3
 800123a:	2000      	movs	r0, #0
 800123c:	f7ff ff8f 	bl	800115e <UL_READ>
 8001240:	4603      	mov	r3, r0
 8001242:	2bcc      	cmp	r3, #204	; 0xcc
 8001244:	d001      	beq.n	800124a <UL_getuid+0x1e>
		return PCD_COMM_ERR;
 8001246:	23aa      	movs	r3, #170	; 0xaa
 8001248:	e007      	b.n	800125a <UL_getuid+0x2e>
	}

	memcpy(uid, read, UL_UIDSIZE);
 800124a:	f107 0308 	add.w	r3, r7, #8
 800124e:	2207      	movs	r2, #7
 8001250:	4619      	mov	r1, r3
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f00e fc56 	bl	800fb04 <memcpy>
	return PCD_OK;
 8001258:	23cc      	movs	r3, #204	; 0xcc
}
 800125a:	4618      	mov	r0, r3
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <UL_getalldata>:
 * Get all 64 bytes of user data from card
 *
 * @param data - Array to store data
 * @return PCD_OK if data was successfully read
 * */
PCD_StatusTypeDef UL_getalldata(uint8_t* data) {
 8001262:	b580      	push	{r7, lr}
 8001264:	b084      	sub	sp, #16
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < UL_DATAEND; i += UL_PAGESIZE) {
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	e010      	b.n	8001292 <UL_getalldata+0x30>
		if (UL_READ(i, data) != PCD_OK) {
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	6879      	ldr	r1, [r7, #4]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff71 	bl	800115e <UL_READ>
 800127c:	4603      	mov	r3, r0
 800127e:	2bcc      	cmp	r3, #204	; 0xcc
 8001280:	d001      	beq.n	8001286 <UL_getalldata+0x24>
			return PCD_COMM_ERR;
 8001282:	23aa      	movs	r3, #170	; 0xaa
 8001284:	e009      	b.n	800129a <UL_getalldata+0x38>
		}
		data += UL_READSIZE; //increment pointer
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3310      	adds	r3, #16
 800128a:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < UL_DATAEND; i += UL_PAGESIZE) {
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	3304      	adds	r3, #4
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2b0e      	cmp	r3, #14
 8001296:	ddeb      	ble.n	8001270 <UL_getalldata+0xe>
	}

	return PCD_OK;
 8001298:	23cc      	movs	r3, #204	; 0xcc
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <UL_readcard>:
 * Read MIFARE Ultralight card data into card struct
 *
 * @param result - Card to store data into
 * @return PCD_OK if data was successfully read
 * */
PCD_StatusTypeDef UL_readcard(Card* result) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

	result->type = "MIFARE Ultralight";
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a16      	ldr	r2, [pc, #88]	; (8001308 <UL_readcard+0x64>)
 80012b0:	60da      	str	r2, [r3, #12]
	result->name = "Test1";
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a15      	ldr	r2, [pc, #84]	; (800130c <UL_readcard+0x68>)
 80012b6:	609a      	str	r2, [r3, #8]
	result->uidsize = UL_UIDSIZE;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2207      	movs	r2, #7
 80012bc:	711a      	strb	r2, [r3, #4]
	result->contents_size = UL_MEMSIZE;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2240      	movs	r2, #64	; 0x40
 80012c2:	831a      	strh	r2, [r3, #24]
	result->read_protected = 0;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	741a      	strb	r2, [r3, #16]

	if (PICC_Select() != PCD_OK) { //Select PICC if available
 80012ca:	f7ff feef 	bl	80010ac <PICC_Select>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2bcc      	cmp	r3, #204	; 0xcc
 80012d2:	d001      	beq.n	80012d8 <UL_readcard+0x34>
		return PCD_NO_PICC;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e012      	b.n	80012fe <UL_readcard+0x5a>
	}
	if ((UL_getuid(result->uid) != PCD_OK) || (UL_getalldata(result->contents) !=  PCD_OK)) {
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ffa5 	bl	800122c <UL_getuid>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2bcc      	cmp	r3, #204	; 0xcc
 80012e6:	d107      	bne.n	80012f8 <UL_readcard+0x54>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ffb8 	bl	8001262 <UL_getalldata>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2bcc      	cmp	r3, #204	; 0xcc
 80012f6:	d001      	beq.n	80012fc <UL_readcard+0x58>
		return PCD_COMM_ERR;
 80012f8:	23aa      	movs	r3, #170	; 0xaa
 80012fa:	e000      	b.n	80012fe <UL_readcard+0x5a>
	}
	return PCD_OK;
 80012fc:	23cc      	movs	r3, #204	; 0xcc
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	080104a0 	.word	0x080104a0
 800130c:	080104b4 	.word	0x080104b4

08001310 <UL_writecard>:
/**
 * Write a card object to a physical card
 * @param towrite - Card instance to write
 * @return PCD_OK if card was successfully written to and verified.
 * */
PCD_StatusTypeDef UL_writecard(Card* towrite) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	uint8_t* data_to_write = malloc(UL_DATASIZE * sizeof(uint8_t));
 8001318:	2030      	movs	r0, #48	; 0x30
 800131a:	f00e fbe3 	bl	800fae4 <malloc>
 800131e:	4603      	mov	r3, r0
 8001320:	60bb      	str	r3, [r7, #8]
	memcpy(data_to_write, towrite->contents + (UL_MEMSIZE - UL_DATASIZE), UL_DATASIZE);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	3310      	adds	r3, #16
 8001328:	2230      	movs	r2, #48	; 0x30
 800132a:	4619      	mov	r1, r3
 800132c:	68b8      	ldr	r0, [r7, #8]
 800132e:	f00e fbe9 	bl	800fb04 <memcpy>

	if (PICC_Select() != PCD_OK) {
 8001332:	f7ff febb 	bl	80010ac <PICC_Select>
 8001336:	4603      	mov	r3, r0
 8001338:	2bcc      	cmp	r3, #204	; 0xcc
 800133a:	d004      	beq.n	8001346 <UL_writecard+0x36>
		free(data_to_write);
 800133c:	68b8      	ldr	r0, [r7, #8]
 800133e:	f00e fbd9 	bl	800faf4 <free>
		return PCD_NO_PICC;
 8001342:	2301      	movs	r3, #1
 8001344:	e020      	b.n	8001388 <UL_writecard+0x78>
	}

	for (int addr = UL_DATASTART; addr <= UL_DATAEND; addr++) {
 8001346:	2304      	movs	r3, #4
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	e016      	b.n	800137a <UL_writecard+0x6a>
		if (UL_WRITE(addr, data_to_write + (UL_PAGESIZE * (addr - UL_DATASTART))) != PCD_OK) {
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	3b04      	subs	r3, #4
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4619      	mov	r1, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	440b      	add	r3, r1
 800135c:	4619      	mov	r1, r3
 800135e:	4610      	mov	r0, r2
 8001360:	f7ff ff29 	bl	80011b6 <UL_WRITE>
 8001364:	4603      	mov	r3, r0
 8001366:	2bcc      	cmp	r3, #204	; 0xcc
 8001368:	d004      	beq.n	8001374 <UL_writecard+0x64>
			free(data_to_write);
 800136a:	68b8      	ldr	r0, [r7, #8]
 800136c:	f00e fbc2 	bl	800faf4 <free>
			return PCD_COMM_ERR;
 8001370:	23aa      	movs	r3, #170	; 0xaa
 8001372:	e009      	b.n	8001388 <UL_writecard+0x78>
	for (int addr = UL_DATASTART; addr <= UL_DATAEND; addr++) {
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	3301      	adds	r3, #1
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2b0f      	cmp	r3, #15
 800137e:	dde5      	ble.n	800134c <UL_writecard+0x3c>
		}
	}
	free(data_to_write);
 8001380:	68b8      	ldr	r0, [r7, #8]
 8001382:	f00e fbb7 	bl	800faf4 <free>
	return PCD_OK;
 8001386:	23cc      	movs	r3, #204	; 0xcc
}
 8001388:	4618      	mov	r0, r3
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <uid_tostring>:
 *
 * @param uid - Uid
 * @param size - Size of uid
 * @return pointer to string of uid
 * */
char* uid_tostring(uint8_t* uid, uint8_t size) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	70fb      	strb	r3, [r7, #3]
	char* result = malloc((2 * size * sizeof(char)) + 1); //multiply by 2 since 1 byte is two hex digits
 800139c:	78fb      	ldrb	r3, [r7, #3]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	3301      	adds	r3, #1
 80013a2:	4618      	mov	r0, r3
 80013a4:	f00e fb9e 	bl	800fae4 <malloc>
 80013a8:	4603      	mov	r3, r0
 80013aa:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < size; i++) {
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	e023      	b.n	80013fa <uid_tostring+0x6a>
		if (uid[i] <= 0x0F) { //Only one hex character
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	4413      	add	r3, r2
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b0f      	cmp	r3, #15
 80013bc:	d80d      	bhi.n	80013da <uid_tostring+0x4a>
			sprintf(result + (2 * i), "0%X", uid[i]);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	461a      	mov	r2, r3
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	1898      	adds	r0, r3, r2
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4912      	ldr	r1, [pc, #72]	; (800141c <uid_tostring+0x8c>)
 80013d4:	f00e fc9c 	bl	800fd10 <siprintf>
 80013d8:	e00c      	b.n	80013f4 <uid_tostring+0x64>
		} else {
			sprintf(result + (2 * i), "%X", uid[i]);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	461a      	mov	r2, r3
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	1898      	adds	r0, r3, r2
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	490c      	ldr	r1, [pc, #48]	; (8001420 <uid_tostring+0x90>)
 80013f0:	f00e fc8e 	bl	800fd10 <siprintf>
	for (int i = 0; i < size; i++) {
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	3301      	adds	r3, #1
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	78fb      	ldrb	r3, [r7, #3]
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	429a      	cmp	r2, r3
 8001400:	dbd7      	blt.n	80013b2 <uid_tostring+0x22>
		}
	}
	result[2 * size] = '\0'; //Add null
 8001402:	78fb      	ldrb	r3, [r7, #3]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	461a      	mov	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	4413      	add	r3, r2
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
	return result;
 8001410:	68bb      	ldr	r3, [r7, #8]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	080104bc 	.word	0x080104bc
 8001420:	080104c0 	.word	0x080104c0

08001424 <UL_verify>:
/**
 * Verify that a phyiscal card's contents matches what was intended to be written
 * @param check - Card to check phyiscal card data against
 * @return PCD_OK if contents is correct
 * */
PCD_StatusTypeDef UL_verify(Card* check) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	Card* read = malloc(sizeof(Card));
 800142c:	201c      	movs	r0, #28
 800142e:	f00e fb59 	bl	800fae4 <malloc>
 8001432:	4603      	mov	r3, r0
 8001434:	60bb      	str	r3, [r7, #8]
	read->contents = malloc(UL_MEMSIZE * sizeof(uint8_t));
 8001436:	2040      	movs	r0, #64	; 0x40
 8001438:	f00e fb54 	bl	800fae4 <malloc>
 800143c:	4603      	mov	r3, r0
 800143e:	461a      	mov	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	615a      	str	r2, [r3, #20]
	read->uid = malloc(UL_UIDSIZE * sizeof(uint8_t));
 8001444:	2007      	movs	r0, #7
 8001446:	f00e fb4d 	bl	800fae4 <malloc>
 800144a:	4603      	mov	r3, r0
 800144c:	461a      	mov	r2, r3
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	601a      	str	r2, [r3, #0]

	if (UL_readcard(read) != PCD_OK) {
 8001452:	68b8      	ldr	r0, [r7, #8]
 8001454:	f7ff ff26 	bl	80012a4 <UL_readcard>
 8001458:	4603      	mov	r3, r0
 800145a:	2bcc      	cmp	r3, #204	; 0xcc
 800145c:	d001      	beq.n	8001462 <UL_verify+0x3e>
		return PCD_COMM_ERR;
 800145e:	23aa      	movs	r3, #170	; 0xaa
 8001460:	e031      	b.n	80014c6 <UL_verify+0xa2>
	}

	for (int byte = 0; byte < UL_MEMSIZE; byte++) {
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	e01d      	b.n	80014a4 <UL_verify+0x80>
		if (read->contents[byte] != check->contents[byte]) {
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	695a      	ldr	r2, [r3, #20]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4413      	add	r3, r2
 8001470:	781a      	ldrb	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6959      	ldr	r1, [r3, #20]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	440b      	add	r3, r1
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	429a      	cmp	r2, r3
 800147e:	d00e      	beq.n	800149e <UL_verify+0x7a>
			free(read->contents);
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	4618      	mov	r0, r3
 8001486:	f00e fb35 	bl	800faf4 <free>
			free(read->uid);
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f00e fb30 	bl	800faf4 <free>
			free(read);
 8001494:	68b8      	ldr	r0, [r7, #8]
 8001496:	f00e fb2d 	bl	800faf4 <free>
			return PCD_VERIFY_ERR;
 800149a:	2303      	movs	r3, #3
 800149c:	e013      	b.n	80014c6 <UL_verify+0xa2>
	for (int byte = 0; byte < UL_MEMSIZE; byte++) {
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	3301      	adds	r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2b3f      	cmp	r3, #63	; 0x3f
 80014a8:	ddde      	ble.n	8001468 <UL_verify+0x44>
		}
	}
	free(read->contents);
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f00e fb20 	bl	800faf4 <free>
	free(read->uid);
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f00e fb1b 	bl	800faf4 <free>
	free(read);
 80014be:	68b8      	ldr	r0, [r7, #8]
 80014c0:	f00e fb18 	bl	800faf4 <free>
	return PCD_OK;
 80014c4:	23cc      	movs	r3, #204	; 0xcc
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <OLED_Clear>:
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
}
/*Function to clear OLED (write all zero to display memory)
 *
 * */
void OLED_Clear(void){
 80014ce:	b580      	push	{r7, lr}
 80014d0:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 80014d4:	af00      	add	r7, sp, #0
	uint8_t zeros[1024];
	memset(zeros,0x00,1024);
 80014d6:	463b      	mov	r3, r7
 80014d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f00e fb1e 	bl	800fb20 <memset>
	OLED_FLUSH(zeros);
 80014e4:	463b      	mov	r3, r7
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 f87c 	bl	80015e4 <OLED_FLUSH>

}
 80014ec:	bf00      	nop
 80014ee:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <OLED_cmd>:

/*Function to send single byte command to display (ENSURE DC is low)
 *
 * @param data: Command to send to display
 * */
HAL_StatusTypeDef OLED_cmd(uint8_t data){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
	uint8_t value=data;
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2110      	movs	r1, #16
 800150a:	4815      	ldr	r0, [pc, #84]	; (8001560 <OLED_cmd+0x68>)
 800150c:	f002 febe 	bl	800428c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2102      	movs	r1, #2
 8001514:	4813      	ldr	r0, [pc, #76]	; (8001564 <OLED_cmd+0x6c>)
 8001516:	f002 feb9 	bl	800428c <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY)!=HAL_OK){
 800151a:	f107 010f 	add.w	r1, r7, #15
 800151e:	f04f 33ff 	mov.w	r3, #4294967295
 8001522:	2201      	movs	r2, #1
 8001524:	4810      	ldr	r0, [pc, #64]	; (8001568 <OLED_cmd+0x70>)
 8001526:	f005 fe5c 	bl	80071e2 <HAL_SPI_Transmit>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d009      	beq.n	8001544 <OLED_cmd+0x4c>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8001530:	2201      	movs	r2, #1
 8001532:	2110      	movs	r1, #16
 8001534:	480a      	ldr	r0, [pc, #40]	; (8001560 <OLED_cmd+0x68>)
 8001536:	f002 fea9 	bl	800428c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800153a:	2001      	movs	r0, #1
 800153c:	f002 fc04 	bl	8003d48 <HAL_Delay>
		return(HAL_ERROR);
 8001540:	2301      	movs	r3, #1
 8001542:	e008      	b.n	8001556 <OLED_cmd+0x5e>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8001544:	2201      	movs	r2, #1
 8001546:	2110      	movs	r1, #16
 8001548:	4805      	ldr	r0, [pc, #20]	; (8001560 <OLED_cmd+0x68>)
 800154a:	f002 fe9f 	bl	800428c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800154e:	2001      	movs	r0, #1
 8001550:	f002 fbfa 	bl	8003d48 <HAL_Delay>
		return(HAL_OK);
 8001554:	2300      	movs	r3, #0
	}

}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40020000 	.word	0x40020000
 8001564:	40020400 	.word	0x40020400
 8001568:	200006fc 	.word	0x200006fc

0800156c <OLED_data>:
 *
 * @param data: Pointer to array of data to send
 *
 * @param size: Size of array (maximum is 1024)
 * */
HAL_StatusTypeDef OLED_data(uint8_t* data,uint8_t size){
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8001578:	2200      	movs	r2, #0
 800157a:	2110      	movs	r1, #16
 800157c:	4816      	ldr	r0, [pc, #88]	; (80015d8 <OLED_data+0x6c>)
 800157e:	f002 fe85 	bl	800428c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 1);
 8001582:	2201      	movs	r2, #1
 8001584:	2102      	movs	r1, #2
 8001586:	4815      	ldr	r0, [pc, #84]	; (80015dc <OLED_data+0x70>)
 8001588:	f002 fe80 	bl	800428c <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY)!=HAL_OK){
 800158c:	78fb      	ldrb	r3, [r7, #3]
 800158e:	b29a      	uxth	r2, r3
 8001590:	f04f 33ff 	mov.w	r3, #4294967295
 8001594:	6879      	ldr	r1, [r7, #4]
 8001596:	4812      	ldr	r0, [pc, #72]	; (80015e0 <OLED_data+0x74>)
 8001598:	f005 fe23 	bl	80071e2 <HAL_SPI_Transmit>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00b      	beq.n	80015ba <OLED_data+0x4e>
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2102      	movs	r1, #2
 80015a6:	480d      	ldr	r0, [pc, #52]	; (80015dc <OLED_data+0x70>)
 80015a8:	f002 fe70 	bl	800428c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 80015ac:	2201      	movs	r2, #1
 80015ae:	2110      	movs	r1, #16
 80015b0:	4809      	ldr	r0, [pc, #36]	; (80015d8 <OLED_data+0x6c>)
 80015b2:	f002 fe6b 	bl	800428c <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00a      	b.n	80015d0 <OLED_data+0x64>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2102      	movs	r1, #2
 80015be:	4807      	ldr	r0, [pc, #28]	; (80015dc <OLED_data+0x70>)
 80015c0:	f002 fe64 	bl	800428c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 80015c4:	2201      	movs	r2, #1
 80015c6:	2110      	movs	r1, #16
 80015c8:	4803      	ldr	r0, [pc, #12]	; (80015d8 <OLED_data+0x6c>)
 80015ca:	f002 fe5f 	bl	800428c <HAL_GPIO_WritePin>
		return(HAL_OK);
 80015ce:	2300      	movs	r3, #0
	}



}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40020000 	.word	0x40020000
 80015dc:	40020400 	.word	0x40020400
 80015e0:	200006fc 	.word	0x200006fc

080015e4 <OLED_FLUSH>:

/*Function to send a whole page of display data (1024 bytes)
 *
 * @param mem: Pointer to array of data
 * */
void OLED_FLUSH(uint8_t* mem){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	for(int page=0;page<8;page++){
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	e023      	b.n	800163a <OLED_FLUSH+0x56>
		OLED_cmd(PAGE_ADDR+page);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	3b50      	subs	r3, #80	; 0x50
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff ff7c 	bl	80014f8 <OLED_cmd>
		OLED_cmd(LOWER_COL);
 8001600:	2002      	movs	r0, #2
 8001602:	f7ff ff79 	bl	80014f8 <OLED_cmd>
		OLED_cmd(UPPER_COL);
 8001606:	2010      	movs	r0, #16
 8001608:	f7ff ff76 	bl	80014f8 <OLED_cmd>
		for(int i=0;i<128;i++){
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	e00d      	b.n	800162e <OLED_FLUSH+0x4a>
			OLED_data(&mem[(page*128)+i],1);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	01da      	lsls	r2, r3, #7
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	4413      	add	r3, r2
 800161a:	461a      	mov	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4413      	add	r3, r2
 8001620:	2101      	movs	r1, #1
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff ffa2 	bl	800156c <OLED_data>
		for(int i=0;i<128;i++){
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	3301      	adds	r3, #1
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	2b7f      	cmp	r3, #127	; 0x7f
 8001632:	ddee      	ble.n	8001612 <OLED_FLUSH+0x2e>
	for(int page=0;page<8;page++){
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	3301      	adds	r3, #1
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2b07      	cmp	r3, #7
 800163e:	ddd8      	ble.n	80015f2 <OLED_FLUSH+0xe>
		}


	}
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <OLED_INIT>:

/*Function to initialise OLED display
 *
 * */

HAL_StatusTypeDef OLED_INIT(void){
 800164c:	b5b0      	push	{r4, r5, r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8001652:	2201      	movs	r2, #1
 8001654:	2110      	movs	r1, #16
 8001656:	482f      	ldr	r0, [pc, #188]	; (8001714 <OLED_INIT+0xc8>)
 8001658:	f002 fe18 	bl	800428c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 800165c:	2201      	movs	r2, #1
 800165e:	2108      	movs	r1, #8
 8001660:	482c      	ldr	r0, [pc, #176]	; (8001714 <OLED_INIT+0xc8>)
 8001662:	f002 fe13 	bl	800428c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2102      	movs	r1, #2
 800166a:	482b      	ldr	r0, [pc, #172]	; (8001718 <OLED_INIT+0xcc>)
 800166c:	f002 fe0e 	bl	800428c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001670:	2064      	movs	r0, #100	; 0x64
 8001672:	f002 fb69 	bl	8003d48 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2108      	movs	r1, #8
 800167a:	4826      	ldr	r0, [pc, #152]	; (8001714 <OLED_INIT+0xc8>)
 800167c:	f002 fe06 	bl	800428c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001680:	2064      	movs	r0, #100	; 0x64
 8001682:	f002 fb61 	bl	8003d48 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8001686:	2201      	movs	r2, #1
 8001688:	2108      	movs	r1, #8
 800168a:	4822      	ldr	r0, [pc, #136]	; (8001714 <OLED_INIT+0xc8>)
 800168c:	f002 fdfe 	bl	800428c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001690:	2064      	movs	r0, #100	; 0x64
 8001692:	f002 fb59 	bl	8003d48 <HAL_Delay>
	uint8_t config_data[25]={DISP_OFF , LOWER_COL , UPPER_COL , LINE_STRT , PAGE_ADDR , CNTRST_SET , CNTRST , SEG_MAP ,
 8001696:	4b21      	ldr	r3, [pc, #132]	; (800171c <OLED_INIT+0xd0>)
 8001698:	463c      	mov	r4, r7
 800169a:	461d      	mov	r5, r3
 800169c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800169e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016a4:	c403      	stmia	r4!, {r0, r1}
 80016a6:	7022      	strb	r2, [r4, #0]
							DISP_NORM , MUX_SET , MUX , DCDC_SET , DCDC , CHRG_PMP , SCAN_DIR , DISP_OFFSET_SET ,
							DISP_OFFSET , OSC_SET , OSC , PRE_CHRG_SET , PRE_CHRG , COM_SET , COM , VCOM_SET, VCOM};


	for(int i = 0; i < 25; i++){
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
 80016ac:	e00c      	b.n	80016c8 <OLED_INIT+0x7c>
		OLED_cmd(config_data[i]);
 80016ae:	463a      	mov	r2, r7
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	4413      	add	r3, r2
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff ff1e 	bl	80014f8 <OLED_cmd>
		HAL_Delay(1);
 80016bc:	2001      	movs	r0, #1
 80016be:	f002 fb43 	bl	8003d48 <HAL_Delay>
	for(int i = 0; i < 25; i++){
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3301      	adds	r3, #1
 80016c6:	61fb      	str	r3, [r7, #28]
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	2b18      	cmp	r3, #24
 80016cc:	ddef      	ble.n	80016ae <OLED_INIT+0x62>
	}

	OLED_cmd(DISP_INV);
 80016ce:	20a7      	movs	r0, #167	; 0xa7
 80016d0:	f7ff ff12 	bl	80014f8 <OLED_cmd>
	OLED_FLUSH(HVE);
 80016d4:	4812      	ldr	r0, [pc, #72]	; (8001720 <OLED_INIT+0xd4>)
 80016d6:	f7ff ff85 	bl	80015e4 <OLED_FLUSH>
	OLED_cmd(DISP_ON);
 80016da:	20af      	movs	r0, #175	; 0xaf
 80016dc:	f7ff ff0c 	bl	80014f8 <OLED_cmd>
	HAL_Delay(1000);
 80016e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016e4:	f002 fb30 	bl	8003d48 <HAL_Delay>
	OLED_cmd(DISP_OFF);
 80016e8:	20ae      	movs	r0, #174	; 0xae
 80016ea:	f7ff ff05 	bl	80014f8 <OLED_cmd>
	HAL_Delay(10);
 80016ee:	200a      	movs	r0, #10
 80016f0:	f002 fb2a 	bl	8003d48 <HAL_Delay>
	OLED_cmd(DISP_NORM);
 80016f4:	20a6      	movs	r0, #166	; 0xa6
 80016f6:	f7ff feff 	bl	80014f8 <OLED_cmd>
	HAL_Delay(10);
 80016fa:	200a      	movs	r0, #10
 80016fc:	f002 fb24 	bl	8003d48 <HAL_Delay>
	OLED_cmd(DISP_ON);
 8001700:	20af      	movs	r0, #175	; 0xaf
 8001702:	f7ff fef9 	bl	80014f8 <OLED_cmd>
	OLED_Clear();
 8001706:	f7ff fee2 	bl	80014ce <OLED_Clear>
	return HAL_OK;
 800170a:	2300      	movs	r3, #0

}
 800170c:	4618      	mov	r0, r3
 800170e:	3720      	adds	r7, #32
 8001710:	46bd      	mov	sp, r7
 8001712:	bdb0      	pop	{r4, r5, r7, pc}
 8001714:	40020000 	.word	0x40020000
 8001718:	40020400 	.word	0x40020400
 800171c:	080104c4 	.word	0x080104c4
 8001720:	20000000 	.word	0x20000000

08001724 <OLED_InvChar>:
 *
 * @param character: Character to invert (Must be an ASCII character)
 *
 * @param result: Pointer to array to store the 5 inverted bytes that make up the character
 * */
void OLED_InvChar(char character,uint8_t* result){
 8001724:	b480      	push	{r7}
 8001726:	b087      	sub	sp, #28
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	71fb      	strb	r3, [r7, #7]
	uint8_t temp[OLED_CHARSIZE];

	for(int i=0;i<=OLED_CHARSIZE;i++){
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	e015      	b.n	8001762 <OLED_InvChar+0x3e>
			temp[i]=~(ASCII[(uint8_t)character-ASCII_START][i]);
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	f1a3 0220 	sub.w	r2, r3, #32
 800173c:	4911      	ldr	r1, [pc, #68]	; (8001784 <OLED_InvChar+0x60>)
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	18ca      	adds	r2, r1, r3
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	4413      	add	r3, r2
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	43db      	mvns	r3, r3
 800174e:	b2d9      	uxtb	r1, r3
 8001750:	f107 020c 	add.w	r2, r7, #12
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	4413      	add	r3, r2
 8001758:	460a      	mov	r2, r1
 800175a:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<=OLED_CHARSIZE;i++){
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	3301      	adds	r3, #1
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	2b05      	cmp	r3, #5
 8001766:	dde6      	ble.n	8001736 <OLED_InvChar+0x12>
	}
	memcpy(result,temp,OLED_CHARSIZE);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	6818      	ldr	r0, [r3, #0]
 8001772:	6010      	str	r0, [r2, #0]
 8001774:	791b      	ldrb	r3, [r3, #4]
 8001776:	7113      	strb	r3, [r2, #4]
}
 8001778:	bf00      	nop
 800177a:	371c      	adds	r7, #28
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	08010818 	.word	0x08010818

08001788 <OLED_drawChar>:
 * @param character: Character to draw
 *
 * @param invert: Option to invert the character (Use INVERT to invert defined in OLED.h)
 * */

void OLED_drawChar(uint8_t page,uint8_t col, char character, uint8_t invert){
 8001788:	b590      	push	{r4, r7, lr}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	4604      	mov	r4, r0
 8001790:	4608      	mov	r0, r1
 8001792:	4611      	mov	r1, r2
 8001794:	461a      	mov	r2, r3
 8001796:	4623      	mov	r3, r4
 8001798:	71fb      	strb	r3, [r7, #7]
 800179a:	4603      	mov	r3, r0
 800179c:	71bb      	strb	r3, [r7, #6]
 800179e:	460b      	mov	r3, r1
 80017a0:	717b      	strb	r3, [r7, #5]
 80017a2:	4613      	mov	r3, r2
 80017a4:	713b      	strb	r3, [r7, #4]
	OLED_cmd(PAGE_ADDR+page);
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	3b50      	subs	r3, #80	; 0x50
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fea3 	bl	80014f8 <OLED_cmd>
	OLED_cmd(col&0x0F);
 80017b2:	79bb      	ldrb	r3, [r7, #6]
 80017b4:	f003 030f 	and.w	r3, r3, #15
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fe9c 	bl	80014f8 <OLED_cmd>
	OLED_cmd(0x10|(col>>4));
 80017c0:	79bb      	ldrb	r3, [r7, #6]
 80017c2:	091b      	lsrs	r3, r3, #4
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	f043 0310 	orr.w	r3, r3, #16
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fe93 	bl	80014f8 <OLED_cmd>
	uint8_t data[6];

	if(invert==NORMAL){
 80017d2:	793b      	ldrb	r3, [r7, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d10e      	bne.n	80017f6 <OLED_drawChar+0x6e>
		memcpy(data,ASCII[(uint8_t)character-0x20],5);
 80017d8:	797b      	ldrb	r3, [r7, #5]
 80017da:	f1a3 0220 	sub.w	r2, r3, #32
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	4a0d      	ldr	r2, [pc, #52]	; (800181c <OLED_drawChar+0x94>)
 80017e6:	1899      	adds	r1, r3, r2
 80017e8:	f107 0308 	add.w	r3, r7, #8
 80017ec:	2205      	movs	r2, #5
 80017ee:	4618      	mov	r0, r3
 80017f0:	f00e f988 	bl	800fb04 <memcpy>
 80017f4:	e006      	b.n	8001804 <OLED_drawChar+0x7c>
	}
	else{
		OLED_InvChar(character,data);
 80017f6:	f107 0208 	add.w	r2, r7, #8
 80017fa:	797b      	ldrb	r3, [r7, #5]
 80017fc:	4611      	mov	r1, r2
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff ff90 	bl	8001724 <OLED_InvChar>
	}

	data[5]=0x00;
 8001804:	2300      	movs	r3, #0
 8001806:	737b      	strb	r3, [r7, #13]
	OLED_data(data, 6);
 8001808:	f107 0308 	add.w	r3, r7, #8
 800180c:	2106      	movs	r1, #6
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff feac 	bl	800156c <OLED_data>

	}
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	bd90      	pop	{r4, r7, pc}
 800181c:	08010818 	.word	0x08010818

08001820 <OLED_Printlin>:
 * @param string: String to print (MUST BE LESS THAN 21)
 *
 * @param invert: Option to invert the entire string
 * */

void OLED_Printlin(uint8_t page,uint8_t col,char* string,uint8_t invert){
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	603a      	str	r2, [r7, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
 800182e:	460b      	mov	r3, r1
 8001830:	71bb      	strb	r3, [r7, #6]
 8001832:	4613      	mov	r3, r2
 8001834:	717b      	strb	r3, [r7, #5]
	for(int i=0;i<strlen(string);i++){
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	e014      	b.n	8001866 <OLED_Printlin+0x46>
		OLED_drawChar(page, col+(i*6), string[i],invert);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	b2db      	uxtb	r3, r3
 8001840:	461a      	mov	r2, r3
 8001842:	0052      	lsls	r2, r2, #1
 8001844:	4413      	add	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	b2da      	uxtb	r2, r3
 800184a:	79bb      	ldrb	r3, [r7, #6]
 800184c:	4413      	add	r3, r2
 800184e:	b2d9      	uxtb	r1, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	4413      	add	r3, r2
 8001856:	781a      	ldrb	r2, [r3, #0]
 8001858:	797b      	ldrb	r3, [r7, #5]
 800185a:	79f8      	ldrb	r0, [r7, #7]
 800185c:	f7ff ff94 	bl	8001788 <OLED_drawChar>
	for(int i=0;i<strlen(string);i++){
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3301      	adds	r3, #1
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	6838      	ldr	r0, [r7, #0]
 8001868:	f7fe fcba 	bl	80001e0 <strlen>
 800186c:	4602      	mov	r2, r0
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	429a      	cmp	r2, r3
 8001872:	d8e3      	bhi.n	800183c <OLED_Printlin+0x1c>
	}
}
 8001874:	bf00      	nop
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <OLED_PrintCent>:
 * @param string: String to print
 *
 * @param invert: Option to invert text
 * */

void OLED_PrintCent(uint8_t page, char* string, uint8_t invert){
 800187e:	b580      	push	{r7, lr}
 8001880:	b084      	sub	sp, #16
 8001882:	af00      	add	r7, sp, #0
 8001884:	4603      	mov	r3, r0
 8001886:	6039      	str	r1, [r7, #0]
 8001888:	71fb      	strb	r3, [r7, #7]
 800188a:	4613      	mov	r3, r2
 800188c:	71bb      	strb	r3, [r7, #6]
	int len=strlen(string);
 800188e:	6838      	ldr	r0, [r7, #0]
 8001890:	f7fe fca6 	bl	80001e0 <strlen>
 8001894:	4603      	mov	r3, r0
 8001896:	60fb      	str	r3, [r7, #12]

	int start_col=(MID_COL)-((len/2)*6);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	0fda      	lsrs	r2, r3, #31
 800189c:	4413      	add	r3, r2
 800189e:	105b      	asrs	r3, r3, #1
 80018a0:	425b      	negs	r3, r3
 80018a2:	461a      	mov	r2, r3
 80018a4:	4613      	mov	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	4413      	add	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	3340      	adds	r3, #64	; 0x40
 80018ae:	60bb      	str	r3, [r7, #8]

	OLED_Printlin(page, start_col, string, invert);
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	b2d9      	uxtb	r1, r3
 80018b4:	79bb      	ldrb	r3, [r7, #6]
 80018b6:	79f8      	ldrb	r0, [r7, #7]
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	f7ff ffb1 	bl	8001820 <OLED_Printlin>
}
 80018be:	bf00      	nop
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <OLED_Print>:
/*General purpose print function with wrap around ability. (Can take string of abitrary size and fit onto display)
 *
 * @param string: String to print (This can be longer than the max 21 character per line this function will chop it up)
 * */

void OLED_Print(char* string){
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b094      	sub	sp, #80	; 0x50
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
	char fill = ' ';
 80018ce:	2320      	movs	r3, #32
 80018d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	int i=0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	64fb      	str	r3, [r7, #76]	; 0x4c
	int last_ind=0;
 80018d8:	2300      	movs	r3, #0
 80018da:	64bb      	str	r3, [r7, #72]	; 0x48
	int line=0;
 80018dc:	2300      	movs	r3, #0
 80018de:	647b      	str	r3, [r7, #68]	; 0x44
	int linend=0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	63bb      	str	r3, [r7, #56]	; 0x38
	    while(1){

	        char thisline[22];
	        char whitespaces[20];

	        for(int charac=0;charac<22;charac++){
 80018e4:	2300      	movs	r3, #0
 80018e6:	643b      	str	r3, [r7, #64]	; 0x40
 80018e8:	e018      	b.n	800191c <OLED_Print+0x56>
	            if(string[last_ind+charac]==' '){
 80018ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80018ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018ee:	4413      	add	r3, r2
 80018f0:	461a      	mov	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b20      	cmp	r3, #32
 80018fa:	d10b      	bne.n	8001914 <OLED_Print+0x4e>
	                whitespaces[i]=charac; //keep track of our whitespaces
 80018fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018fe:	b2d9      	uxtb	r1, r3
 8001900:	f107 020c 	add.w	r2, r7, #12
 8001904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001906:	4413      	add	r3, r2
 8001908:	460a      	mov	r2, r1
 800190a:	701a      	strb	r2, [r3, #0]
	                i++;
 800190c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800190e:	3301      	adds	r3, #1
 8001910:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001912:	e000      	b.n	8001916 <OLED_Print+0x50>
	            }
	            else{
	                continue;
 8001914:	bf00      	nop
	        for(int charac=0;charac<22;charac++){
 8001916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001918:	3301      	adds	r3, #1
 800191a:	643b      	str	r3, [r7, #64]	; 0x40
 800191c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800191e:	2b15      	cmp	r3, #21
 8001920:	dde3      	ble.n	80018ea <OLED_Print+0x24>
	            }


	        }

	        if(string[last_ind]==' '){
 8001922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	4413      	add	r3, r2
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b20      	cmp	r3, #32
 800192c:	d102      	bne.n	8001934 <OLED_Print+0x6e>
	            last_ind++;
 800192e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001930:	3301      	adds	r3, #1
 8001932:	64bb      	str	r3, [r7, #72]	; 0x48

	        else{

	        }

	        if(strlen(string+last_ind)<22){ //special routine for end of line (since string[last_ind+20] may not exist)
 8001934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	4618      	mov	r0, r3
 800193c:	f7fe fc50 	bl	80001e0 <strlen>
 8001940:	4603      	mov	r3, r0
 8001942:	2b15      	cmp	r3, #21
 8001944:	d828      	bhi.n	8001998 <OLED_Print+0xd2>
	            linend=strlen(string+last_ind);
 8001946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	4413      	add	r3, r2
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fc47 	bl	80001e0 <strlen>
 8001952:	4603      	mov	r3, r0
 8001954:	63bb      	str	r3, [r7, #56]	; 0x38
	            strncpy(thisline,string+last_ind,linend); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 8001956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	18d1      	adds	r1, r2, r3
 800195c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800195e:	f107 0320 	add.w	r3, r7, #32
 8001962:	4618      	mov	r0, r3
 8001964:	f00e f9fc 	bl	800fd60 <strncpy>
	            memset(thisline+linend,fill,21-linend);
 8001968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800196a:	f107 0220 	add.w	r2, r7, #32
 800196e:	18d0      	adds	r0, r2, r3
 8001970:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001976:	f1c3 0315 	rsb	r3, r3, #21
 800197a:	461a      	mov	r2, r3
 800197c:	f00e f8d0 	bl	800fb20 <memset>
	            thisline[21]=' ';
 8001980:	2320      	movs	r3, #32
 8001982:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            OLED_Printlin(line, 0x02,thisline,NORMAL);
 8001986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001988:	b2d8      	uxtb	r0, r3
 800198a:	f107 0220 	add.w	r2, r7, #32
 800198e:	2300      	movs	r3, #0
 8001990:	2102      	movs	r1, #2
 8001992:	f7ff ff45 	bl	8001820 <OLED_Printlin>




	    }
}
 8001996:	e05e      	b.n	8001a56 <OLED_Print+0x190>
	        if((string[(last_ind)+20]!=' ') && (string[(last_ind)+21]!=' ')){
 8001998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800199a:	3314      	adds	r3, #20
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	4413      	add	r3, r2
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b20      	cmp	r3, #32
 80019a4:	d03a      	beq.n	8001a1c <OLED_Print+0x156>
 80019a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019a8:	3315      	adds	r3, #21
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b20      	cmp	r3, #32
 80019b2:	d033      	beq.n	8001a1c <OLED_Print+0x156>
	            strncpy(thisline,string+last_ind,whitespaces[i-1]); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 80019b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	18d1      	adds	r1, r2, r3
 80019ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019bc:	3b01      	subs	r3, #1
 80019be:	3350      	adds	r3, #80	; 0x50
 80019c0:	443b      	add	r3, r7
 80019c2:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80019c6:	461a      	mov	r2, r3
 80019c8:	f107 0320 	add.w	r3, r7, #32
 80019cc:	4618      	mov	r0, r3
 80019ce:	f00e f9c7 	bl	800fd60 <strncpy>
	            memset(thisline+whitespaces[i-1],fill,21-whitespaces[i-1]);
 80019d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019d4:	3b01      	subs	r3, #1
 80019d6:	3350      	adds	r3, #80	; 0x50
 80019d8:	443b      	add	r3, r7
 80019da:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80019de:	461a      	mov	r2, r3
 80019e0:	f107 0320 	add.w	r3, r7, #32
 80019e4:	1898      	adds	r0, r3, r2
 80019e6:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80019ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019ec:	3b01      	subs	r3, #1
 80019ee:	3350      	adds	r3, #80	; 0x50
 80019f0:	443b      	add	r3, r7
 80019f2:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80019f6:	f1c3 0315 	rsb	r3, r3, #21
 80019fa:	461a      	mov	r2, r3
 80019fc:	f00e f890 	bl	800fb20 <memset>
	            thisline[21]=' ';
 8001a00:	2320      	movs	r3, #32
 8001a02:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+whitespaces[i-1];
 8001a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	3350      	adds	r3, #80	; 0x50
 8001a0c:	443b      	add	r3, r7
 8001a0e:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001a12:	461a      	mov	r2, r3
 8001a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a16:	4413      	add	r3, r2
 8001a18:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a1a:	e00e      	b.n	8001a3a <OLED_Print+0x174>
	            strncpy(thisline,string+last_ind,21);
 8001a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	18d1      	adds	r1, r2, r3
 8001a22:	f107 0320 	add.w	r3, r7, #32
 8001a26:	2215      	movs	r2, #21
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f00e f999 	bl	800fd60 <strncpy>
	            thisline[21]=' ';
 8001a2e:	2320      	movs	r3, #32
 8001a30:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+21;
 8001a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a36:	3315      	adds	r3, #21
 8001a38:	64bb      	str	r3, [r7, #72]	; 0x48
	        i=0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
	        OLED_Printlin(line, 0x02, thisline,NORMAL);
 8001a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a40:	b2d8      	uxtb	r0, r3
 8001a42:	f107 0220 	add.w	r2, r7, #32
 8001a46:	2300      	movs	r3, #0
 8001a48:	2102      	movs	r1, #2
 8001a4a:	f7ff fee9 	bl	8001820 <OLED_Printlin>
	        line++;
 8001a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a50:	3301      	adds	r3, #1
 8001a52:	647b      	str	r3, [r7, #68]	; 0x44
	    while(1){
 8001a54:	e746      	b.n	80018e4 <OLED_Print+0x1e>
}
 8001a56:	3750      	adds	r7, #80	; 0x50
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <OLED_SCREEN>:
 * @param screen: Screen to display
 *
 * @param invert: Option to invert entire screen
 * */

void OLED_SCREEN(const Screen* screen,uint8_t invert){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	70fb      	strb	r3, [r7, #3]
	OLED_Clear();
 8001a68:	f7ff fd31 	bl	80014ce <OLED_Clear>
	OLED_PrintCent(0, (char*)screen->data[0], invert);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	78fa      	ldrb	r2, [r7, #3]
 8001a74:	4619      	mov	r1, r3
 8001a76:	2000      	movs	r0, #0
 8001a78:	f7ff ff01 	bl	800187e <OLED_PrintCent>

	for(int i=0;i<screen->datsize-1;i++){
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	e01a      	b.n	8001ab8 <OLED_SCREEN+0x5c>
		OLED_Printlin((uint8_t)screen->dataloc[i+1][0],(uint8_t) screen->dataloc[i+1][1],(char*) screen->data[i+1], invert);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	7818      	ldrb	r0, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	3301      	adds	r3, #1
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	4413      	add	r3, r2
 8001a9c:	7859      	ldrb	r1, [r3, #1]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	78fb      	ldrb	r3, [r7, #3]
 8001aae:	f7ff feb7 	bl	8001820 <OLED_Printlin>
	for(int i=0;i<screen->datsize-1;i++){
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	3b01      	subs	r3, #1
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	dbde      	blt.n	8001a82 <OLED_SCREEN+0x26>
	}
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <OLED_SCRNREF>:
 * @param dataindx: Index of screen->data to modify
 *
 * @param data: Data to add to the screen
 * */

void OLED_SCRNREF(const Screen* screen,uint8_t dataindx,char* data){
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b086      	sub	sp, #24
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	60f8      	str	r0, [r7, #12]
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	607a      	str	r2, [r7, #4]
 8001ada:	72fb      	strb	r3, [r7, #11]
	int len=strlen(screen->data[dataindx]);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	7afb      	ldrb	r3, [r7, #11]
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fb79 	bl	80001e0 <strlen>
 8001aee:	4603      	mov	r3, r0
 8001af0:	617b      	str	r3, [r7, #20]
	int start_col=screen->dataloc[dataindx][1]+((len)*6);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	68da      	ldr	r2, [r3, #12]
 8001af6:	7afb      	ldrb	r3, [r7, #11]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	4413      	add	r3, r2
 8001afc:	785b      	ldrb	r3, [r3, #1]
 8001afe:	4619      	mov	r1, r3
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	4613      	mov	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	4413      	add	r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	440b      	add	r3, r1
 8001b0c:	613b      	str	r3, [r7, #16]

	OLED_Printlin(screen->dataloc[dataindx][0], start_col, data, NORMAL);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	7afb      	ldrb	r3, [r7, #11]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	4413      	add	r3, r2
 8001b18:	7818      	ldrb	r0, [r3, #0]
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	b2d9      	uxtb	r1, r3
 8001b1e:	2300      	movs	r3, #0
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	f7ff fe7d 	bl	8001820 <OLED_Printlin>
}
 8001b26:	bf00      	nop
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <OLED_SELECT>:
 * @param page: Row to place arrow
 *
 * @param col: Column to place arrow
 * */

void OLED_SELECT(const Screen* screen,uint8_t selopt, int restore){
 8001b30:	b590      	push	{r4, r7, lr}
 8001b32:	b089      	sub	sp, #36	; 0x24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	72fb      	strb	r3, [r7, #11]

	char arrow[]="->";
 8001b3e:	4a35      	ldr	r2, [pc, #212]	; (8001c14 <OLED_SELECT+0xe4>)
 8001b40:	f107 0310 	add.w	r3, r7, #16
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	4611      	mov	r1, r2
 8001b48:	8019      	strh	r1, [r3, #0]
 8001b4a:	3302      	adds	r3, #2
 8001b4c:	0c12      	lsrs	r2, r2, #16
 8001b4e:	701a      	strb	r2, [r3, #0]

	uint8_t prevpage,prevcol,thispage,thiscol,index;
	char* rest;

	    if(selopt == 0){
 8001b50:	7afb      	ldrb	r3, [r7, #11]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d105      	bne.n	8001b62 <OLED_SELECT+0x32>
	    	index = screen->selsize - 1;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	77fb      	strb	r3, [r7, #31]
 8001b60:	e002      	b.n	8001b68 <OLED_SELECT+0x38>
	    }
		else{
			index = selopt - 1;
 8001b62:	7afb      	ldrb	r3, [r7, #11]
 8001b64:	3b01      	subs	r3, #1
 8001b66:	77fb      	strb	r3, [r7, #31]
	    }

	    prevpage=screen->seldata[index][0];
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	691a      	ldr	r2, [r3, #16]
 8001b6c:	7ffb      	ldrb	r3, [r7, #31]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	4413      	add	r3, r2
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	75fb      	strb	r3, [r7, #23]
	    prevcol=screen->seldata[index][1];
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	691a      	ldr	r2, [r3, #16]
 8001b7a:	7ffb      	ldrb	r3, [r7, #31]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4413      	add	r3, r2
 8001b80:	785b      	ldrb	r3, [r3, #1]
 8001b82:	75bb      	strb	r3, [r7, #22]
	    thispage=screen->seldata[selopt][0];
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	7afb      	ldrb	r3, [r7, #11]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	4413      	add	r3, r2
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	757b      	strb	r3, [r7, #21]
	    thiscol=screen->seldata[selopt][1];
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	691a      	ldr	r2, [r3, #16]
 8001b96:	7afb      	ldrb	r3, [r7, #11]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	785b      	ldrb	r3, [r3, #1]
 8001b9e:	753b      	strb	r3, [r7, #20]

	    if(restore == OLED_RESTORE){
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d122      	bne.n	8001bec <OLED_SELECT+0xbc>
	    	if (selopt == 0) {
 8001ba6:	7afb      	ldrb	r3, [r7, #11]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d110      	bne.n	8001bce <OLED_SELECT+0x9e>
	    		rest=(char*)screen->data[find_restore_string(screen, screen->selsize - 1)]; //Here we may be wrapping around so we must restore the last select option
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	689c      	ldr	r4, [r3, #8]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	4619      	mov	r1, r3
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	f000 f8ab 	bl	8001d18 <find_restore_string>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4423      	add	r3, r4
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	61bb      	str	r3, [r7, #24]
 8001bcc:	e010      	b.n	8001bf0 <OLED_SELECT+0xc0>
	    	} else {
	    		rest=(char*)screen->data[find_restore_string(screen, selopt - 1)];
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	689c      	ldr	r4, [r3, #8]
 8001bd2:	7afb      	ldrb	r3, [r7, #11]
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	4619      	mov	r1, r3
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f000 f89c 	bl	8001d18 <find_restore_string>
 8001be0:	4603      	mov	r3, r0
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4423      	add	r3, r4
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	61bb      	str	r3, [r7, #24]
 8001bea:	e001      	b.n	8001bf0 <OLED_SELECT+0xc0>
	    	}
	    } else {
	    	rest = "  ";
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <OLED_SELECT+0xe8>)
 8001bee:	61bb      	str	r3, [r7, #24]
	    }

	    OLED_Printlin(prevpage, prevcol, rest, NORMAL); //This restores the line of the previous (now deselected) select option
 8001bf0:	7db9      	ldrb	r1, [r7, #22]
 8001bf2:	7df8      	ldrb	r0, [r7, #23]
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	f7ff fe12 	bl	8001820 <OLED_Printlin>
	    OLED_Printlin(thispage, thiscol, arrow, NORMAL);
 8001bfc:	f107 0210 	add.w	r2, r7, #16
 8001c00:	7d39      	ldrb	r1, [r7, #20]
 8001c02:	7d78      	ldrb	r0, [r7, #21]
 8001c04:	2300      	movs	r3, #0
 8001c06:	f7ff fe0b 	bl	8001820 <OLED_Printlin>

}
 8001c0a:	bf00      	nop
 8001c0c:	3724      	adds	r7, #36	; 0x24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd90      	pop	{r4, r7, pc}
 8001c12:	bf00      	nop
 8001c14:	080104e4 	.word	0x080104e4
 8001c18:	080104e0 	.word	0x080104e0

08001c1c <OLED_display_files>:
 * Display filenames to OLED display (used in show files task)
 *
 * @param page - Page of files to display (page count is increased as user scrolls through files)
 * @return HAL_OK if files were successfully displayed
 * */
HAL_StatusTypeDef OLED_display_files(const Screen* screen, uint8_t page) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	; 0x28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	70fb      	strb	r3, [r7, #3]
	if (get_number_files() == 0) {
 8001c28:	f001 fcae 	bl	8003588 <get_number_files>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <OLED_display_files+0x1a>
		return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e04c      	b.n	8001cd0 <OLED_display_files+0xb4>
	}
	uint16_t file_count = get_number_files();
 8001c36:	f001 fca7 	bl	8003588 <get_number_files>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	847b      	strh	r3, [r7, #34]	; 0x22

	char** file_names = malloc(file_count * sizeof(char*));
 8001c3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4618      	mov	r0, r3
 8001c44:	f00d ff4e 	bl	800fae4 <malloc>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	61fb      	str	r3, [r7, #28]
	char used[5];
	char free[5];

	get_free_size_str(free);
 8001c4c:	f107 030c 	add.w	r3, r7, #12
 8001c50:	4618      	mov	r0, r3
 8001c52:	f001 fda5 	bl	80037a0 <get_free_size_str>
	get_used_size_str(used);
 8001c56:	f107 0314 	add.w	r3, r7, #20
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f001 fd8e 	bl	800377c <get_used_size_str>

	OLED_SCRNREF(&SCRN_ShowFiles, 4, free);
 8001c60:	f107 030c 	add.w	r3, r7, #12
 8001c64:	461a      	mov	r2, r3
 8001c66:	2104      	movs	r1, #4
 8001c68:	481b      	ldr	r0, [pc, #108]	; (8001cd8 <OLED_display_files+0xbc>)
 8001c6a:	f7ff ff30 	bl	8001ace <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_ShowFiles, 5, used);
 8001c6e:	f107 0314 	add.w	r3, r7, #20
 8001c72:	461a      	mov	r2, r3
 8001c74:	2105      	movs	r1, #5
 8001c76:	4818      	ldr	r0, [pc, #96]	; (8001cd8 <OLED_display_files+0xbc>)
 8001c78:	f7ff ff29 	bl	8001ace <OLED_SCRNREF>

	if (get_all_files(file_names) != RFS_OK) {
 8001c7c:	69f8      	ldr	r0, [r7, #28]
 8001c7e:	f001 fca4 	bl	80035ca <get_all_files>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d006      	beq.n	8001c96 <OLED_display_files+0x7a>
		free_filenames(file_names, file_count);
 8001c88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	69f8      	ldr	r0, [r7, #28]
 8001c8e:	f000 f825 	bl	8001cdc <free_filenames>
		return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e01c      	b.n	8001cd0 <OLED_display_files+0xb4>
	}

	for (int i = 0; i < file_count; i++) {
 8001c96:	2300      	movs	r3, #0
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
 8001c9a:	e00f      	b.n	8001cbc <OLED_display_files+0xa0>
		OLED_SCRNREF(&SCRN_ShowFiles, i + 1, file_names[i]);
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	b2d9      	uxtb	r1, r3
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	69fa      	ldr	r2, [r7, #28]
 8001caa:	4413      	add	r3, r2
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4809      	ldr	r0, [pc, #36]	; (8001cd8 <OLED_display_files+0xbc>)
 8001cb2:	f7ff ff0c 	bl	8001ace <OLED_SCRNREF>
	for (int i = 0; i < file_count; i++) {
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	3301      	adds	r3, #1
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
 8001cbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	dbeb      	blt.n	8001c9c <OLED_display_files+0x80>
	}

	free_filenames(file_names, file_count);
 8001cc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	69f8      	ldr	r0, [r7, #28]
 8001cca:	f000 f807 	bl	8001cdc <free_filenames>
	return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3728      	adds	r7, #40	; 0x28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	08010c28 	.word	0x08010c28

08001cdc <free_filenames>:
/**
 * Free list of file names
 * @param file_names - File names
 * @param size -  Number of file names
 * */
void free_filenames(char** file_names, int size) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < size; i++) {
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	e00a      	b.n	8001d02 <free_filenames+0x26>
		free(file_names[i]);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f00d fefc 	bl	800faf4 <free>
	for (int i = 0; i < size; i++) {
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	dbf0      	blt.n	8001cec <free_filenames+0x10>
	}
	free(file_names);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f00d fef2 	bl	800faf4 <free>
}
 8001d10:	bf00      	nop
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <find_restore_string>:
 *
 * @param screen - Screen to update
 * @param prev_sel_opt - Previous selected option
 * @return index of string in screen->data to be used as replacement
 * */
uint8_t find_restore_string(const Screen* screen, uint8_t prev_sel_opt) {
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	70fb      	strb	r3, [r7, #3]
	uint8_t index_of_string;

	for (int i = 1; i < screen->datsize; i++) {
 8001d24:	2301      	movs	r3, #1
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	e021      	b.n	8001d6e <find_restore_string+0x56>
		if((screen->dataloc[i][0] == screen->seldata[prev_sel_opt][0]) && (screen->dataloc[i][1] == screen->seldata[prev_sel_opt][1])) {
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	4413      	add	r3, r2
 8001d34:	781a      	ldrb	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6919      	ldr	r1, [r3, #16]
 8001d3a:	78fb      	ldrb	r3, [r7, #3]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	440b      	add	r3, r1
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d110      	bne.n	8001d68 <find_restore_string+0x50>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68da      	ldr	r2, [r3, #12]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4413      	add	r3, r2
 8001d50:	785a      	ldrb	r2, [r3, #1]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6919      	ldr	r1, [r3, #16]
 8001d56:	78fb      	ldrb	r3, [r7, #3]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	440b      	add	r3, r1
 8001d5c:	785b      	ldrb	r3, [r3, #1]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d102      	bne.n	8001d68 <find_restore_string+0x50>
			index_of_string = i;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	73fb      	strb	r3, [r7, #15]
			break;
 8001d66:	e007      	b.n	8001d78 <find_restore_string+0x60>
	for (int i = 1; i < screen->datsize; i++) {
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	dbd8      	blt.n	8001d2a <find_restore_string+0x12>
		}
	}

	return index_of_string;
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <oled_show_file>:

/**
 * Show the file data of given file entry number
 * @param entry - Entry to show data of
 * */
void oled_show_file(uint16_t entry) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	80fb      	strh	r3, [r7, #6]
	Card* work;

	if (entry_present(entry) != RFS_OK) {
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f001 fc6e 	bl	8003676 <entry_present>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d12d      	bne.n	8001dfc <oled_show_file+0x74>
		return; //No card entry present
	}

	work = read_card_entry(entry);
 8001da0:	88fb      	ldrh	r3, [r7, #6]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f001 fa97 	bl	80032d6 <read_card_entry>
 8001da8:	60f8      	str	r0, [r7, #12]

	OLED_SCREEN(&SCRN_FileData, NORMAL);
 8001daa:	2100      	movs	r1, #0
 8001dac:	4815      	ldr	r0, [pc, #84]	; (8001e04 <oled_show_file+0x7c>)
 8001dae:	f7ff fe55 	bl	8001a5c <OLED_SCREEN>
	OLED_SCRNREF(&SCRN_FileData, 0, work->name);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	461a      	mov	r2, r3
 8001db8:	2100      	movs	r1, #0
 8001dba:	4812      	ldr	r0, [pc, #72]	; (8001e04 <oled_show_file+0x7c>)
 8001dbc:	f7ff fe87 	bl	8001ace <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_FileData, SHOWFILE_TYPE_LOC, work->type);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	480e      	ldr	r0, [pc, #56]	; (8001e04 <oled_show_file+0x7c>)
 8001dca:	f7ff fe80 	bl	8001ace <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_FileData, SHOWFILE_UID_LOC, uid_tostring(work->uid, work->uidsize));
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	791b      	ldrb	r3, [r3, #4]
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4610      	mov	r0, r2
 8001dda:	f7ff fad9 	bl	8001390 <uid_tostring>
 8001dde:	4603      	mov	r3, r0
 8001de0:	461a      	mov	r2, r3
 8001de2:	2102      	movs	r1, #2
 8001de4:	4807      	ldr	r0, [pc, #28]	; (8001e04 <oled_show_file+0x7c>)
 8001de6:	f7ff fe72 	bl	8001ace <OLED_SCRNREF>
	OLED_SELECT(&SCRN_FileData, 0, OLED_NORESTORE);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2100      	movs	r1, #0
 8001dee:	4805      	ldr	r0, [pc, #20]	; (8001e04 <oled_show_file+0x7c>)
 8001df0:	f7ff fe9e 	bl	8001b30 <OLED_SELECT>

	free(work);
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f00d fe7d 	bl	800faf4 <free>
 8001dfa:	e000      	b.n	8001dfe <oled_show_file+0x76>
		return; //No card entry present
 8001dfc:	bf00      	nop
}
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	08010c3c 	.word	0x08010c3c

08001e08 <oled_move_selection>:
 * Move selection arrow for given screen
 * @param screen - Screen to be modified
 * @param arrow_index - Pointer to variable which keeps track of arrow index
 * @param restore - Option to restore previous text or not
 * */
void oled_move_selection(const Screen* screen, uint8_t* arrow_index, uint8_t restore) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	4613      	mov	r3, r2
 8001e14:	71fb      	strb	r3, [r7, #7]
	uint8_t max_index = screen->selsize;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	75fb      	strb	r3, [r7, #23]

	if (*arrow_index >= max_index - 1) {
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	7dfb      	ldrb	r3, [r7, #23]
 8001e24:	3b01      	subs	r3, #1
 8001e26:	429a      	cmp	r2, r3
 8001e28:	db03      	blt.n	8001e32 <oled_move_selection+0x2a>
		*arrow_index = 0;
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	701a      	strb	r2, [r3, #0]
 8001e30:	e005      	b.n	8001e3e <oled_move_selection+0x36>
	} else {
		*arrow_index += 1;
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	3301      	adds	r3, #1
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	701a      	strb	r2, [r3, #0]

	}
	OLED_SELECT(screen, *arrow_index, restore);
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	79fa      	ldrb	r2, [r7, #7]
 8001e44:	4619      	mov	r1, r3
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f7ff fe72 	bl	8001b30 <OLED_SELECT>
}
 8001e4c:	bf00      	nop
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <STAT_READ>:
 * Function to read one of three status registers. Registers in order are (Protection, config and status)
 *
 * @param addr: Address of status register we wish to read from
 * */

uint8_t STAT_READ(uint8_t addr){
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af02      	add	r7, sp, #8
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	71fb      	strb	r3, [r7, #7]
	uint8_t transaction[]={READ_STAT, addr, DUMMY};
 8001e5e:	230f      	movs	r3, #15
 8001e60:	733b      	strb	r3, [r7, #12]
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	737b      	strb	r3, [r7, #13]
 8001e66:	2300      	movs	r3, #0
 8001e68:	73bb      	strb	r3, [r7, #14]
	uint8_t rec[3];
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e70:	480d      	ldr	r0, [pc, #52]	; (8001ea8 <STAT_READ+0x54>)
 8001e72:	f002 fa0b 	bl	800428c <HAL_GPIO_WritePin>
	while(HAL_SPI_TransmitReceive(&hspi2, transaction,rec, 3, 100)!=HAL_OK);
 8001e76:	bf00      	nop
 8001e78:	f107 0208 	add.w	r2, r7, #8
 8001e7c:	f107 010c 	add.w	r1, r7, #12
 8001e80:	2364      	movs	r3, #100	; 0x64
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	2303      	movs	r3, #3
 8001e86:	4809      	ldr	r0, [pc, #36]	; (8001eac <STAT_READ+0x58>)
 8001e88:	f005 fae7 	bl	800745a <HAL_SPI_TransmitReceive>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f2      	bne.n	8001e78 <STAT_READ+0x24>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001e92:	2201      	movs	r2, #1
 8001e94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e98:	4803      	ldr	r0, [pc, #12]	; (8001ea8 <STAT_READ+0x54>)
 8001e9a:	f002 f9f7 	bl	800428c <HAL_GPIO_WritePin>
	return(rec[2]); //Status register value
 8001e9e:	7abb      	ldrb	r3, [r7, #10]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40020000 	.word	0x40020000
 8001eac:	20000754 	.word	0x20000754

08001eb0 <STAT_WRITE>:
 * @param addr: Address of status register
 *
 * @param value: Value to write to register
 * */

HAL_StatusTypeDef STAT_WRITE(uint8_t addr,uint8_t value){
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	460a      	mov	r2, r1
 8001eba:	71fb      	strb	r3, [r7, #7]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	71bb      	strb	r3, [r7, #6]
	uint8_t transaction[]={WRIT_STAT,addr,value};
 8001ec0:	231f      	movs	r3, #31
 8001ec2:	733b      	strb	r3, [r7, #12]
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	737b      	strb	r3, [r7, #13]
 8001ec8:	79bb      	ldrb	r3, [r7, #6]
 8001eca:	73bb      	strb	r3, [r7, #14]
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ed2:	480a      	ldr	r0, [pc, #40]	; (8001efc <STAT_WRITE+0x4c>)
 8001ed4:	f002 f9da 	bl	800428c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, transaction, 3, 100);
 8001ed8:	f107 010c 	add.w	r1, r7, #12
 8001edc:	2364      	movs	r3, #100	; 0x64
 8001ede:	2203      	movs	r2, #3
 8001ee0:	4807      	ldr	r0, [pc, #28]	; (8001f00 <STAT_WRITE+0x50>)
 8001ee2:	f005 f97e 	bl	80071e2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eec:	4803      	ldr	r0, [pc, #12]	; (8001efc <STAT_WRITE+0x4c>)
 8001eee:	f002 f9cd 	bl	800428c <HAL_GPIO_WritePin>

	return(HAL_OK);
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40020000 	.word	0x40020000
 8001f00:	20000754 	.word	0x20000754

08001f04 <WRIT_EN>:
 * 		Bad block manage
 *
 * The Write Enable bit in status register 3 will be reset to 0 after any of these instructions
 * */

void WRIT_EN(void){
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
	uint8_t write_en=W_EN;
 8001f0a:	2306      	movs	r3, #6
 8001f0c:	71fb      	strb	r3, [r7, #7]
	WRITE_DIS();
 8001f0e:	f000 f825 	bl	8001f5c <WRITE_DIS>

	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 8001f12:	e011      	b.n	8001f38 <WRIT_EN+0x34>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001f14:	2200      	movs	r2, #0
 8001f16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f1a:	480e      	ldr	r0, [pc, #56]	; (8001f54 <WRIT_EN+0x50>)
 8001f1c:	f002 f9b6 	bl	800428c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &write_en, 1, 100);
 8001f20:	1df9      	adds	r1, r7, #7
 8001f22:	2364      	movs	r3, #100	; 0x64
 8001f24:	2201      	movs	r2, #1
 8001f26:	480c      	ldr	r0, [pc, #48]	; (8001f58 <WRIT_EN+0x54>)
 8001f28:	f005 f95b 	bl	80071e2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f32:	4808      	ldr	r0, [pc, #32]	; (8001f54 <WRIT_EN+0x50>)
 8001f34:	f002 f9aa 	bl	800428c <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 8001f38:	20c0      	movs	r0, #192	; 0xc0
 8001f3a:	f7ff ff8b 	bl	8001e54 <STAT_READ>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d1e5      	bne.n	8001f14 <WRIT_EN+0x10>
	}


}
 8001f48:	bf00      	nop
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40020000 	.word	0x40020000
 8001f58:	20000754 	.word	0x20000754

08001f5c <WRITE_DIS>:

/**
 * Disable write permissions (Sets WEL bit in STAT_REG3 to 0)
 * */
void WRITE_DIS(void) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
	uint8_t write_dis = W_DIS;
 8001f62:	2304      	movs	r3, #4
 8001f64:	71fb      	strb	r3, [r7, #7]

	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 8001f66:	e011      	b.n	8001f8c <WRITE_DIS+0x30>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f6e:	480e      	ldr	r0, [pc, #56]	; (8001fa8 <WRITE_DIS+0x4c>)
 8001f70:	f002 f98c 	bl	800428c <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, &write_dis, 1, 100);
 8001f74:	1df9      	adds	r1, r7, #7
 8001f76:	2364      	movs	r3, #100	; 0x64
 8001f78:	2201      	movs	r2, #1
 8001f7a:	480c      	ldr	r0, [pc, #48]	; (8001fac <WRITE_DIS+0x50>)
 8001f7c:	f005 f931 	bl	80071e2 <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001f80:	2201      	movs	r2, #1
 8001f82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f86:	4808      	ldr	r0, [pc, #32]	; (8001fa8 <WRITE_DIS+0x4c>)
 8001f88:	f002 f980 	bl	800428c <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 8001f8c:	20c0      	movs	r0, #192	; 0xc0
 8001f8e:	f7ff ff61 	bl	8001e54 <STAT_READ>
 8001f92:	4603      	mov	r3, r0
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d0e5      	beq.n	8001f68 <WRITE_DIS+0xc>
		}
}
 8001f9c:	bf00      	nop
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40020000 	.word	0x40020000
 8001fac:	20000754 	.word	0x20000754

08001fb0 <block_erase>:
/**
 * Erase a 128kB (64 pages) block to 0xFF
 *
 * @param block_num - Block number to erase
 * */
void block_erase(uint16_t block_num) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	80fb      	strh	r3, [r7, #6]
	uint16_t page_addr = block_num * BLOCK_PAGECOUNT;
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	019b      	lsls	r3, r3, #6
 8001fbe:	81fb      	strh	r3, [r7, #14]
	uint8_t transaction [] = {BLOCK_ERS, DUMMY, page_addr>>8, page_addr};
 8001fc0:	23d8      	movs	r3, #216	; 0xd8
 8001fc2:	723b      	strb	r3, [r7, #8]
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	727b      	strb	r3, [r7, #9]
 8001fc8:	89fb      	ldrh	r3, [r7, #14]
 8001fca:	0a1b      	lsrs	r3, r3, #8
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	72bb      	strb	r3, [r7, #10]
 8001fd2:	89fb      	ldrh	r3, [r7, #14]
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	72fb      	strb	r3, [r7, #11]
	WRIT_EN();
 8001fd8:	f7ff ff94 	bl	8001f04 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fe2:	480f      	ldr	r0, [pc, #60]	; (8002020 <block_erase+0x70>)
 8001fe4:	f002 f952 	bl	800428c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, transaction, sizeof(transaction)/sizeof(transaction[0]), 100);
 8001fe8:	f107 0108 	add.w	r1, r7, #8
 8001fec:	2364      	movs	r3, #100	; 0x64
 8001fee:	2204      	movs	r2, #4
 8001ff0:	480c      	ldr	r0, [pc, #48]	; (8002024 <block_erase+0x74>)
 8001ff2:	f005 f8f6 	bl	80071e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ffc:	4808      	ldr	r0, [pc, #32]	; (8002020 <block_erase+0x70>)
 8001ffe:	f002 f945 	bl	800428c <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 8002002:	bf00      	nop
 8002004:	20c0      	movs	r0, #192	; 0xc0
 8002006:	f7ff ff25 	bl	8001e54 <STAT_READ>
 800200a:	4603      	mov	r3, r0
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b01      	cmp	r3, #1
 8002012:	d0f7      	beq.n	8002004 <block_erase+0x54>
}
 8002014:	bf00      	nop
 8002016:	bf00      	nop
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40020000 	.word	0x40020000
 8002024:	20000754 	.word	0x20000754

08002028 <MEM_INIT>:
 * All we are doing here is removing write protection from entire array by setting BP bits
 * in status register 1 to zero
 *
 * */

HAL_StatusTypeDef MEM_INIT(void){
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800202c:	2201      	movs	r2, #1
 800202e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002032:	480a      	ldr	r0, [pc, #40]	; (800205c <MEM_INIT+0x34>)
 8002034:	f002 f92a 	bl	800428c <HAL_GPIO_WritePin>

	STAT_WRITE(STAT_REG1, 0x00); //remove protection of entire memory array
 8002038:	2100      	movs	r1, #0
 800203a:	20a0      	movs	r0, #160	; 0xa0
 800203c:	f7ff ff38 	bl	8001eb0 <STAT_WRITE>
	if (STAT_READ(STAT_REG1) != 0x00) {
 8002040:	20a0      	movs	r0, #160	; 0xa0
 8002042:	f7ff ff07 	bl	8001e54 <STAT_READ>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MEM_INIT+0x28>
		return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e002      	b.n	8002056 <MEM_INIT+0x2e>
	}

	WRITE_DIS();
 8002050:	f7ff ff84 	bl	8001f5c <WRITE_DIS>
	return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40020000 	.word	0x40020000

08002060 <MEM_WRITE>:
 * @param data: data to write
 *
 * @param bytes: Number of bytes to write to page
 * */

HAL_StatusTypeDef MEM_WRITE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint32_t bytes){
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60ba      	str	r2, [r7, #8]
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	4603      	mov	r3, r0
 800206c:	81fb      	strh	r3, [r7, #14]
 800206e:	460b      	mov	r3, r1
 8002070:	81bb      	strh	r3, [r7, #12]
	uint8_t* setup = malloc((bytes+3)*sizeof(uint8_t)); //Extra 3 bytes for write opcode and column address
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3303      	adds	r3, #3
 8002076:	4618      	mov	r0, r3
 8002078:	f00d fd34 	bl	800fae4 <malloc>
 800207c:	4603      	mov	r3, r0
 800207e:	617b      	str	r3, [r7, #20]
	uint8_t execute[]={WRIT_EXE, DUMMY, page_addr>>8, page_addr};
 8002080:	2310      	movs	r3, #16
 8002082:	743b      	strb	r3, [r7, #16]
 8002084:	2300      	movs	r3, #0
 8002086:	747b      	strb	r3, [r7, #17]
 8002088:	89fb      	ldrh	r3, [r7, #14]
 800208a:	0a1b      	lsrs	r3, r3, #8
 800208c:	b29b      	uxth	r3, r3
 800208e:	b2db      	uxtb	r3, r3
 8002090:	74bb      	strb	r3, [r7, #18]
 8002092:	89fb      	ldrh	r3, [r7, #14]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	74fb      	strb	r3, [r7, #19]

	setup[0] = WRIT_LOAD;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2202      	movs	r2, #2
 800209c:	701a      	strb	r2, [r3, #0]
	setup[1] = col_addr>>8;
 800209e:	89bb      	ldrh	r3, [r7, #12]
 80020a0:	0a1b      	lsrs	r3, r3, #8
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	3301      	adds	r3, #1
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	701a      	strb	r2, [r3, #0]
	setup[2] = col_addr;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	3302      	adds	r3, #2
 80020b0:	89ba      	ldrh	r2, [r7, #12]
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	701a      	strb	r2, [r3, #0]
	memcpy(&setup[3], data, bytes);
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	3303      	adds	r3, #3
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	68b9      	ldr	r1, [r7, #8]
 80020be:	4618      	mov	r0, r3
 80020c0:	f00d fd20 	bl	800fb04 <memcpy>

	WRIT_EN();
 80020c4:	f7ff ff1e 	bl	8001f04 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80020c8:	2200      	movs	r2, #0
 80020ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020ce:	482d      	ldr	r0, [pc, #180]	; (8002184 <MEM_WRITE+0x124>)
 80020d0:	f002 f8dc 	bl	800428c <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, setup, bytes+3, 100)!=HAL_OK){ //load data to internal buffer
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	3303      	adds	r3, #3
 80020da:	b29a      	uxth	r2, r3
 80020dc:	2364      	movs	r3, #100	; 0x64
 80020de:	6979      	ldr	r1, [r7, #20]
 80020e0:	4829      	ldr	r0, [pc, #164]	; (8002188 <MEM_WRITE+0x128>)
 80020e2:	f005 f87e 	bl	80071e2 <HAL_SPI_Transmit>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00a      	beq.n	8002102 <MEM_WRITE+0xa2>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80020ec:	2201      	movs	r2, #1
 80020ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020f2:	4824      	ldr	r0, [pc, #144]	; (8002184 <MEM_WRITE+0x124>)
 80020f4:	f002 f8ca 	bl	800428c <HAL_GPIO_WritePin>
		free(setup);
 80020f8:	6978      	ldr	r0, [r7, #20]
 80020fa:	f00d fcfb 	bl	800faf4 <free>
		return(HAL_ERROR);
 80020fe:	2301      	movs	r3, #1
 8002100:	e03c      	b.n	800217c <MEM_WRITE+0x11c>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002102:	2201      	movs	r2, #1
 8002104:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002108:	481e      	ldr	r0, [pc, #120]	; (8002184 <MEM_WRITE+0x124>)
 800210a:	f002 f8bf 	bl	800428c <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until busy bit is cleared
 800210e:	bf00      	nop
 8002110:	20c0      	movs	r0, #192	; 0xc0
 8002112:	f7ff fe9f 	bl	8001e54 <STAT_READ>
 8002116:	4603      	mov	r3, r0
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b01      	cmp	r3, #1
 800211e:	d0f7      	beq.n	8002110 <MEM_WRITE+0xb0>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8002120:	2200      	movs	r2, #0
 8002122:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002126:	4817      	ldr	r0, [pc, #92]	; (8002184 <MEM_WRITE+0x124>)
 8002128:	f002 f8b0 	bl	800428c <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, execute, 4, 100)!=HAL_OK){ //Send command to dump internal buffer data to memory array
 800212c:	f107 0110 	add.w	r1, r7, #16
 8002130:	2364      	movs	r3, #100	; 0x64
 8002132:	2204      	movs	r2, #4
 8002134:	4814      	ldr	r0, [pc, #80]	; (8002188 <MEM_WRITE+0x128>)
 8002136:	f005 f854 	bl	80071e2 <HAL_SPI_Transmit>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00a      	beq.n	8002156 <MEM_WRITE+0xf6>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002140:	2201      	movs	r2, #1
 8002142:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002146:	480f      	ldr	r0, [pc, #60]	; (8002184 <MEM_WRITE+0x124>)
 8002148:	f002 f8a0 	bl	800428c <HAL_GPIO_WritePin>
		free(setup);
 800214c:	6978      	ldr	r0, [r7, #20]
 800214e:	f00d fcd1 	bl	800faf4 <free>
		return(HAL_ERROR);
 8002152:	2301      	movs	r3, #1
 8002154:	e012      	b.n	800217c <MEM_WRITE+0x11c>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002156:	2201      	movs	r2, #1
 8002158:	f44f 7180 	mov.w	r1, #256	; 0x100
 800215c:	4809      	ldr	r0, [pc, #36]	; (8002184 <MEM_WRITE+0x124>)
 800215e:	f002 f895 	bl	800428c <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 8002162:	bf00      	nop
 8002164:	20c0      	movs	r0, #192	; 0xc0
 8002166:	f7ff fe75 	bl	8001e54 <STAT_READ>
 800216a:	4603      	mov	r3, r0
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b01      	cmp	r3, #1
 8002172:	d0f7      	beq.n	8002164 <MEM_WRITE+0x104>
	free(setup);
 8002174:	6978      	ldr	r0, [r7, #20]
 8002176:	f00d fcbd 	bl	800faf4 <free>
	return(HAL_OK);
 800217a:	2300      	movs	r3, #0

}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40020000 	.word	0x40020000
 8002188:	20000754 	.word	0x20000754

0800218c <MEM_READPAGE>:
 * @param bytes: Number of bytes to read from data buffer
 *
 * !!Note data must first be shifted from memory array into internal data buffer and then can be read!!
 * */

HAL_StatusTypeDef MEM_READPAGE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint32_t bytes){ //Read one 2KiB page. Data will be put into internal buffer which can then be read. Wait at least tDR or until busy bit is clear
 800218c:	b580      	push	{r7, lr}
 800218e:	b08c      	sub	sp, #48	; 0x30
 8002190:	af02      	add	r7, sp, #8
 8002192:	60ba      	str	r2, [r7, #8]
 8002194:	607b      	str	r3, [r7, #4]
 8002196:	4603      	mov	r3, r0
 8002198:	81fb      	strh	r3, [r7, #14]
 800219a:	460b      	mov	r3, r1
 800219c:	81bb      	strh	r3, [r7, #12]
	uint8_t transaction[]={READ_PAGE, DUMMY, page_addr>>8, page_addr};
 800219e:	2313      	movs	r3, #19
 80021a0:	753b      	strb	r3, [r7, #20]
 80021a2:	2300      	movs	r3, #0
 80021a4:	757b      	strb	r3, [r7, #21]
 80021a6:	89fb      	ldrh	r3, [r7, #14]
 80021a8:	0a1b      	lsrs	r3, r3, #8
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	75bb      	strb	r3, [r7, #22]
 80021b0:	89fb      	ldrh	r3, [r7, #14]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	75fb      	strb	r3, [r7, #23]
	uint8_t transaction_size = sizeof(transaction)/sizeof(transaction[0]);
 80021b6:	2304      	movs	r3, #4
 80021b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t* read_command = malloc(bytes+transaction_size); //Must allocate here since array may be too big for FreeRTOS task stack
 80021bc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4413      	add	r3, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f00d fc8d 	bl	800fae4 <malloc>
 80021ca:	4603      	mov	r3, r0
 80021cc:	61fb      	str	r3, [r7, #28]
	uint8_t* rec_data = malloc(bytes+transaction_size);
 80021ce:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	4618      	mov	r0, r3
 80021d8:	f00d fc84 	bl	800fae4 <malloc>
 80021dc:	4603      	mov	r3, r0
 80021de:	61bb      	str	r3, [r7, #24]

	memset(read_command, 0, bytes+transaction_size);
 80021e0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4413      	add	r3, r2
 80021e8:	461a      	mov	r2, r3
 80021ea:	2100      	movs	r1, #0
 80021ec:	69f8      	ldr	r0, [r7, #28]
 80021ee:	f00d fc97 	bl	800fb20 <memset>
	read_command[0]=READ_BUF;
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	2203      	movs	r2, #3
 80021f6:	701a      	strb	r2, [r3, #0]
	read_command[1]= col_addr>>8;
 80021f8:	89bb      	ldrh	r3, [r7, #12]
 80021fa:	0a1b      	lsrs	r3, r3, #8
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3301      	adds	r3, #1
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	701a      	strb	r2, [r3, #0]
	read_command[2] = col_addr;
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3302      	adds	r3, #2
 800220a:	89ba      	ldrh	r2, [r7, #12]
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	701a      	strb	r2, [r3, #0]
	read_command[3] = DUMMY;
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	3303      	adds	r3, #3
 8002214:	2200      	movs	r2, #0
 8002216:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8002218:	2200      	movs	r2, #0
 800221a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800221e:	4842      	ldr	r0, [pc, #264]	; (8002328 <MEM_READPAGE+0x19c>)
 8002220:	f002 f834 	bl	800428c <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, transaction, 4, 100)!=HAL_OK){ //load data to internal buffer
 8002224:	f107 0114 	add.w	r1, r7, #20
 8002228:	2364      	movs	r3, #100	; 0x64
 800222a:	2204      	movs	r2, #4
 800222c:	483f      	ldr	r0, [pc, #252]	; (800232c <MEM_READPAGE+0x1a0>)
 800222e:	f004 ffd8 	bl	80071e2 <HAL_SPI_Transmit>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00d      	beq.n	8002254 <MEM_READPAGE+0xc8>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002238:	2201      	movs	r2, #1
 800223a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800223e:	483a      	ldr	r0, [pc, #232]	; (8002328 <MEM_READPAGE+0x19c>)
 8002240:	f002 f824 	bl	800428c <HAL_GPIO_WritePin>
		free(read_command);
 8002244:	69f8      	ldr	r0, [r7, #28]
 8002246:	f00d fc55 	bl	800faf4 <free>
		free(rec_data);
 800224a:	69b8      	ldr	r0, [r7, #24]
 800224c:	f00d fc52 	bl	800faf4 <free>
		return(HAL_ERROR);
 8002250:	2301      	movs	r3, #1
 8002252:	e064      	b.n	800231e <MEM_READPAGE+0x192>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002254:	2201      	movs	r2, #1
 8002256:	f44f 7180 	mov.w	r1, #256	; 0x100
 800225a:	4833      	ldr	r0, [pc, #204]	; (8002328 <MEM_READPAGE+0x19c>)
 800225c:	f002 f816 	bl	800428c <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until BUSY bit is cleared
 8002260:	bf00      	nop
 8002262:	20c0      	movs	r0, #192	; 0xc0
 8002264:	f7ff fdf6 	bl	8001e54 <STAT_READ>
 8002268:	4603      	mov	r3, r0
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b01      	cmp	r3, #1
 8002270:	d0f7      	beq.n	8002262 <MEM_READPAGE+0xd6>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8002272:	2200      	movs	r2, #0
 8002274:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002278:	482b      	ldr	r0, [pc, #172]	; (8002328 <MEM_READPAGE+0x19c>)
 800227a:	f002 f807 	bl	800428c <HAL_GPIO_WritePin>
	if(HAL_SPI_TransmitReceive(&hspi2, read_command, rec_data, bytes+transaction_size, 100)!=HAL_OK){ //Send command to flush buffer to memory array
 800227e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002282:	b29a      	uxth	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	b29b      	uxth	r3, r3
 8002288:	4413      	add	r3, r2
 800228a:	b29b      	uxth	r3, r3
 800228c:	2264      	movs	r2, #100	; 0x64
 800228e:	9200      	str	r2, [sp, #0]
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	69f9      	ldr	r1, [r7, #28]
 8002294:	4825      	ldr	r0, [pc, #148]	; (800232c <MEM_READPAGE+0x1a0>)
 8002296:	f005 f8e0 	bl	800745a <HAL_SPI_TransmitReceive>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00d      	beq.n	80022bc <MEM_READPAGE+0x130>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80022a0:	2201      	movs	r2, #1
 80022a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022a6:	4820      	ldr	r0, [pc, #128]	; (8002328 <MEM_READPAGE+0x19c>)
 80022a8:	f001 fff0 	bl	800428c <HAL_GPIO_WritePin>
		free(read_command);
 80022ac:	69f8      	ldr	r0, [r7, #28]
 80022ae:	f00d fc21 	bl	800faf4 <free>
		free(rec_data);
 80022b2:	69b8      	ldr	r0, [r7, #24]
 80022b4:	f00d fc1e 	bl	800faf4 <free>
		return(HAL_ERROR);
 80022b8:	2301      	movs	r3, #1
 80022ba:	e030      	b.n	800231e <MEM_READPAGE+0x192>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80022bc:	2201      	movs	r2, #1
 80022be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022c2:	4819      	ldr	r0, [pc, #100]	; (8002328 <MEM_READPAGE+0x19c>)
 80022c4:	f001 ffe2 	bl	800428c <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 80022c8:	bf00      	nop
 80022ca:	20c0      	movs	r0, #192	; 0xc0
 80022cc:	f7ff fdc2 	bl	8001e54 <STAT_READ>
 80022d0:	4603      	mov	r3, r0
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d0f7      	beq.n	80022ca <MEM_READPAGE+0x13e>

	if (bytes == 1) {
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d104      	bne.n	80022ea <MEM_READPAGE+0x15e>
		*data = rec_data[4];
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	791a      	ldrb	r2, [r3, #4]
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	701a      	strb	r2, [r3, #0]
 80022e8:	e012      	b.n	8002310 <MEM_READPAGE+0x184>
	} else {
		for(int i = 0; i < bytes; i++){
 80022ea:	2300      	movs	r3, #0
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
 80022ee:	e00b      	b.n	8002308 <MEM_READPAGE+0x17c>
				data[i] = rec_data[i+4]; //+4 as first four elements of rec_data are meaningless
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	3304      	adds	r3, #4
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	441a      	add	r2, r3
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	68b9      	ldr	r1, [r7, #8]
 80022fc:	440b      	add	r3, r1
 80022fe:	7812      	ldrb	r2, [r2, #0]
 8002300:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < bytes; i++){
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	3301      	adds	r3, #1
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	429a      	cmp	r2, r3
 800230e:	d8ef      	bhi.n	80022f0 <MEM_READPAGE+0x164>
		}
	}
	free(read_command);
 8002310:	69f8      	ldr	r0, [r7, #28]
 8002312:	f00d fbef 	bl	800faf4 <free>
	free(rec_data);
 8002316:	69b8      	ldr	r0, [r7, #24]
 8002318:	f00d fbec 	bl	800faf4 <free>
	return(HAL_OK);
 800231c:	2300      	movs	r3, #0

}
 800231e:	4618      	mov	r0, r3
 8002320:	3728      	adds	r7, #40	; 0x28
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40020000 	.word	0x40020000
 800232c:	20000754 	.word	0x20000754

08002330 <mem_find_free_block>:
/**
 * Find the next free/empty block
 *
 * @return address of free block or -1 if no blocks available
 * */
int mem_find_free_block(void) {
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8002336:	2300      	movs	r3, #0
 8002338:	607b      	str	r3, [r7, #4]
 800233a:	e016      	b.n	800236a <mem_find_free_block+0x3a>
		uint8_t first_byte;
		if (MEM_READPAGE(i * BLOCK_PAGECOUNT, 0x0000, &first_byte, 1) != HAL_OK) {
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	b29b      	uxth	r3, r3
 8002340:	019b      	lsls	r3, r3, #6
 8002342:	b298      	uxth	r0, r3
 8002344:	1cfa      	adds	r2, r7, #3
 8002346:	2301      	movs	r3, #1
 8002348:	2100      	movs	r1, #0
 800234a:	f7ff ff1f 	bl	800218c <MEM_READPAGE>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d002      	beq.n	800235a <mem_find_free_block+0x2a>
			return -1;
 8002354:	f04f 33ff 	mov.w	r3, #4294967295
 8002358:	e00d      	b.n	8002376 <mem_find_free_block+0x46>
		}

		if (first_byte == 0xFF) {
 800235a:	78fb      	ldrb	r3, [r7, #3]
 800235c:	2bff      	cmp	r3, #255	; 0xff
 800235e:	d101      	bne.n	8002364 <mem_find_free_block+0x34>
			return i;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	e008      	b.n	8002376 <mem_find_free_block+0x46>
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3301      	adds	r3, #1
 8002368:	607b      	str	r3, [r7, #4]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002370:	dbe4      	blt.n	800233c <mem_find_free_block+0xc>
		}
	}
	return -1;
 8002372:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <memory_reset>:

/**
 * Clear entire memory array to 0xFF
 * */
void memory_reset(void) {
 800237e:	b580      	push	{r7, lr}
 8002380:	b082      	sub	sp, #8
 8002382:	af00      	add	r7, sp, #0
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8002384:	2300      	movs	r3, #0
 8002386:	607b      	str	r3, [r7, #4]
 8002388:	e007      	b.n	800239a <memory_reset+0x1c>
		block_erase(i);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	b29b      	uxth	r3, r3
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff fe0e 	bl	8001fb0 <block_erase>
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3301      	adds	r3, #1
 8002398:	607b      	str	r3, [r7, #4]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023a0:	dbf3      	blt.n	800238a <memory_reset+0xc>
	}
}
 80023a2:	bf00      	nop
 80023a4:	bf00      	nop
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_GPIO_EXTI_Callback>:

/****************************************Button Interrupt Handler**************************************
 * Interrupt is triggered on falling (button pressed) and rising (button released) edges. On release the
 * value of timer 3 is checked to see if the time elapsed makes the press a short or long press
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	80fb      	strh	r3, [r7, #6]
	uint16_t tim_val = __HAL_TIM_GET_COUNTER(&htim3);
 80023b6:	4b18      	ldr	r3, [pc, #96]	; (8002418 <HAL_GPIO_EXTI_Callback+0x6c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	81fb      	strh	r3, [r7, #14]
	uint8_t button_state = NO_PRESS;
 80023be:	2300      	movs	r3, #0
 80023c0:	737b      	strb	r3, [r7, #13]

	if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1) && (tim_val > 0)) {
 80023c2:	2102      	movs	r1, #2
 80023c4:	4815      	ldr	r0, [pc, #84]	; (800241c <HAL_GPIO_EXTI_Callback+0x70>)
 80023c6:	f001 ff49 	bl	800425c <HAL_GPIO_ReadPin>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d11b      	bne.n	8002408 <HAL_GPIO_EXTI_Callback+0x5c>
 80023d0:	89fb      	ldrh	r3, [r7, #14]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d018      	beq.n	8002408 <HAL_GPIO_EXTI_Callback+0x5c>
		HAL_TIM_Base_Stop(&htim3);
 80023d6:	4810      	ldr	r0, [pc, #64]	; (8002418 <HAL_GPIO_EXTI_Callback+0x6c>)
 80023d8:	f005 fb56 	bl	8007a88 <HAL_TIM_Base_Stop>
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 80023dc:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <HAL_GPIO_EXTI_Callback+0x6c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2200      	movs	r2, #0
 80023e2:	625a      	str	r2, [r3, #36]	; 0x24

		if (tim_val > LONG_PRESS_THRESH) {
 80023e4:	89fb      	ldrh	r3, [r7, #14]
 80023e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023ea:	d902      	bls.n	80023f2 <HAL_GPIO_EXTI_Callback+0x46>
			button_state = LONG_PRESS;
 80023ec:	2301      	movs	r3, #1
 80023ee:	737b      	strb	r3, [r7, #13]
 80023f0:	e001      	b.n	80023f6 <HAL_GPIO_EXTI_Callback+0x4a>
		} else {
			button_state = SHORT_PRESS;
 80023f2:	2302      	movs	r3, #2
 80023f4:	737b      	strb	r3, [r7, #13]
		}
		xQueueSendFromISR(UserInputHandle, &button_state, 0);
 80023f6:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <HAL_GPIO_EXTI_Callback+0x74>)
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	f107 010d 	add.w	r1, r7, #13
 80023fe:	2300      	movs	r3, #0
 8002400:	2200      	movs	r2, #0
 8002402:	f00a fbe5 	bl	800cbd0 <xQueueGenericSendFromISR>
 8002406:	e003      	b.n	8002410 <HAL_GPIO_EXTI_Callback+0x64>
	} else {
		HAL_TIM_Base_Start(&htim3);
 8002408:	4803      	ldr	r0, [pc, #12]	; (8002418 <HAL_GPIO_EXTI_Callback+0x6c>)
 800240a:	f005 fae3 	bl	80079d4 <HAL_TIM_Base_Start>
	}
}
 800240e:	bf00      	nop
 8002410:	bf00      	nop
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	200007f4 	.word	0x200007f4
 800241c:	40020000 	.word	0x40020000
 8002420:	20000860 	.word	0x20000860

08002424 <BUZZ>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void BUZZ(void){
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002428:	2108      	movs	r1, #8
 800242a:	4806      	ldr	r0, [pc, #24]	; (8002444 <BUZZ+0x20>)
 800242c:	f005 fc10 	bl	8007c50 <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 8002430:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002434:	f001 fc88 	bl	8003d48 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8002438:	2108      	movs	r1, #8
 800243a:	4802      	ldr	r0, [pc, #8]	; (8002444 <BUZZ+0x20>)
 800243c:	f005 fcb8 	bl	8007db0 <HAL_TIM_PWM_Stop>
}
 8002440:	bf00      	nop
 8002442:	bd80      	pop	{r7, pc}
 8002444:	200007ac 	.word	0x200007ac

08002448 <write_card>:

void write_card(Card* towrite) {
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
	OLED_Clear();
 8002450:	f7ff f83d 	bl	80014ce <OLED_Clear>
	MFRC_ANTON();
 8002454:	f7fe fc44 	bl	8000ce0 <MFRC_ANTON>
	OLED_PrintCent(2, "Writing...", NORMAL);
 8002458:	2200      	movs	r2, #0
 800245a:	4926      	ldr	r1, [pc, #152]	; (80024f4 <write_card+0xac>)
 800245c:	2002      	movs	r0, #2
 800245e:	f7ff fa0e 	bl	800187e <OLED_PrintCent>
	if (UL_writecard(towrite) == PCD_NO_PICC) {
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7fe ff54 	bl	8001310 <UL_writecard>
 8002468:	4603      	mov	r3, r0
 800246a:	2b01      	cmp	r3, #1
 800246c:	d118      	bne.n	80024a0 <write_card+0x58>
		OLED_PrintCent(4, "ERROR: Couldn't find", NORMAL);
 800246e:	2200      	movs	r2, #0
 8002470:	4921      	ldr	r1, [pc, #132]	; (80024f8 <write_card+0xb0>)
 8002472:	2004      	movs	r0, #4
 8002474:	f7ff fa03 	bl	800187e <OLED_PrintCent>
		OLED_PrintCent(6, "Card", NORMAL);
 8002478:	2200      	movs	r2, #0
 800247a:	4920      	ldr	r1, [pc, #128]	; (80024fc <write_card+0xb4>)
 800247c:	2006      	movs	r0, #6
 800247e:	f7ff f9fe 	bl	800187e <OLED_PrintCent>
		MFRC_ANTOFF();
 8002482:	f7fe fc67 	bl	8000d54 <MFRC_ANTOFF>
		osDelay(2000);
 8002486:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800248a:	f009 ffee 	bl	800c46a <osDelay>
		vTaskResume(HomeHandle);
 800248e:	4b1c      	ldr	r3, [pc, #112]	; (8002500 <write_card+0xb8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f00b f904 	bl	800d6a0 <vTaskResume>
		vTaskSuspend(NULL);
 8002498:	2000      	movs	r0, #0
 800249a:	f00b f859 	bl	800d550 <vTaskSuspend>
		MFRC_ANTOFF();
		osDelay(1000);
		vTaskResume(HomeHandle);
		vTaskSuspend(NULL);
	}
}
 800249e:	e025      	b.n	80024ec <write_card+0xa4>
		MFRC_HALTA(); //Deselect card
 80024a0:	f7fe fd34 	bl	8000f0c <MFRC_HALTA>
		OLED_PrintCent(4,"Verifying...", NORMAL);
 80024a4:	2200      	movs	r2, #0
 80024a6:	4917      	ldr	r1, [pc, #92]	; (8002504 <write_card+0xbc>)
 80024a8:	2004      	movs	r0, #4
 80024aa:	f7ff f9e8 	bl	800187e <OLED_PrintCent>
		if (UL_verify(towrite) == PCD_OK) {
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7fe ffb8 	bl	8001424 <UL_verify>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2bcc      	cmp	r3, #204	; 0xcc
 80024b8:	d105      	bne.n	80024c6 <write_card+0x7e>
			OLED_PrintCent(6, "Write verified :)", NORMAL);
 80024ba:	2200      	movs	r2, #0
 80024bc:	4912      	ldr	r1, [pc, #72]	; (8002508 <write_card+0xc0>)
 80024be:	2006      	movs	r0, #6
 80024c0:	f7ff f9dd 	bl	800187e <OLED_PrintCent>
 80024c4:	e004      	b.n	80024d0 <write_card+0x88>
			OLED_PrintCent(6, "ERROR: COULDN'T VERIFY", NORMAL);
 80024c6:	2200      	movs	r2, #0
 80024c8:	4910      	ldr	r1, [pc, #64]	; (800250c <write_card+0xc4>)
 80024ca:	2006      	movs	r0, #6
 80024cc:	f7ff f9d7 	bl	800187e <OLED_PrintCent>
		MFRC_ANTOFF();
 80024d0:	f7fe fc40 	bl	8000d54 <MFRC_ANTOFF>
		osDelay(1000);
 80024d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024d8:	f009 ffc7 	bl	800c46a <osDelay>
		vTaskResume(HomeHandle);
 80024dc:	4b08      	ldr	r3, [pc, #32]	; (8002500 <write_card+0xb8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f00b f8dd 	bl	800d6a0 <vTaskResume>
		vTaskSuspend(NULL);
 80024e6:	2000      	movs	r0, #0
 80024e8:	f00b f832 	bl	800d550 <vTaskSuspend>
}
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	08010568 	.word	0x08010568
 80024f8:	08010574 	.word	0x08010574
 80024fc:	0801058c 	.word	0x0801058c
 8002500:	20000848 	.word	0x20000848
 8002504:	08010594 	.word	0x08010594
 8002508:	080105a4 	.word	0x080105a4
 800250c:	080105b8 	.word	0x080105b8

08002510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002514:	f001 fbd6 	bl	8003cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002518:	f000 f8a6 	bl	8002668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800251c:	f000 fa6e 	bl	80029fc <MX_GPIO_Init>
  MX_I2C1_Init();
 8002520:	f000 f90c 	bl	800273c <MX_I2C1_Init>
  MX_SPI1_Init();
 8002524:	f000 f938 	bl	8002798 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002528:	f000 f96e 	bl	8002808 <MX_SPI2_Init>
  MX_TIM2_Init();
 800252c:	f000 f9a2 	bl	8002874 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002530:	f000 fa16 	bl	8002960 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002534:	f009 febc 	bl	800c2b0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UidtoFound */
  UidtoFoundHandle = osMessageQueueNew (1, sizeof(Card*), &UidtoFound_attributes);
 8002538:	4a2d      	ldr	r2, [pc, #180]	; (80025f0 <main+0xe0>)
 800253a:	2104      	movs	r1, #4
 800253c:	2001      	movs	r0, #1
 800253e:	f009 ffaf 	bl	800c4a0 <osMessageQueueNew>
 8002542:	4603      	mov	r3, r0
 8002544:	4a2b      	ldr	r2, [pc, #172]	; (80025f4 <main+0xe4>)
 8002546:	6013      	str	r3, [r2, #0]

  /* creation of UserInput */
  UserInputHandle = osMessageQueueNew (1, sizeof(uint8_t), &UserInput_attributes);
 8002548:	4a2b      	ldr	r2, [pc, #172]	; (80025f8 <main+0xe8>)
 800254a:	2101      	movs	r1, #1
 800254c:	2001      	movs	r0, #1
 800254e:	f009 ffa7 	bl	800c4a0 <osMessageQueueNew>
 8002552:	4603      	mov	r3, r0
 8002554:	4a29      	ldr	r2, [pc, #164]	; (80025fc <main+0xec>)
 8002556:	6013      	str	r3, [r2, #0]

  /* creation of FileEntry */
  FileEntryHandle = osMessageQueueNew (1, sizeof(uint16_t), &FileEntry_attributes);
 8002558:	4a29      	ldr	r2, [pc, #164]	; (8002600 <main+0xf0>)
 800255a:	2102      	movs	r1, #2
 800255c:	2001      	movs	r0, #1
 800255e:	f009 ff9f 	bl	800c4a0 <osMessageQueueNew>
 8002562:	4603      	mov	r3, r0
 8002564:	4a27      	ldr	r2, [pc, #156]	; (8002604 <main+0xf4>)
 8002566:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PERIPHINIT */
  PERIPHINITHandle = osThreadNew(Start_Init, NULL, &PERIPHINIT_attributes);
 8002568:	4a27      	ldr	r2, [pc, #156]	; (8002608 <main+0xf8>)
 800256a:	2100      	movs	r1, #0
 800256c:	4827      	ldr	r0, [pc, #156]	; (800260c <main+0xfc>)
 800256e:	f009 fee9 	bl	800c344 <osThreadNew>
 8002572:	4603      	mov	r3, r0
 8002574:	4a26      	ldr	r2, [pc, #152]	; (8002610 <main+0x100>)
 8002576:	6013      	str	r3, [r2, #0]

  /* creation of ReadCard */
  ReadCardHandle = osThreadNew(StartReadCard, NULL, &ReadCard_attributes);
 8002578:	4a26      	ldr	r2, [pc, #152]	; (8002614 <main+0x104>)
 800257a:	2100      	movs	r1, #0
 800257c:	4826      	ldr	r0, [pc, #152]	; (8002618 <main+0x108>)
 800257e:	f009 fee1 	bl	800c344 <osThreadNew>
 8002582:	4603      	mov	r3, r0
 8002584:	4a25      	ldr	r2, [pc, #148]	; (800261c <main+0x10c>)
 8002586:	6013      	str	r3, [r2, #0]

  /* creation of WriteCard */
  WriteCardHandle = osThreadNew(StartWriteCard, NULL, &WriteCard_attributes);
 8002588:	4a25      	ldr	r2, [pc, #148]	; (8002620 <main+0x110>)
 800258a:	2100      	movs	r1, #0
 800258c:	4825      	ldr	r0, [pc, #148]	; (8002624 <main+0x114>)
 800258e:	f009 fed9 	bl	800c344 <osThreadNew>
 8002592:	4603      	mov	r3, r0
 8002594:	4a24      	ldr	r2, [pc, #144]	; (8002628 <main+0x118>)
 8002596:	6013      	str	r3, [r2, #0]

  /* creation of Home */
  HomeHandle = osThreadNew(StartHome, NULL, &Home_attributes);
 8002598:	4a24      	ldr	r2, [pc, #144]	; (800262c <main+0x11c>)
 800259a:	2100      	movs	r1, #0
 800259c:	4824      	ldr	r0, [pc, #144]	; (8002630 <main+0x120>)
 800259e:	f009 fed1 	bl	800c344 <osThreadNew>
 80025a2:	4603      	mov	r3, r0
 80025a4:	4a23      	ldr	r2, [pc, #140]	; (8002634 <main+0x124>)
 80025a6:	6013      	str	r3, [r2, #0]

  /* creation of CardFound */
  CardFoundHandle = osThreadNew(CardFoundStart, NULL, &CardFound_attributes);
 80025a8:	4a23      	ldr	r2, [pc, #140]	; (8002638 <main+0x128>)
 80025aa:	2100      	movs	r1, #0
 80025ac:	4823      	ldr	r0, [pc, #140]	; (800263c <main+0x12c>)
 80025ae:	f009 fec9 	bl	800c344 <osThreadNew>
 80025b2:	4603      	mov	r3, r0
 80025b4:	4a22      	ldr	r2, [pc, #136]	; (8002640 <main+0x130>)
 80025b6:	6013      	str	r3, [r2, #0]

  /* creation of ShowFiles */
  ShowFilesHandle = osThreadNew(StartShowFiles, NULL, &ShowFiles_attributes);
 80025b8:	4a22      	ldr	r2, [pc, #136]	; (8002644 <main+0x134>)
 80025ba:	2100      	movs	r1, #0
 80025bc:	4822      	ldr	r0, [pc, #136]	; (8002648 <main+0x138>)
 80025be:	f009 fec1 	bl	800c344 <osThreadNew>
 80025c2:	4603      	mov	r3, r0
 80025c4:	4a21      	ldr	r2, [pc, #132]	; (800264c <main+0x13c>)
 80025c6:	6013      	str	r3, [r2, #0]

  /* creation of ShowFileData */
  ShowFileDataHandle = osThreadNew(StartShowFileData, NULL, &ShowFileData_attributes);
 80025c8:	4a21      	ldr	r2, [pc, #132]	; (8002650 <main+0x140>)
 80025ca:	2100      	movs	r1, #0
 80025cc:	4821      	ldr	r0, [pc, #132]	; (8002654 <main+0x144>)
 80025ce:	f009 feb9 	bl	800c344 <osThreadNew>
 80025d2:	4603      	mov	r3, r0
 80025d4:	4a20      	ldr	r2, [pc, #128]	; (8002658 <main+0x148>)
 80025d6:	6013      	str	r3, [r2, #0]

  /* creation of Clone */
  CloneHandle = osThreadNew(StartClone, NULL, &Clone_attributes);
 80025d8:	4a20      	ldr	r2, [pc, #128]	; (800265c <main+0x14c>)
 80025da:	2100      	movs	r1, #0
 80025dc:	4820      	ldr	r0, [pc, #128]	; (8002660 <main+0x150>)
 80025de:	f009 feb1 	bl	800c344 <osThreadNew>
 80025e2:	4603      	mov	r3, r0
 80025e4:	4a1f      	ldr	r2, [pc, #124]	; (8002664 <main+0x154>)
 80025e6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80025e8:	f009 fe86 	bl	800c2f8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80025ec:	e7fe      	b.n	80025ec <main+0xdc>
 80025ee:	bf00      	nop
 80025f0:	08010b18 	.word	0x08010b18
 80025f4:	2000085c 	.word	0x2000085c
 80025f8:	08010b30 	.word	0x08010b30
 80025fc:	20000860 	.word	0x20000860
 8002600:	08010b48 	.word	0x08010b48
 8002604:	20000864 	.word	0x20000864
 8002608:	080109f8 	.word	0x080109f8
 800260c:	08002af5 	.word	0x08002af5
 8002610:	2000083c 	.word	0x2000083c
 8002614:	08010a1c 	.word	0x08010a1c
 8002618:	08002c3d 	.word	0x08002c3d
 800261c:	20000840 	.word	0x20000840
 8002620:	08010a40 	.word	0x08010a40
 8002624:	08002ccd 	.word	0x08002ccd
 8002628:	20000844 	.word	0x20000844
 800262c:	08010a64 	.word	0x08010a64
 8002630:	08002d6d 	.word	0x08002d6d
 8002634:	20000848 	.word	0x20000848
 8002638:	08010a88 	.word	0x08010a88
 800263c:	08002e41 	.word	0x08002e41
 8002640:	2000084c 	.word	0x2000084c
 8002644:	08010aac 	.word	0x08010aac
 8002648:	08002f29 	.word	0x08002f29
 800264c:	20000850 	.word	0x20000850
 8002650:	08010ad0 	.word	0x08010ad0
 8002654:	08002ff5 	.word	0x08002ff5
 8002658:	20000854 	.word	0x20000854
 800265c:	08010af4 	.word	0x08010af4
 8002660:	08003099 	.word	0x08003099
 8002664:	20000858 	.word	0x20000858

08002668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b094      	sub	sp, #80	; 0x50
 800266c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800266e:	f107 0320 	add.w	r3, r7, #32
 8002672:	2230      	movs	r2, #48	; 0x30
 8002674:	2100      	movs	r1, #0
 8002676:	4618      	mov	r0, r3
 8002678:	f00d fa52 	bl	800fb20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800267c:	f107 030c 	add.w	r3, r7, #12
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800268c:	2300      	movs	r3, #0
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	4b28      	ldr	r3, [pc, #160]	; (8002734 <SystemClock_Config+0xcc>)
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	4a27      	ldr	r2, [pc, #156]	; (8002734 <SystemClock_Config+0xcc>)
 8002696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269a:	6413      	str	r3, [r2, #64]	; 0x40
 800269c:	4b25      	ldr	r3, [pc, #148]	; (8002734 <SystemClock_Config+0xcc>)
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80026a8:	2300      	movs	r3, #0
 80026aa:	607b      	str	r3, [r7, #4]
 80026ac:	4b22      	ldr	r3, [pc, #136]	; (8002738 <SystemClock_Config+0xd0>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80026b4:	4a20      	ldr	r2, [pc, #128]	; (8002738 <SystemClock_Config+0xd0>)
 80026b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	4b1e      	ldr	r3, [pc, #120]	; (8002738 <SystemClock_Config+0xd0>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026c4:	607b      	str	r3, [r7, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026c8:	2301      	movs	r3, #1
 80026ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026d2:	2302      	movs	r3, #2
 80026d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80026dc:	2308      	movs	r3, #8
 80026de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80026e0:	23a8      	movs	r3, #168	; 0xa8
 80026e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80026e4:	2304      	movs	r3, #4
 80026e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80026e8:	2307      	movs	r3, #7
 80026ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026ec:	f107 0320 	add.w	r3, r7, #32
 80026f0:	4618      	mov	r0, r3
 80026f2:	f004 f839 	bl	8006768 <HAL_RCC_OscConfig>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80026fc:	f000 fd32 	bl	8003164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002700:	230f      	movs	r3, #15
 8002702:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002704:	2302      	movs	r3, #2
 8002706:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800270c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002710:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002712:	2300      	movs	r3, #0
 8002714:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002716:	f107 030c 	add.w	r3, r7, #12
 800271a:	2102      	movs	r1, #2
 800271c:	4618      	mov	r0, r3
 800271e:	f004 fa9b 	bl	8006c58 <HAL_RCC_ClockConfig>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002728:	f000 fd1c 	bl	8003164 <Error_Handler>
  }
}
 800272c:	bf00      	nop
 800272e:	3750      	adds	r7, #80	; 0x50
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40023800 	.word	0x40023800
 8002738:	40007000 	.word	0x40007000

0800273c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002740:	4b12      	ldr	r3, [pc, #72]	; (800278c <MX_I2C1_Init+0x50>)
 8002742:	4a13      	ldr	r2, [pc, #76]	; (8002790 <MX_I2C1_Init+0x54>)
 8002744:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002746:	4b11      	ldr	r3, [pc, #68]	; (800278c <MX_I2C1_Init+0x50>)
 8002748:	4a12      	ldr	r2, [pc, #72]	; (8002794 <MX_I2C1_Init+0x58>)
 800274a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800274c:	4b0f      	ldr	r3, [pc, #60]	; (800278c <MX_I2C1_Init+0x50>)
 800274e:	2200      	movs	r2, #0
 8002750:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002752:	4b0e      	ldr	r3, [pc, #56]	; (800278c <MX_I2C1_Init+0x50>)
 8002754:	2200      	movs	r2, #0
 8002756:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002758:	4b0c      	ldr	r3, [pc, #48]	; (800278c <MX_I2C1_Init+0x50>)
 800275a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800275e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002760:	4b0a      	ldr	r3, [pc, #40]	; (800278c <MX_I2C1_Init+0x50>)
 8002762:	2200      	movs	r2, #0
 8002764:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002766:	4b09      	ldr	r3, [pc, #36]	; (800278c <MX_I2C1_Init+0x50>)
 8002768:	2200      	movs	r2, #0
 800276a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800276c:	4b07      	ldr	r3, [pc, #28]	; (800278c <MX_I2C1_Init+0x50>)
 800276e:	2200      	movs	r2, #0
 8002770:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <MX_I2C1_Init+0x50>)
 8002774:	2200      	movs	r2, #0
 8002776:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002778:	4804      	ldr	r0, [pc, #16]	; (800278c <MX_I2C1_Init+0x50>)
 800277a:	f001 fdb9 	bl	80042f0 <HAL_I2C_Init>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002784:	f000 fcee 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002788:	bf00      	nop
 800278a:	bd80      	pop	{r7, pc}
 800278c:	200006a8 	.word	0x200006a8
 8002790:	40005400 	.word	0x40005400
 8002794:	000186a0 	.word	0x000186a0

08002798 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800279c:	4b18      	ldr	r3, [pc, #96]	; (8002800 <MX_SPI1_Init+0x68>)
 800279e:	4a19      	ldr	r2, [pc, #100]	; (8002804 <MX_SPI1_Init+0x6c>)
 80027a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027a2:	4b17      	ldr	r3, [pc, #92]	; (8002800 <MX_SPI1_Init+0x68>)
 80027a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80027aa:	4b15      	ldr	r3, [pc, #84]	; (8002800 <MX_SPI1_Init+0x68>)
 80027ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80027b0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027b2:	4b13      	ldr	r3, [pc, #76]	; (8002800 <MX_SPI1_Init+0x68>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027b8:	4b11      	ldr	r3, [pc, #68]	; (8002800 <MX_SPI1_Init+0x68>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027be:	4b10      	ldr	r3, [pc, #64]	; (8002800 <MX_SPI1_Init+0x68>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027c4:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <MX_SPI1_Init+0x68>)
 80027c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80027cc:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <MX_SPI1_Init+0x68>)
 80027ce:	2218      	movs	r2, #24
 80027d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027d2:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <MX_SPI1_Init+0x68>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027d8:	4b09      	ldr	r3, [pc, #36]	; (8002800 <MX_SPI1_Init+0x68>)
 80027da:	2200      	movs	r2, #0
 80027dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027de:	4b08      	ldr	r3, [pc, #32]	; (8002800 <MX_SPI1_Init+0x68>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80027e4:	4b06      	ldr	r3, [pc, #24]	; (8002800 <MX_SPI1_Init+0x68>)
 80027e6:	220a      	movs	r2, #10
 80027e8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027ea:	4805      	ldr	r0, [pc, #20]	; (8002800 <MX_SPI1_Init+0x68>)
 80027ec:	f004 fc70 	bl	80070d0 <HAL_SPI_Init>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80027f6:	f000 fcb5 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	200006fc 	.word	0x200006fc
 8002804:	40013000 	.word	0x40013000

08002808 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800280c:	4b17      	ldr	r3, [pc, #92]	; (800286c <MX_SPI2_Init+0x64>)
 800280e:	4a18      	ldr	r2, [pc, #96]	; (8002870 <MX_SPI2_Init+0x68>)
 8002810:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002812:	4b16      	ldr	r3, [pc, #88]	; (800286c <MX_SPI2_Init+0x64>)
 8002814:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002818:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800281a:	4b14      	ldr	r3, [pc, #80]	; (800286c <MX_SPI2_Init+0x64>)
 800281c:	2200      	movs	r2, #0
 800281e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002820:	4b12      	ldr	r3, [pc, #72]	; (800286c <MX_SPI2_Init+0x64>)
 8002822:	2200      	movs	r2, #0
 8002824:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002826:	4b11      	ldr	r3, [pc, #68]	; (800286c <MX_SPI2_Init+0x64>)
 8002828:	2200      	movs	r2, #0
 800282a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800282c:	4b0f      	ldr	r3, [pc, #60]	; (800286c <MX_SPI2_Init+0x64>)
 800282e:	2200      	movs	r2, #0
 8002830:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002832:	4b0e      	ldr	r3, [pc, #56]	; (800286c <MX_SPI2_Init+0x64>)
 8002834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002838:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800283a:	4b0c      	ldr	r3, [pc, #48]	; (800286c <MX_SPI2_Init+0x64>)
 800283c:	2200      	movs	r2, #0
 800283e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002840:	4b0a      	ldr	r3, [pc, #40]	; (800286c <MX_SPI2_Init+0x64>)
 8002842:	2200      	movs	r2, #0
 8002844:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002846:	4b09      	ldr	r3, [pc, #36]	; (800286c <MX_SPI2_Init+0x64>)
 8002848:	2200      	movs	r2, #0
 800284a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800284c:	4b07      	ldr	r3, [pc, #28]	; (800286c <MX_SPI2_Init+0x64>)
 800284e:	2200      	movs	r2, #0
 8002850:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002852:	4b06      	ldr	r3, [pc, #24]	; (800286c <MX_SPI2_Init+0x64>)
 8002854:	220a      	movs	r2, #10
 8002856:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002858:	4804      	ldr	r0, [pc, #16]	; (800286c <MX_SPI2_Init+0x64>)
 800285a:	f004 fc39 	bl	80070d0 <HAL_SPI_Init>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002864:	f000 fc7e 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002868:	bf00      	nop
 800286a:	bd80      	pop	{r7, pc}
 800286c:	20000754 	.word	0x20000754
 8002870:	40003800 	.word	0x40003800

08002874 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08e      	sub	sp, #56	; 0x38
 8002878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800287a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	605a      	str	r2, [r3, #4]
 8002884:	609a      	str	r2, [r3, #8]
 8002886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002888:	f107 0320 	add.w	r3, r7, #32
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002892:	1d3b      	adds	r3, r7, #4
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	611a      	str	r2, [r3, #16]
 80028a0:	615a      	str	r2, [r3, #20]
 80028a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028a4:	4b2d      	ldr	r3, [pc, #180]	; (800295c <MX_TIM2_Init+0xe8>)
 80028a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 80028ac:	4b2b      	ldr	r3, [pc, #172]	; (800295c <MX_TIM2_Init+0xe8>)
 80028ae:	f240 12a3 	movw	r2, #419	; 0x1a3
 80028b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b4:	4b29      	ldr	r3, [pc, #164]	; (800295c <MX_TIM2_Init+0xe8>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 80028ba:	4b28      	ldr	r3, [pc, #160]	; (800295c <MX_TIM2_Init+0xe8>)
 80028bc:	2231      	movs	r2, #49	; 0x31
 80028be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028c0:	4b26      	ldr	r3, [pc, #152]	; (800295c <MX_TIM2_Init+0xe8>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028c6:	4b25      	ldr	r3, [pc, #148]	; (800295c <MX_TIM2_Init+0xe8>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80028cc:	4823      	ldr	r0, [pc, #140]	; (800295c <MX_TIM2_Init+0xe8>)
 80028ce:	f005 f831 	bl	8007934 <HAL_TIM_Base_Init>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80028d8:	f000 fc44 	bl	8003164 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028e6:	4619      	mov	r1, r3
 80028e8:	481c      	ldr	r0, [pc, #112]	; (800295c <MX_TIM2_Init+0xe8>)
 80028ea:	f005 fc8f 	bl	800820c <HAL_TIM_ConfigClockSource>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80028f4:	f000 fc36 	bl	8003164 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80028f8:	4818      	ldr	r0, [pc, #96]	; (800295c <MX_TIM2_Init+0xe8>)
 80028fa:	f005 f94f 	bl	8007b9c <HAL_TIM_PWM_Init>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002904:	f000 fc2e 	bl	8003164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002908:	2300      	movs	r3, #0
 800290a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800290c:	2300      	movs	r3, #0
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002910:	f107 0320 	add.w	r3, r7, #32
 8002914:	4619      	mov	r1, r3
 8002916:	4811      	ldr	r0, [pc, #68]	; (800295c <MX_TIM2_Init+0xe8>)
 8002918:	f006 f834 	bl	8008984 <HAL_TIMEx_MasterConfigSynchronization>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002922:	f000 fc1f 	bl	8003164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002926:	2360      	movs	r3, #96	; 0x60
 8002928:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25-1;
 800292a:	2318      	movs	r3, #24
 800292c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002932:	2300      	movs	r3, #0
 8002934:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002936:	1d3b      	adds	r3, r7, #4
 8002938:	2208      	movs	r2, #8
 800293a:	4619      	mov	r1, r3
 800293c:	4807      	ldr	r0, [pc, #28]	; (800295c <MX_TIM2_Init+0xe8>)
 800293e:	f005 fba3 	bl	8008088 <HAL_TIM_PWM_ConfigChannel>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002948:	f000 fc0c 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800294c:	4803      	ldr	r0, [pc, #12]	; (800295c <MX_TIM2_Init+0xe8>)
 800294e:	f001 f861 	bl	8003a14 <HAL_TIM_MspPostInit>

}
 8002952:	bf00      	nop
 8002954:	3738      	adds	r7, #56	; 0x38
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	200007ac 	.word	0x200007ac

08002960 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002966:	f107 0308 	add.w	r3, r7, #8
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	605a      	str	r2, [r3, #4]
 8002970:	609a      	str	r2, [r3, #8]
 8002972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002974:	463b      	mov	r3, r7
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800297c:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <MX_TIM3_Init+0x94>)
 800297e:	4a1e      	ldr	r2, [pc, #120]	; (80029f8 <MX_TIM3_Init+0x98>)
 8002980:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42000-1;
 8002982:	4b1c      	ldr	r3, [pc, #112]	; (80029f4 <MX_TIM3_Init+0x94>)
 8002984:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002988:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800298a:	4b1a      	ldr	r3, [pc, #104]	; (80029f4 <MX_TIM3_Init+0x94>)
 800298c:	2200      	movs	r2, #0
 800298e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 8002990:	4b18      	ldr	r3, [pc, #96]	; (80029f4 <MX_TIM3_Init+0x94>)
 8002992:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002996:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002998:	4b16      	ldr	r3, [pc, #88]	; (80029f4 <MX_TIM3_Init+0x94>)
 800299a:	2200      	movs	r2, #0
 800299c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800299e:	4b15      	ldr	r3, [pc, #84]	; (80029f4 <MX_TIM3_Init+0x94>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80029a4:	4813      	ldr	r0, [pc, #76]	; (80029f4 <MX_TIM3_Init+0x94>)
 80029a6:	f004 ffc5 	bl	8007934 <HAL_TIM_Base_Init>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80029b0:	f000 fbd8 	bl	8003164 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80029ba:	f107 0308 	add.w	r3, r7, #8
 80029be:	4619      	mov	r1, r3
 80029c0:	480c      	ldr	r0, [pc, #48]	; (80029f4 <MX_TIM3_Init+0x94>)
 80029c2:	f005 fc23 	bl	800820c <HAL_TIM_ConfigClockSource>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80029cc:	f000 fbca 	bl	8003164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029d0:	2300      	movs	r3, #0
 80029d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029d4:	2300      	movs	r3, #0
 80029d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029d8:	463b      	mov	r3, r7
 80029da:	4619      	mov	r1, r3
 80029dc:	4805      	ldr	r0, [pc, #20]	; (80029f4 <MX_TIM3_Init+0x94>)
 80029de:	f005 ffd1 	bl	8008984 <HAL_TIMEx_MasterConfigSynchronization>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80029e8:	f000 fbbc 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80029ec:	bf00      	nop
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	200007f4 	.word	0x200007f4
 80029f8:	40000400 	.word	0x40000400

080029fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a02:	f107 030c 	add.w	r3, r7, #12
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	605a      	str	r2, [r3, #4]
 8002a0c:	609a      	str	r2, [r3, #8]
 8002a0e:	60da      	str	r2, [r3, #12]
 8002a10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	4b34      	ldr	r3, [pc, #208]	; (8002ae8 <MX_GPIO_Init+0xec>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	4a33      	ldr	r2, [pc, #204]	; (8002ae8 <MX_GPIO_Init+0xec>)
 8002a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a20:	6313      	str	r3, [r2, #48]	; 0x30
 8002a22:	4b31      	ldr	r3, [pc, #196]	; (8002ae8 <MX_GPIO_Init+0xec>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2a:	60bb      	str	r3, [r7, #8]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	607b      	str	r3, [r7, #4]
 8002a32:	4b2d      	ldr	r3, [pc, #180]	; (8002ae8 <MX_GPIO_Init+0xec>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	4a2c      	ldr	r2, [pc, #176]	; (8002ae8 <MX_GPIO_Init+0xec>)
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3e:	4b2a      	ldr	r3, [pc, #168]	; (8002ae8 <MX_GPIO_Init+0xec>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	607b      	str	r3, [r7, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	603b      	str	r3, [r7, #0]
 8002a4e:	4b26      	ldr	r3, [pc, #152]	; (8002ae8 <MX_GPIO_Init+0xec>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	4a25      	ldr	r2, [pc, #148]	; (8002ae8 <MX_GPIO_Init+0xec>)
 8002a54:	f043 0302 	orr.w	r3, r3, #2
 8002a58:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5a:	4b23      	ldr	r3, [pc, #140]	; (8002ae8 <MX_GPIO_Init+0xec>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin, GPIO_PIN_RESET);
 8002a66:	2200      	movs	r2, #0
 8002a68:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002a6c:	481f      	ldr	r0, [pc, #124]	; (8002aec <MX_GPIO_Init+0xf0>)
 8002a6e:	f001 fc0d 	bl	800428c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|MFRC_NRST_Pin, GPIO_PIN_RESET);
 8002a72:	2200      	movs	r2, #0
 8002a74:	2122      	movs	r1, #34	; 0x22
 8002a76:	481e      	ldr	r0, [pc, #120]	; (8002af0 <MX_GPIO_Init+0xf4>)
 8002a78:	f001 fc08 	bl	800428c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002a80:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002a84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002a8a:	f107 030c 	add.w	r3, r7, #12
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4816      	ldr	r0, [pc, #88]	; (8002aec <MX_GPIO_Init+0xf0>)
 8002a92:	f001 fa5f 	bl	8003f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RST_Pin CS_OLED_Pin CS_MEM_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin;
 8002a96:	f44f 738c 	mov.w	r3, #280	; 0x118
 8002a9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa8:	f107 030c 	add.w	r3, r7, #12
 8002aac:	4619      	mov	r1, r3
 8002aae:	480f      	ldr	r0, [pc, #60]	; (8002aec <MX_GPIO_Init+0xf0>)
 8002ab0:	f001 fa50 	bl	8003f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 MFRC_NRST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|MFRC_NRST_Pin;
 8002ab4:	2322      	movs	r3, #34	; 0x22
 8002ab6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac4:	f107 030c 	add.w	r3, r7, #12
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4809      	ldr	r0, [pc, #36]	; (8002af0 <MX_GPIO_Init+0xf4>)
 8002acc:	f001 fa42 	bl	8003f54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2105      	movs	r1, #5
 8002ad4:	2007      	movs	r0, #7
 8002ad6:	f001 fa13 	bl	8003f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002ada:	2007      	movs	r0, #7
 8002adc:	f001 fa2c 	bl	8003f38 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ae0:	bf00      	nop
 8002ae2:	3720      	adds	r7, #32
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	40020000 	.word	0x40020000
 8002af0:	40020400 	.word	0x40020400

08002af4 <Start_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Init */
void Start_Init(void *argument)
{
 8002af4:	b5b0      	push	{r4, r5, r7, lr}
 8002af6:	b09c      	sub	sp, #112	; 0x70
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002afc:	f00c fade 	bl	800f0bc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	vTaskSuspend(ReadCardHandle);
 8002b00:	4b40      	ldr	r3, [pc, #256]	; (8002c04 <Start_Init+0x110>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f00a fd23 	bl	800d550 <vTaskSuspend>
    vTaskSuspend(WriteCardHandle);
 8002b0a:	4b3f      	ldr	r3, [pc, #252]	; (8002c08 <Start_Init+0x114>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f00a fd1e 	bl	800d550 <vTaskSuspend>
    vTaskSuspend(HomeHandle);
 8002b14:	4b3d      	ldr	r3, [pc, #244]	; (8002c0c <Start_Init+0x118>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f00a fd19 	bl	800d550 <vTaskSuspend>
    vTaskSuspend(CardFoundHandle);
 8002b1e:	4b3c      	ldr	r3, [pc, #240]	; (8002c10 <Start_Init+0x11c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f00a fd14 	bl	800d550 <vTaskSuspend>
    vTaskSuspend(ShowFilesHandle);
 8002b28:	4b3a      	ldr	r3, [pc, #232]	; (8002c14 <Start_Init+0x120>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f00a fd0f 	bl	800d550 <vTaskSuspend>
    vTaskSuspend(ShowFileDataHandle);
 8002b32:	4b39      	ldr	r3, [pc, #228]	; (8002c18 <Start_Init+0x124>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f00a fd0a 	bl	800d550 <vTaskSuspend>
    vTaskSuspend(CloneHandle);
 8002b3c:	4b37      	ldr	r3, [pc, #220]	; (8002c1c <Start_Init+0x128>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f00a fd05 	bl	800d550 <vTaskSuspend>

    MFRC_INIT();
 8002b46:	f7fe f94d 	bl	8000de4 <MFRC_INIT>
    MFRC_ANTOFF();
 8002b4a:	f7fe f903 	bl	8000d54 <MFRC_ANTOFF>
    OLED_INIT();
 8002b4e:	f7fe fd7d 	bl	800164c <OLED_INIT>
    OLED_Print(TC);
 8002b52:	4833      	ldr	r0, [pc, #204]	; (8002c20 <Start_Init+0x12c>)
 8002b54:	f7fe feb7 	bl	80018c6 <OLED_Print>
    MEM_INIT();
 8002b58:	f7ff fa66 	bl	8002028 <MEM_INIT>
    memory_reset();
 8002b5c:	f7ff fc0f 	bl	800237e <memory_reset>

    uint8_t fake_contents[64] = {0x04, 0x41, 0xBF, 0x72,
 8002b60:	4b30      	ldr	r3, [pc, #192]	; (8002c24 <Start_Init+0x130>)
 8002b62:	f107 0408 	add.w	r4, r7, #8
 8002b66:	461d      	mov	r5, r3
 8002b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b74:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002b78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    							0x00, 0x01, 0x00, 0x01,
    							0x00, 0x01, 0x00, 0x01,
    							0x00, 0x00, 0x00, 0x00,
    							0x00, 0x00, 0x00, 0x00,
    							0x00, 0x00, 0x00, 0x63};
    uint8_t uid[7] = {0x04, 0x41, 0xBF, 0x72, 0x1A, 0x06, 0x6C};
 8002b7c:	4a2a      	ldr	r2, [pc, #168]	; (8002c28 <Start_Init+0x134>)
 8002b7e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002b82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b86:	6018      	str	r0, [r3, #0]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	8019      	strh	r1, [r3, #0]
 8002b8c:	3302      	adds	r3, #2
 8002b8e:	0c0a      	lsrs	r2, r1, #16
 8002b90:	701a      	strb	r2, [r3, #0]

    Card fake_card = {
 8002b92:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002b96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b98:	2307      	movs	r3, #7
 8002b9a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8002b9e:	4b23      	ldr	r3, [pc, #140]	; (8002c2c <Start_Init+0x138>)
 8002ba0:	657b      	str	r3, [r7, #84]	; 0x54
 8002ba2:	4b23      	ldr	r3, [pc, #140]	; (8002c30 <Start_Init+0x13c>)
 8002ba4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8002bac:	f107 0308 	add.w	r3, r7, #8
 8002bb0:	663b      	str	r3, [r7, #96]	; 0x60
 8002bb2:	2340      	movs	r3, #64	; 0x40
 8002bb4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    	.uidsize = 7,
		.name = "fake",
		.type = "MIFARE Ultralight",
		.read_protected = 0
    };
    enter_card(&fake_card, 0);
 8002bb8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 fad5 	bl	800316e <enter_card>
    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) != 0);
 8002bc4:	bf00      	nop
 8002bc6:	2102      	movs	r1, #2
 8002bc8:	481a      	ldr	r0, [pc, #104]	; (8002c34 <Start_Init+0x140>)
 8002bca:	f001 fb47 	bl	800425c <HAL_GPIO_ReadPin>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1f8      	bne.n	8002bc6 <Start_Init+0xd2>
    osDelay(10);
 8002bd4:	200a      	movs	r0, #10
 8002bd6:	f009 fc48 	bl	800c46a <osDelay>
    uint8_t clear = NO_PRESS;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    xQueueSend(UserInputHandle, &clear, 0);
 8002be0:	4b15      	ldr	r3, [pc, #84]	; (8002c38 <Start_Init+0x144>)
 8002be2:	6818      	ldr	r0, [r3, #0]
 8002be4:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 8002be8:	2300      	movs	r3, #0
 8002bea:	2200      	movs	r2, #0
 8002bec:	f009 fef2 	bl	800c9d4 <xQueueGenericSend>
    vTaskResume(HomeHandle);
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <Start_Init+0x118>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f00a fd53 	bl	800d6a0 <vTaskResume>
    vTaskSuspend(NULL);
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f00a fca8 	bl	800d550 <vTaskSuspend>
  {
 8002c00:	e77e      	b.n	8002b00 <Start_Init+0xc>
 8002c02:	bf00      	nop
 8002c04:	20000840 	.word	0x20000840
 8002c08:	20000844 	.word	0x20000844
 8002c0c:	20000848 	.word	0x20000848
 8002c10:	2000084c 	.word	0x2000084c
 8002c14:	20000850 	.word	0x20000850
 8002c18:	20000854 	.word	0x20000854
 8002c1c:	20000858 	.word	0x20000858
 8002c20:	20000400 	.word	0x20000400
 8002c24:	080105ec 	.word	0x080105ec
 8002c28:	0801062c 	.word	0x0801062c
 8002c2c:	080105d0 	.word	0x080105d0
 8002c30:	080105d8 	.word	0x080105d8
 8002c34:	40020000 	.word	0x40020000
 8002c38:	20000860 	.word	0x20000860

08002c3c <StartReadCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadCard */
void StartReadCard(void *argument)
{
 8002c3c:	b590      	push	{r4, r7, lr}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadCard */
	Card* read_card = malloc(sizeof(Card)); //Store our read card here
 8002c44:	201c      	movs	r0, #28
 8002c46:	f00c ff4d 	bl	800fae4 <malloc>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	60bb      	str	r3, [r7, #8]
	read_card->contents = malloc(UL_MEMSIZE * sizeof(uint8_t));
 8002c4e:	68bc      	ldr	r4, [r7, #8]
 8002c50:	2040      	movs	r0, #64	; 0x40
 8002c52:	f00c ff47 	bl	800fae4 <malloc>
 8002c56:	4603      	mov	r3, r0
 8002c58:	6163      	str	r3, [r4, #20]
	read_card->uid = malloc(UL_UIDSIZE * sizeof(uint8_t));
 8002c5a:	68bc      	ldr	r4, [r7, #8]
 8002c5c:	2007      	movs	r0, #7
 8002c5e:	f00c ff41 	bl	800fae4 <malloc>
 8002c62:	4603      	mov	r3, r0
 8002c64:	6023      	str	r3, [r4, #0]
	int ranonce = 0;
 8002c66:	2300      	movs	r3, #0
 8002c68:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	MFRC_ANTON();
 8002c6a:	f7fe f839 	bl	8000ce0 <MFRC_ANTON>
	if (ranonce == 0){
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d106      	bne.n	8002c82 <StartReadCard+0x46>
		OLED_SCREEN(&SCRN_ReadCard, NORMAL);
 8002c74:	2100      	movs	r1, #0
 8002c76:	4812      	ldr	r0, [pc, #72]	; (8002cc0 <StartReadCard+0x84>)
 8002c78:	f7fe fef0 	bl	8001a5c <OLED_SCREEN>
		ranonce++;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	60fb      	str	r3, [r7, #12]
	}
	if(UL_readcard(read_card) == PCD_OK){
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7fe fb0d 	bl	80012a4 <UL_readcard>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2bcc      	cmp	r3, #204	; 0xcc
 8002c8e:	d1ec      	bne.n	8002c6a <StartReadCard+0x2e>
			BUZZ();
 8002c90:	f7ff fbc8 	bl	8002424 <BUZZ>
			MFRC_ANTOFF();
 8002c94:	f7fe f85e 	bl	8000d54 <MFRC_ANTOFF>
			xQueueSend(UidtoFoundHandle,&read_card,0);
 8002c98:	4b0a      	ldr	r3, [pc, #40]	; (8002cc4 <StartReadCard+0x88>)
 8002c9a:	6818      	ldr	r0, [r3, #0]
 8002c9c:	f107 0108 	add.w	r1, r7, #8
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f009 fe96 	bl	800c9d4 <xQueueGenericSend>
			vTaskResume(CardFoundHandle);
 8002ca8:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <StartReadCard+0x8c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f00a fcf7 	bl	800d6a0 <vTaskResume>
			ranonce = 0;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
			vTaskSuspend(NULL);
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	f00a fc4a 	bl	800d550 <vTaskSuspend>
	MFRC_ANTON();
 8002cbc:	e7d5      	b.n	8002c6a <StartReadCard+0x2e>
 8002cbe:	bf00      	nop
 8002cc0:	08010bec 	.word	0x08010bec
 8002cc4:	2000085c 	.word	0x2000085c
 8002cc8:	2000084c 	.word	0x2000084c

08002ccc <StartWriteCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWriteCard */
void StartWriteCard(void *argument)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWriteCard */
	uint8_t file_select_count = 0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	75fb      	strb	r3, [r7, #23]
	int ranonce = 0;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	61fb      	str	r3, [r7, #28]
	Button_StateTypeDef button_state;
	Card* towrite = NULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	61bb      	str	r3, [r7, #24]
  /* Infinite loop */
  for(;;)
  {
	  if (ranonce == 0){
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <StartWriteCard+0x28>
	  	OLED_SCREEN(&SCRN_WriteCard, NORMAL);
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	481e      	ldr	r0, [pc, #120]	; (8002d64 <StartWriteCard+0x98>)
 8002cea:	f7fe feb7 	bl	8001a5c <OLED_SCREEN>
	  	ranonce++;
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	61fb      	str	r3, [r7, #28]

	  }

	  if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8002cf4:	4b1c      	ldr	r3, [pc, #112]	; (8002d68 <StartWriteCard+0x9c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f107 010f 	add.w	r1, r7, #15
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f00a f802 	bl	800cd08 <xQueueReceive>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d1ea      	bne.n	8002ce0 <StartWriteCard+0x14>
		  if (button_state == SHORT_PRESS) {
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d11c      	bne.n	8002d4a <StartWriteCard+0x7e>
			  if (entry_present(file_select_count) == RFS_OK) {
 8002d10:	7dfb      	ldrb	r3, [r7, #23]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 fcae 	bl	8003676 <entry_present>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1df      	bne.n	8002ce0 <StartWriteCard+0x14>
				  towrite = read_card_entry(file_select_count);
 8002d20:	7dfb      	ldrb	r3, [r7, #23]
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	4618      	mov	r0, r3
 8002d26:	f000 fad6 	bl	80032d6 <read_card_entry>
 8002d2a:	61b8      	str	r0, [r7, #24]
				  char* file_name = get_file_name(file_select_count);
 8002d2c:	7dfb      	ldrb	r3, [r7, #23]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 fcbd 	bl	80036b0 <get_file_name>
 8002d36:	6138      	str	r0, [r7, #16]
				  OLED_SCRNREF(&SCRN_WriteCard, WRITE_SRC_LOC, file_name);
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	2102      	movs	r1, #2
 8002d3c:	4809      	ldr	r0, [pc, #36]	; (8002d64 <StartWriteCard+0x98>)
 8002d3e:	f7fe fec6 	bl	8001ace <OLED_SCRNREF>
				  free(file_name);
 8002d42:	6938      	ldr	r0, [r7, #16]
 8002d44:	f00c fed6 	bl	800faf4 <free>
 8002d48:	e7ca      	b.n	8002ce0 <StartWriteCard+0x14>
			  }

		  } else if ((button_state == LONG_PRESS) && (towrite != NULL)) {
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d1c7      	bne.n	8002ce0 <StartWriteCard+0x14>
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0c4      	beq.n	8002ce0 <StartWriteCard+0x14>
			  	ranonce= 0;
 8002d56:	2300      	movs	r3, #0
 8002d58:	61fb      	str	r3, [r7, #28]
			  	write_card(towrite);
 8002d5a:	69b8      	ldr	r0, [r7, #24]
 8002d5c:	f7ff fb74 	bl	8002448 <write_card>
	  if (ranonce == 0){
 8002d60:	e7be      	b.n	8002ce0 <StartWriteCard+0x14>
 8002d62:	bf00      	nop
 8002d64:	08010c14 	.word	0x08010c14
 8002d68:	20000860 	.word	0x20000860

08002d6c <StartHome>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHome */
void StartHome(void *argument)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHome */
	uint8_t select_index = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	72fb      	strb	r3, [r7, #11]
	int ranonce = 0;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60fb      	str	r3, [r7, #12]
	Button_StateTypeDef button_state;
  /* Infinite loop */
  for(;;)
  {
	  if (ranonce == 0) {
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10c      	bne.n	8002d9c <StartHome+0x30>
		  OLED_SCREEN(&SCRN_Home, NORMAL);
 8002d82:	2100      	movs	r1, #0
 8002d84:	4828      	ldr	r0, [pc, #160]	; (8002e28 <StartHome+0xbc>)
 8002d86:	f7fe fe69 	bl	8001a5c <OLED_SCREEN>
		  OLED_SELECT(&SCRN_Home, select_index, OLED_RESTORE);
 8002d8a:	7afb      	ldrb	r3, [r7, #11]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4825      	ldr	r0, [pc, #148]	; (8002e28 <StartHome+0xbc>)
 8002d92:	f7fe fecd 	bl	8001b30 <OLED_SELECT>
		  ranonce++;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	60fb      	str	r3, [r7, #12]
	  }

	  if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8002d9c:	4b23      	ldr	r3, [pc, #140]	; (8002e2c <StartHome+0xc0>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f107 010a 	add.w	r1, r7, #10
 8002da4:	2200      	movs	r2, #0
 8002da6:	4618      	mov	r0, r3
 8002da8:	f009 ffae 	bl	800cd08 <xQueueReceive>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d1e4      	bne.n	8002d7c <StartHome+0x10>
		  if (button_state == SHORT_PRESS) {
 8002db2:	7abb      	ldrb	r3, [r7, #10]
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d107      	bne.n	8002dc8 <StartHome+0x5c>
			  oled_move_selection(&SCRN_Home, &select_index, OLED_RESTORE);
 8002db8:	f107 030b 	add.w	r3, r7, #11
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4819      	ldr	r0, [pc, #100]	; (8002e28 <StartHome+0xbc>)
 8002dc2:	f7ff f821 	bl	8001e08 <oled_move_selection>
 8002dc6:	e7d9      	b.n	8002d7c <StartHome+0x10>
		  } else if (button_state == LONG_PRESS) {
 8002dc8:	7abb      	ldrb	r3, [r7, #10]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d1d6      	bne.n	8002d7c <StartHome+0x10>
			  switch(select_index) {
 8002dce:	7afb      	ldrb	r3, [r7, #11]
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d823      	bhi.n	8002e1c <StartHome+0xb0>
 8002dd4:	a201      	add	r2, pc, #4	; (adr r2, 8002ddc <StartHome+0x70>)
 8002dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dda:	bf00      	nop
 8002ddc:	08002ded 	.word	0x08002ded
 8002de0:	08002df9 	.word	0x08002df9
 8002de4:	08002e05 	.word	0x08002e05
 8002de8:	08002e11 	.word	0x08002e11
			  	  case 0:
			  		  vTaskResume(ReadCardHandle);
 8002dec:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <StartHome+0xc4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f00a fc55 	bl	800d6a0 <vTaskResume>
			  		  break;
 8002df6:	e011      	b.n	8002e1c <StartHome+0xb0>
			  	  case 1:
			  		  vTaskResume(WriteCardHandle);
 8002df8:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <StartHome+0xc8>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f00a fc4f 	bl	800d6a0 <vTaskResume>
			  		  break;
 8002e02:	e00b      	b.n	8002e1c <StartHome+0xb0>
			  	  case 2:
			  		  vTaskResume(ShowFilesHandle);
 8002e04:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <StartHome+0xcc>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f00a fc49 	bl	800d6a0 <vTaskResume>
			  		  break;
 8002e0e:	e005      	b.n	8002e1c <StartHome+0xb0>
			  	  case 3:
			  		  vTaskResume(CloneHandle);
 8002e10:	4b0a      	ldr	r3, [pc, #40]	; (8002e3c <StartHome+0xd0>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f00a fc43 	bl	800d6a0 <vTaskResume>
			  		  break;
 8002e1a:	bf00      	nop
			  }
			  ranonce = 0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60fb      	str	r3, [r7, #12]
			  vTaskSuspend(NULL);
 8002e20:	2000      	movs	r0, #0
 8002e22:	f00a fb95 	bl	800d550 <vTaskSuspend>
	  if (ranonce == 0) {
 8002e26:	e7a9      	b.n	8002d7c <StartHome+0x10>
 8002e28:	08010bd8 	.word	0x08010bd8
 8002e2c:	20000860 	.word	0x20000860
 8002e30:	20000840 	.word	0x20000840
 8002e34:	20000844 	.word	0x20000844
 8002e38:	20000850 	.word	0x20000850
 8002e3c:	20000858 	.word	0x20000858

08002e40 <CardFoundStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CardFoundStart */
void CardFoundStart(void *argument)
{
 8002e40:	b590      	push	{r4, r7, lr}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CardFoundStart */
	uint8_t select_index = 0;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	73fb      	strb	r3, [r7, #15]
	int ranonce = 0;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
	Card* read_card;
  /* Infinite loop */
  for(;;)
  {

	if (ranonce == 0) {
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d130      	bne.n	8002eb8 <CardFoundStart+0x78>
		while(xQueueReceive(UidtoFoundHandle, &read_card, 0) != pdTRUE);
 8002e56:	bf00      	nop
 8002e58:	4b2f      	ldr	r3, [pc, #188]	; (8002f18 <CardFoundStart+0xd8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f107 0108 	add.w	r1, r7, #8
 8002e60:	2200      	movs	r2, #0
 8002e62:	4618      	mov	r0, r3
 8002e64:	f009 ff50 	bl	800cd08 <xQueueReceive>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d1f4      	bne.n	8002e58 <CardFoundStart+0x18>
		char* uid_str = uid_tostring(read_card->uid, read_card->uidsize);
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	791b      	ldrb	r3, [r3, #4]
 8002e76:	4619      	mov	r1, r3
 8002e78:	4610      	mov	r0, r2
 8002e7a:	f7fe fa89 	bl	8001390 <uid_tostring>
 8002e7e:	6138      	str	r0, [r7, #16]
		OLED_SCREEN(&SCRN_CardFound, NORMAL);
 8002e80:	2100      	movs	r1, #0
 8002e82:	4826      	ldr	r0, [pc, #152]	; (8002f1c <CardFoundStart+0xdc>)
 8002e84:	f7fe fdea 	bl	8001a5c <OLED_SCREEN>
		OLED_SCRNREF(&SCRN_CardFound, FOUND_UID_LOC, uid_str);
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	4823      	ldr	r0, [pc, #140]	; (8002f1c <CardFoundStart+0xdc>)
 8002e8e:	f7fe fe1e 	bl	8001ace <OLED_SCRNREF>
		OLED_SCRNREF(&SCRN_CardFound, FOUND_CARDTYPE_LOC, read_card->type);
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	461a      	mov	r2, r3
 8002e98:	2102      	movs	r1, #2
 8002e9a:	4820      	ldr	r0, [pc, #128]	; (8002f1c <CardFoundStart+0xdc>)
 8002e9c:	f7fe fe17 	bl	8001ace <OLED_SCRNREF>
		OLED_SELECT(&SCRN_CardFound, select_index, OLED_NORESTORE);
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	481d      	ldr	r0, [pc, #116]	; (8002f1c <CardFoundStart+0xdc>)
 8002ea8:	f7fe fe42 	bl	8001b30 <OLED_SELECT>
		ranonce++;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	617b      	str	r3, [r7, #20]
		free(uid_str);
 8002eb2:	6938      	ldr	r0, [r7, #16]
 8002eb4:	f00c fe1e 	bl	800faf4 <free>
	}

 	if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8002eb8:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <CardFoundStart+0xe0>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f107 010e 	add.w	r1, r7, #14
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f009 ff20 	bl	800cd08 <xQueueReceive>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d1c0      	bne.n	8002e50 <CardFoundStart+0x10>
 		if (button_state == SHORT_PRESS) {
 8002ece:	7bbb      	ldrb	r3, [r7, #14]
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d107      	bne.n	8002ee4 <CardFoundStart+0xa4>
 			oled_move_selection(&SCRN_CardFound, &select_index, OLED_NORESTORE);
 8002ed4:	f107 030f 	add.w	r3, r7, #15
 8002ed8:	2200      	movs	r2, #0
 8002eda:	4619      	mov	r1, r3
 8002edc:	480f      	ldr	r0, [pc, #60]	; (8002f1c <CardFoundStart+0xdc>)
 8002ede:	f7fe ff93 	bl	8001e08 <oled_move_selection>
 8002ee2:	e7b5      	b.n	8002e50 <CardFoundStart+0x10>
 		} else if (button_state == LONG_PRESS) {
 8002ee4:	7bbb      	ldrb	r3, [r7, #14]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d1b2      	bne.n	8002e50 <CardFoundStart+0x10>
 			if (select_index == 0) {
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d108      	bne.n	8002f02 <CardFoundStart+0xc2>
 				enter_card(read_card, mem_find_free_block());
 8002ef0:	68bc      	ldr	r4, [r7, #8]
 8002ef2:	f7ff fa1d 	bl	8002330 <mem_find_free_block>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	4619      	mov	r1, r3
 8002efc:	4620      	mov	r0, r4
 8002efe:	f000 f936 	bl	800316e <enter_card>
 			 }
 			vTaskResume(HomeHandle);
 8002f02:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <CardFoundStart+0xe4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f00a fbca 	bl	800d6a0 <vTaskResume>
 			ranonce = 0;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]
 			vTaskSuspend(NULL);
 8002f10:	2000      	movs	r0, #0
 8002f12:	f00a fb1d 	bl	800d550 <vTaskSuspend>
	if (ranonce == 0) {
 8002f16:	e79b      	b.n	8002e50 <CardFoundStart+0x10>
 8002f18:	2000085c 	.word	0x2000085c
 8002f1c:	08010c00 	.word	0x08010c00
 8002f20:	20000860 	.word	0x20000860
 8002f24:	20000848 	.word	0x20000848

08002f28 <StartShowFiles>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartShowFiles */
void StartShowFiles(void *argument)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartShowFiles */
	uint8_t select_index = 0;
 8002f30:	2300      	movs	r3, #0
 8002f32:	72fb      	strb	r3, [r7, #11]
	int ranonce = 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]
	Button_StateTypeDef button_state;
	/* Infinite loop */
  for(;;)
  {

	  if (ranonce == 0) {
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d110      	bne.n	8002f60 <StartShowFiles+0x38>
		  OLED_SCREEN(&SCRN_ShowFiles, NORMAL);
 8002f3e:	2100      	movs	r1, #0
 8002f40:	4827      	ldr	r0, [pc, #156]	; (8002fe0 <StartShowFiles+0xb8>)
 8002f42:	f7fe fd8b 	bl	8001a5c <OLED_SCREEN>
		  OLED_SELECT(&SCRN_ShowFiles, select_index, OLED_RESTORE);
 8002f46:	7afb      	ldrb	r3, [r7, #11]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4824      	ldr	r0, [pc, #144]	; (8002fe0 <StartShowFiles+0xb8>)
 8002f4e:	f7fe fdef 	bl	8001b30 <OLED_SELECT>
		  OLED_display_files(&SCRN_ShowFiles, 0);
 8002f52:	2100      	movs	r1, #0
 8002f54:	4822      	ldr	r0, [pc, #136]	; (8002fe0 <StartShowFiles+0xb8>)
 8002f56:	f7fe fe61 	bl	8001c1c <OLED_display_files>
		  ranonce++;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	60fb      	str	r3, [r7, #12]
	  }

	  if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8002f60:	4b20      	ldr	r3, [pc, #128]	; (8002fe4 <StartShowFiles+0xbc>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f107 010a 	add.w	r1, r7, #10
 8002f68:	2200      	movs	r2, #0
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f009 fecc 	bl	800cd08 <xQueueReceive>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d1e0      	bne.n	8002f38 <StartShowFiles+0x10>
		  if (button_state == SHORT_PRESS) {
 8002f76:	7abb      	ldrb	r3, [r7, #10]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d107      	bne.n	8002f8c <StartShowFiles+0x64>

			  oled_move_selection(&SCRN_ShowFiles, &select_index, OLED_RESTORE);
 8002f7c:	f107 030b 	add.w	r3, r7, #11
 8002f80:	2201      	movs	r2, #1
 8002f82:	4619      	mov	r1, r3
 8002f84:	4816      	ldr	r0, [pc, #88]	; (8002fe0 <StartShowFiles+0xb8>)
 8002f86:	f7fe ff3f 	bl	8001e08 <oled_move_selection>
 8002f8a:	e7d5      	b.n	8002f38 <StartShowFiles+0x10>

		  } else if (button_state == LONG_PRESS) {
 8002f8c:	7abb      	ldrb	r3, [r7, #10]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d1d2      	bne.n	8002f38 <StartShowFiles+0x10>

			  if (select_index == SHOWFILES_EXIT_LOC) {
 8002f92:	7afb      	ldrb	r3, [r7, #11]
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d105      	bne.n	8002fa4 <StartShowFiles+0x7c>
				  vTaskResume(HomeHandle);
 8002f98:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <StartShowFiles+0xc0>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f00a fb7f 	bl	800d6a0 <vTaskResume>
 8002fa2:	e017      	b.n	8002fd4 <StartShowFiles+0xac>

			  } else if ((entry_present(select_index) == RFS_OK)) {
 8002fa4:	7afb      	ldrb	r3, [r7, #11]
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 fb64 	bl	8003676 <entry_present>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10f      	bne.n	8002fd4 <StartShowFiles+0xac>
				  uint16_t entry = select_index;
 8002fb4:	7afb      	ldrb	r3, [r7, #11]
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	813b      	strh	r3, [r7, #8]
				  xQueueSend(FileEntryHandle, &entry, 0);
 8002fba:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <StartShowFiles+0xc4>)
 8002fbc:	6818      	ldr	r0, [r3, #0]
 8002fbe:	f107 0108 	add.w	r1, r7, #8
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f009 fd05 	bl	800c9d4 <xQueueGenericSend>
				  vTaskResume(ShowFileDataHandle);
 8002fca:	4b09      	ldr	r3, [pc, #36]	; (8002ff0 <StartShowFiles+0xc8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f00a fb66 	bl	800d6a0 <vTaskResume>

			  }
			  ranonce = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60fb      	str	r3, [r7, #12]
			  vTaskSuspend(NULL);
 8002fd8:	2000      	movs	r0, #0
 8002fda:	f00a fab9 	bl	800d550 <vTaskSuspend>
	  if (ranonce == 0) {
 8002fde:	e7ab      	b.n	8002f38 <StartShowFiles+0x10>
 8002fe0:	08010c28 	.word	0x08010c28
 8002fe4:	20000860 	.word	0x20000860
 8002fe8:	20000848 	.word	0x20000848
 8002fec:	20000864 	.word	0x20000864
 8002ff0:	20000854 	.word	0x20000854

08002ff4 <StartShowFileData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartShowFileData */
void StartShowFileData(void *argument)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartShowFileData */
	uint8_t select_index = 0;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	72fb      	strb	r3, [r7, #11]
	int ranonce = 0;
 8003000:	2300      	movs	r3, #0
 8003002:	60fb      	str	r3, [r7, #12]
	uint16_t entry_to_show;
  /* Infinite loop */
  for(;;)
  {

    if (ranonce == 0) {
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d112      	bne.n	8003030 <StartShowFileData+0x3c>
    	while(xQueueReceive(FileEntryHandle, &entry_to_show, 0) != pdTRUE);
 800300a:	bf00      	nop
 800300c:	4b1e      	ldr	r3, [pc, #120]	; (8003088 <StartShowFileData+0x94>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f107 0108 	add.w	r1, r7, #8
 8003014:	2200      	movs	r2, #0
 8003016:	4618      	mov	r0, r3
 8003018:	f009 fe76 	bl	800cd08 <xQueueReceive>
 800301c:	4603      	mov	r3, r0
 800301e:	2b01      	cmp	r3, #1
 8003020:	d1f4      	bne.n	800300c <StartShowFileData+0x18>
    	oled_show_file(entry_to_show);
 8003022:	893b      	ldrh	r3, [r7, #8]
 8003024:	4618      	mov	r0, r3
 8003026:	f7fe feaf 	bl	8001d88 <oled_show_file>
    	ranonce++;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	3301      	adds	r3, #1
 800302e:	60fb      	str	r3, [r7, #12]
    }

    if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8003030:	4b16      	ldr	r3, [pc, #88]	; (800308c <StartShowFileData+0x98>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f107 010a 	add.w	r1, r7, #10
 8003038:	2200      	movs	r2, #0
 800303a:	4618      	mov	r0, r3
 800303c:	f009 fe64 	bl	800cd08 <xQueueReceive>
 8003040:	4603      	mov	r3, r0
 8003042:	2b01      	cmp	r3, #1
 8003044:	d1de      	bne.n	8003004 <StartShowFileData+0x10>
    	if (button_state == SHORT_PRESS) {
 8003046:	7abb      	ldrb	r3, [r7, #10]
 8003048:	2b02      	cmp	r3, #2
 800304a:	d107      	bne.n	800305c <StartShowFileData+0x68>
    		oled_move_selection(&SCRN_FileData, &select_index, OLED_NORESTORE);
 800304c:	f107 030b 	add.w	r3, r7, #11
 8003050:	2200      	movs	r2, #0
 8003052:	4619      	mov	r1, r3
 8003054:	480e      	ldr	r0, [pc, #56]	; (8003090 <StartShowFileData+0x9c>)
 8003056:	f7fe fed7 	bl	8001e08 <oled_move_selection>
 800305a:	e7d3      	b.n	8003004 <StartShowFileData+0x10>
    	} else if (button_state == LONG_PRESS) {
 800305c:	7abb      	ldrb	r3, [r7, #10]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d1d0      	bne.n	8003004 <StartShowFileData+0x10>
    		if (select_index == SHOWFILE_DELETE_LOC) {
 8003062:	7afb      	ldrb	r3, [r7, #11]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d103      	bne.n	8003070 <StartShowFileData+0x7c>
    			remove_card(entry_to_show);
 8003068:	893b      	ldrh	r3, [r7, #8]
 800306a:	4618      	mov	r0, r3
 800306c:	f000 fb4d 	bl	800370a <remove_card>
    		}
    		vTaskResume(ShowFilesHandle);
 8003070:	4b08      	ldr	r3, [pc, #32]	; (8003094 <StartShowFileData+0xa0>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f00a fb13 	bl	800d6a0 <vTaskResume>
    		ranonce = 0;
 800307a:	2300      	movs	r3, #0
 800307c:	60fb      	str	r3, [r7, #12]
    		vTaskSuspend(NULL);
 800307e:	2000      	movs	r0, #0
 8003080:	f00a fa66 	bl	800d550 <vTaskSuspend>
    if (ranonce == 0) {
 8003084:	e7be      	b.n	8003004 <StartShowFileData+0x10>
 8003086:	bf00      	nop
 8003088:	20000864 	.word	0x20000864
 800308c:	20000860 	.word	0x20000860
 8003090:	08010c3c 	.word	0x08010c3c
 8003094:	20000850 	.word	0x20000850

08003098 <StartClone>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartClone */
void StartClone(void *argument)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartClone */
	int ranonce = 0;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]
	Card* read_card = malloc(sizeof(Card)); //Store our read card here
 80030a4:	201c      	movs	r0, #28
 80030a6:	f00c fd1d 	bl	800fae4 <malloc>
 80030aa:	4603      	mov	r3, r0
 80030ac:	60bb      	str	r3, [r7, #8]
	read_card->contents = malloc(UL_MEMSIZE * sizeof(uint8_t));
 80030ae:	2040      	movs	r0, #64	; 0x40
 80030b0:	f00c fd18 	bl	800fae4 <malloc>
 80030b4:	4603      	mov	r3, r0
 80030b6:	461a      	mov	r2, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	615a      	str	r2, [r3, #20]
	read_card->uid = malloc(UL_UIDSIZE * sizeof(uint8_t));
 80030bc:	2007      	movs	r0, #7
 80030be:	f00c fd11 	bl	800fae4 <malloc>
 80030c2:	4603      	mov	r3, r0
 80030c4:	461a      	mov	r2, r3
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	MFRC_ANTON();
 80030ca:	f7fd fe09 	bl	8000ce0 <MFRC_ANTON>
    if (ranonce == 0) {
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d106      	bne.n	80030e2 <StartClone+0x4a>
    	OLED_SCREEN(&SCRN_Clone, NORMAL);
 80030d4:	2100      	movs	r1, #0
 80030d6:	4817      	ldr	r0, [pc, #92]	; (8003134 <StartClone+0x9c>)
 80030d8:	f7fe fcc0 	bl	8001a5c <OLED_SCREEN>
    	ranonce++;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	3301      	adds	r3, #1
 80030e0:	60fb      	str	r3, [r7, #12]
    }

    if (UL_readcard(read_card) == PCD_OK) {
 80030e2:	68b8      	ldr	r0, [r7, #8]
 80030e4:	f7fe f8de 	bl	80012a4 <UL_readcard>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2bcc      	cmp	r3, #204	; 0xcc
 80030ec:	d1ed      	bne.n	80030ca <StartClone+0x32>
    	MFRC_HALTA(); //De-select card
 80030ee:	f7fd ff0d 	bl	8000f0c <MFRC_HALTA>
    	BUZZ();
 80030f2:	f7ff f997 	bl	8002424 <BUZZ>
    	OLED_Clear();
 80030f6:	f7fe f9ea 	bl	80014ce <OLED_Clear>
    	OLED_PrintCent(2, "PLACE CARD YOU WISH", NORMAL);
 80030fa:	2200      	movs	r2, #0
 80030fc:	490e      	ldr	r1, [pc, #56]	; (8003138 <StartClone+0xa0>)
 80030fe:	2002      	movs	r0, #2
 8003100:	f7fe fbbd 	bl	800187e <OLED_PrintCent>
    	OLED_PrintCent(4, "TO COPY TO", NORMAL);
 8003104:	2200      	movs	r2, #0
 8003106:	490d      	ldr	r1, [pc, #52]	; (800313c <StartClone+0xa4>)
 8003108:	2004      	movs	r0, #4
 800310a:	f7fe fbb8 	bl	800187e <OLED_PrintCent>
    	while(PICC_CHECK() == PCD_OK); //Hang until read card is removed
 800310e:	bf00      	nop
 8003110:	f7fe f80a 	bl	8001128 <PICC_CHECK>
 8003114:	4603      	mov	r3, r0
 8003116:	2bcc      	cmp	r3, #204	; 0xcc
 8003118:	d0fa      	beq.n	8003110 <StartClone+0x78>
    	while(PICC_CHECK() != PCD_OK); //Hang until new card is placed
 800311a:	bf00      	nop
 800311c:	f7fe f804 	bl	8001128 <PICC_CHECK>
 8003120:	4603      	mov	r3, r0
 8003122:	2bcc      	cmp	r3, #204	; 0xcc
 8003124:	d1fa      	bne.n	800311c <StartClone+0x84>
    	ranonce = 0;
 8003126:	2300      	movs	r3, #0
 8003128:	60fb      	str	r3, [r7, #12]
    	write_card(read_card);
 800312a:	68b8      	ldr	r0, [r7, #8]
 800312c:	f7ff f98c 	bl	8002448 <write_card>
	MFRC_ANTON();
 8003130:	e7cb      	b.n	80030ca <StartClone+0x32>
 8003132:	bf00      	nop
 8003134:	08010c50 	.word	0x08010c50
 8003138:	08010634 	.word	0x08010634
 800313c:	08010648 	.word	0x08010648

08003140 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a04      	ldr	r2, [pc, #16]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d101      	bne.n	8003156 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003152:	f000 fdd9 	bl	8003d08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40000c00 	.word	0x40000c00

08003164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003168:	b672      	cpsid	i
}
 800316a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800316c:	e7fe      	b.n	800316c <Error_Handler+0x8>

0800316e <enter_card>:
 *
 * @param card - Card to store
 * @param entry - Entry (Block number) to store card
 * @return RFS_OK if card was successfully stored
 * */
RFS_StatusTypeDef enter_card(Card* card, uint16_t entry) {
 800316e:	b5b0      	push	{r4, r5, r7, lr}
 8003170:	b084      	sub	sp, #16
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
 8003176:	460b      	mov	r3, r1
 8003178:	807b      	strh	r3, [r7, #2]
	uint16_t block_startaddr = entry * BLOCK_PAGECOUNT;
 800317a:	887b      	ldrh	r3, [r7, #2]
 800317c:	019b      	lsls	r3, r3, #6
 800317e:	81fb      	strh	r3, [r7, #14]
	block_erase(entry); //Erase entire block ready for new data
 8003180:	887b      	ldrh	r3, [r7, #2]
 8003182:	4618      	mov	r0, r3
 8003184:	f7fe ff14 	bl	8001fb0 <block_erase>
	enter_metadata(card, entry);
 8003188:	887b      	ldrh	r3, [r7, #2]
 800318a:	4619      	mov	r1, r3
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f83f 	bl	8003210 <enter_metadata>

	if (MEM_WRITE(block_startaddr + NAMEPAGE_OFFSET, 0x0000, (uint8_t*)card->name, strlen(card->name)) != HAL_OK) {
 8003192:	89fb      	ldrh	r3, [r7, #14]
 8003194:	3301      	adds	r3, #1
 8003196:	b29c      	uxth	r4, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689d      	ldr	r5, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7fd f81d 	bl	80001e0 <strlen>
 80031a6:	4603      	mov	r3, r0
 80031a8:	462a      	mov	r2, r5
 80031aa:	2100      	movs	r1, #0
 80031ac:	4620      	mov	r0, r4
 80031ae:	f7fe ff57 	bl	8002060 <MEM_WRITE>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <enter_card+0x4e>
		return RFS_WRITE_ERROR;
 80031b8:	2304      	movs	r3, #4
 80031ba:	e025      	b.n	8003208 <enter_card+0x9a>
	}
	if (MEM_WRITE(block_startaddr + NAMEPAGE_OFFSET, 0x0000 + strlen(card->name),card->uid ,card->uidsize) != HAL_OK) {
 80031bc:	89fb      	ldrh	r3, [r7, #14]
 80031be:	3301      	adds	r3, #1
 80031c0:	b29c      	uxth	r4, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fd f80a 	bl	80001e0 <strlen>
 80031cc:	4603      	mov	r3, r0
 80031ce:	b299      	uxth	r1, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	791b      	ldrb	r3, [r3, #4]
 80031d8:	4620      	mov	r0, r4
 80031da:	f7fe ff41 	bl	8002060 <MEM_WRITE>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <enter_card+0x7a>
		return RFS_WRITE_ERROR;
 80031e4:	2304      	movs	r3, #4
 80031e6:	e00f      	b.n	8003208 <enter_card+0x9a>
	}
	if (MEM_WRITE(block_startaddr + DATAPAGE_OFFSET, 0x0000, card->contents, card->contents_size) != HAL_OK) {
 80031e8:	89fb      	ldrh	r3, [r7, #14]
 80031ea:	3302      	adds	r3, #2
 80031ec:	b298      	uxth	r0, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695a      	ldr	r2, [r3, #20]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	8b1b      	ldrh	r3, [r3, #24]
 80031f6:	2100      	movs	r1, #0
 80031f8:	f7fe ff32 	bl	8002060 <MEM_WRITE>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <enter_card+0x98>
		return RFS_WRITE_ERROR;
 8003202:	2304      	movs	r3, #4
 8003204:	e000      	b.n	8003208 <enter_card+0x9a>
	}

	return RFS_OK;
 8003206:	2300      	movs	r3, #0

}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bdb0      	pop	{r4, r5, r7, pc}

08003210 <enter_metadata>:
 * Write the card metadata into a block
 *
 * @param card - Card to write
 * @param block_num - Block number
 * */
RFS_StatusTypeDef enter_metadata(Card* card, uint16_t block_num) {
 8003210:	b590      	push	{r4, r7, lr}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	807b      	strh	r3, [r7, #2]
	uint8_t card_size = card->contents_size; //Card contents is uint8_t
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	8b1b      	ldrh	r3, [r3, #24]
 8003220:	73fb      	strb	r3, [r7, #15]
	uint8_t read_protected = card->read_protected;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	7c1b      	ldrb	r3, [r3, #16]
 8003226:	73bb      	strb	r3, [r7, #14]
	uint8_t uid_size = card->uidsize;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	791b      	ldrb	r3, [r3, #4]
 800322c:	737b      	strb	r3, [r7, #13]
	uint8_t metasize = sizeof(card_size) + sizeof(uid_size) + sizeof(read_protected) + strlen(card->type);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	4618      	mov	r0, r3
 8003234:	f7fc ffd4 	bl	80001e0 <strlen>
 8003238:	4603      	mov	r3, r0
 800323a:	b2db      	uxtb	r3, r3
 800323c:	3303      	adds	r3, #3
 800323e:	733b      	strb	r3, [r7, #12]
	uint8_t* metadata = malloc(metasize);
 8003240:	7b3b      	ldrb	r3, [r7, #12]
 8003242:	4618      	mov	r0, r3
 8003244:	f00c fc4e 	bl	800fae4 <malloc>
 8003248:	4603      	mov	r3, r0
 800324a:	60bb      	str	r3, [r7, #8]

	memcpy(metadata, (uint8_t*) card->type, strlen(card->type));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68dc      	ldr	r4, [r3, #12]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	4618      	mov	r0, r3
 8003256:	f7fc ffc3 	bl	80001e0 <strlen>
 800325a:	4603      	mov	r3, r0
 800325c:	461a      	mov	r2, r3
 800325e:	4621      	mov	r1, r4
 8003260:	68b8      	ldr	r0, [r7, #8]
 8003262:	f00c fc4f 	bl	800fb04 <memcpy>
	metadata[strlen(card->type) + 0] = card_size;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	4618      	mov	r0, r3
 800326c:	f7fc ffb8 	bl	80001e0 <strlen>
 8003270:	4602      	mov	r2, r0
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	4413      	add	r3, r2
 8003276:	7bfa      	ldrb	r2, [r7, #15]
 8003278:	701a      	strb	r2, [r3, #0]
	metadata[strlen(card->type) + 1] = uid_size;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	4618      	mov	r0, r3
 8003280:	f7fc ffae 	bl	80001e0 <strlen>
 8003284:	4603      	mov	r3, r0
 8003286:	3301      	adds	r3, #1
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	4413      	add	r3, r2
 800328c:	7b7a      	ldrb	r2, [r7, #13]
 800328e:	701a      	strb	r2, [r3, #0]
	metadata[strlen(card->type) + 2] = read_protected;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	4618      	mov	r0, r3
 8003296:	f7fc ffa3 	bl	80001e0 <strlen>
 800329a:	4603      	mov	r3, r0
 800329c:	3302      	adds	r3, #2
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	4413      	add	r3, r2
 80032a2:	7bba      	ldrb	r2, [r7, #14]
 80032a4:	701a      	strb	r2, [r3, #0]

	if (MEM_WRITE(block_num * BLOCK_PAGECOUNT, 0x0000, metadata, metasize) != HAL_OK) {
 80032a6:	887b      	ldrh	r3, [r7, #2]
 80032a8:	019b      	lsls	r3, r3, #6
 80032aa:	b298      	uxth	r0, r3
 80032ac:	7b3b      	ldrb	r3, [r7, #12]
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	2100      	movs	r1, #0
 80032b2:	f7fe fed5 	bl	8002060 <MEM_WRITE>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d004      	beq.n	80032c6 <enter_metadata+0xb6>
		free(metadata);
 80032bc:	68b8      	ldr	r0, [r7, #8]
 80032be:	f00c fc19 	bl	800faf4 <free>
		return RFS_WRITE_ERROR;
 80032c2:	2304      	movs	r3, #4
 80032c4:	e003      	b.n	80032ce <enter_metadata+0xbe>
	}
	free(metadata);
 80032c6:	68b8      	ldr	r0, [r7, #8]
 80032c8:	f00c fc14 	bl	800faf4 <free>
	return RFS_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd90      	pop	{r4, r7, pc}

080032d6 <read_card_entry>:
 * Get card from entry number
 *
 * @param entry - Entry number of card
 * @return a new Card instance with read data
 * */
Card* read_card_entry(uint16_t entry) {
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	4603      	mov	r3, r0
 80032de:	80fb      	strh	r3, [r7, #6]
	Card* result = malloc(sizeof(Card));
 80032e0:	201c      	movs	r0, #28
 80032e2:	f00c fbff 	bl	800fae4 <malloc>
 80032e6:	4603      	mov	r3, r0
 80032e8:	60fb      	str	r3, [r7, #12]

	if (read_metadata(result, entry) != RFS_OK) {
 80032ea:	88fb      	ldrh	r3, [r7, #6]
 80032ec:	4619      	mov	r1, r3
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 f81e 	bl	8003330 <read_metadata>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <read_card_entry+0x28>
		return NULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	e014      	b.n	8003328 <read_card_entry+0x52>
	}

	if (read_nameuid(result, entry) != RFS_OK) {
 80032fe:	88fb      	ldrh	r3, [r7, #6]
 8003300:	4619      	mov	r1, r3
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 f881 	bl	800340a <read_nameuid>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <read_card_entry+0x3c>
		return NULL;
 800330e:	2300      	movs	r3, #0
 8003310:	e00a      	b.n	8003328 <read_card_entry+0x52>
	}

	if(read_cardcontents(result, entry) != RFS_OK) {
 8003312:	88fb      	ldrh	r3, [r7, #6]
 8003314:	4619      	mov	r1, r3
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f8e2 	bl	80034e0 <read_cardcontents>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <read_card_entry+0x50>
		return NULL;
 8003322:	2300      	movs	r3, #0
 8003324:	e000      	b.n	8003328 <read_card_entry+0x52>
	}

	return result;
 8003326:	68fb      	ldr	r3, [r7, #12]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <read_metadata>:
 *
 * @param result - Card to store data to
 * @param entry - entry to read from
 * @return RFS_OK if data was successfully read
 * */
RFS_StatusTypeDef read_metadata(Card* result, uint16_t entry) {
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	807b      	strh	r3, [r7, #2]
	uint16_t metadata_size = get_datasize(entry, METAPAGE_OFFSET);
 800333c:	887b      	ldrh	r3, [r7, #2]
 800333e:	2100      	movs	r1, #0
 8003340:	4618      	mov	r0, r3
 8003342:	f000 f8f5 	bl	8003530 <get_datasize>
 8003346:	4603      	mov	r3, r0
 8003348:	82fb      	strh	r3, [r7, #22]
	uint8_t* metadata = malloc(metadata_size * sizeof(uint8_t));
 800334a:	8afb      	ldrh	r3, [r7, #22]
 800334c:	4618      	mov	r0, r3
 800334e:	f00c fbc9 	bl	800fae4 <malloc>
 8003352:	4603      	mov	r3, r0
 8003354:	613b      	str	r3, [r7, #16]
	char* type = malloc(((metadata_size - 3) + 1) * sizeof(char)); //+1 for null
 8003356:	8afb      	ldrh	r3, [r7, #22]
 8003358:	3b02      	subs	r3, #2
 800335a:	4618      	mov	r0, r3
 800335c:	f00c fbc2 	bl	800fae4 <malloc>
 8003360:	4603      	mov	r3, r0
 8003362:	60fb      	str	r3, [r7, #12]

	if (MEM_READPAGE(entry * BLOCK_PAGECOUNT, 0x0000, metadata, metadata_size) != HAL_OK) {
 8003364:	887b      	ldrh	r3, [r7, #2]
 8003366:	019b      	lsls	r3, r3, #6
 8003368:	b298      	uxth	r0, r3
 800336a:	8afb      	ldrh	r3, [r7, #22]
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	2100      	movs	r1, #0
 8003370:	f7fe ff0c 	bl	800218c <MEM_READPAGE>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d004      	beq.n	8003384 <read_metadata+0x54>
		free(metadata);
 800337a:	6938      	ldr	r0, [r7, #16]
 800337c:	f00c fbba 	bl	800faf4 <free>
		return RFS_READ_ERROR;
 8003380:	2305      	movs	r3, #5
 8003382:	e03e      	b.n	8003402 <read_metadata+0xd2>
	}

	if ((uint8_t)type[0] == 0xFF) { //Simple check to see if we read an empty entry
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2bff      	cmp	r3, #255	; 0xff
 800338a:	d104      	bne.n	8003396 <read_metadata+0x66>
		free(metadata);
 800338c:	6938      	ldr	r0, [r7, #16]
 800338e:	f00c fbb1 	bl	800faf4 <free>
		return RFS_NO_CARD;
 8003392:	2301      	movs	r3, #1
 8003394:	e035      	b.n	8003402 <read_metadata+0xd2>
	}

	memcpy(type, metadata, metadata_size - 3);
 8003396:	8afb      	ldrh	r3, [r7, #22]
 8003398:	3b03      	subs	r3, #3
 800339a:	461a      	mov	r2, r3
 800339c:	6939      	ldr	r1, [r7, #16]
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f00c fbb0 	bl	800fb04 <memcpy>
	type[metadata_size - 3] = '\0';
 80033a4:	8afb      	ldrh	r3, [r7, #22]
 80033a6:	3b03      	subs	r3, #3
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4413      	add	r3, r2
 80033ac:	2200      	movs	r2, #0
 80033ae:	701a      	strb	r2, [r3, #0]
	result->type = type;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	60da      	str	r2, [r3, #12]
	result->contents_size = metadata[metadata_size - 3];
 80033b6:	8afb      	ldrh	r3, [r7, #22]
 80033b8:	3b03      	subs	r3, #3
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4413      	add	r3, r2
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	831a      	strh	r2, [r3, #24]
	result->uidsize = metadata[metadata_size - 2];
 80033c6:	8afb      	ldrh	r3, [r7, #22]
 80033c8:	3b02      	subs	r3, #2
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4413      	add	r3, r2
 80033ce:	781a      	ldrb	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	711a      	strb	r2, [r3, #4]
	if (metadata[metadata_size - 1] == READ_PROTECTED) { //Card is read protected
 80033d4:	8afb      	ldrh	r3, [r7, #22]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4413      	add	r3, r2
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d104      	bne.n	80033ec <read_metadata+0xbc>
		free(metadata);
 80033e2:	6938      	ldr	r0, [r7, #16]
 80033e4:	f00c fb86 	bl	800faf4 <free>
		return RFS_CARD_PROTECTED;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e00a      	b.n	8003402 <read_metadata+0xd2>
	}
	result->read_protected = metadata[metadata_size - 1];
 80033ec:	8afb      	ldrh	r3, [r7, #22]
 80033ee:	3b01      	subs	r3, #1
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4413      	add	r3, r2
 80033f4:	781a      	ldrb	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	741a      	strb	r2, [r3, #16]
	free(metadata);
 80033fa:	6938      	ldr	r0, [r7, #16]
 80033fc:	f00c fb7a 	bl	800faf4 <free>

	return RFS_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <read_nameuid>:
 * Read the name and uid of card entry. Note that metadata must be read before name and uid can be read
 * @param result - Result to store data to
 * @param entry - Entry to read from
 * @return RFS_OK if name and uid was successfully read
 * */
RFS_StatusTypeDef read_nameuid(Card* result, uint16_t entry) {
 800340a:	b580      	push	{r7, lr}
 800340c:	b086      	sub	sp, #24
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	460b      	mov	r3, r1
 8003414:	807b      	strh	r3, [r7, #2]
	uint16_t datasize = get_datasize(entry, NAMEPAGE_OFFSET);
 8003416:	887b      	ldrh	r3, [r7, #2]
 8003418:	2101      	movs	r1, #1
 800341a:	4618      	mov	r0, r3
 800341c:	f000 f888 	bl	8003530 <get_datasize>
 8003420:	4603      	mov	r3, r0
 8003422:	82fb      	strh	r3, [r7, #22]
	uint8_t* raw_data = malloc(datasize*sizeof(uint8_t));
 8003424:	8afb      	ldrh	r3, [r7, #22]
 8003426:	4618      	mov	r0, r3
 8003428:	f00c fb5c 	bl	800fae4 <malloc>
 800342c:	4603      	mov	r3, r0
 800342e:	613b      	str	r3, [r7, #16]
	char* name = malloc((datasize - result->uidsize + 1) * sizeof(char)); //+1 for null
 8003430:	8afb      	ldrh	r3, [r7, #22]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	7912      	ldrb	r2, [r2, #4]
 8003436:	1a9b      	subs	r3, r3, r2
 8003438:	3301      	adds	r3, #1
 800343a:	4618      	mov	r0, r3
 800343c:	f00c fb52 	bl	800fae4 <malloc>
 8003440:	4603      	mov	r3, r0
 8003442:	60fb      	str	r3, [r7, #12]
	uint8_t* uid = malloc((result->uidsize) * sizeof(uint8_t));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	791b      	ldrb	r3, [r3, #4]
 8003448:	4618      	mov	r0, r3
 800344a:	f00c fb4b 	bl	800fae4 <malloc>
 800344e:	4603      	mov	r3, r0
 8003450:	60bb      	str	r3, [r7, #8]

	if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + NAMEPAGE_OFFSET, 0x0000, raw_data, datasize) != HAL_OK) {
 8003452:	887b      	ldrh	r3, [r7, #2]
 8003454:	019b      	lsls	r3, r3, #6
 8003456:	b29b      	uxth	r3, r3
 8003458:	3301      	adds	r3, #1
 800345a:	b298      	uxth	r0, r3
 800345c:	8afb      	ldrh	r3, [r7, #22]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	2100      	movs	r1, #0
 8003462:	f7fe fe93 	bl	800218c <MEM_READPAGE>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d004      	beq.n	8003476 <read_nameuid+0x6c>
		free(raw_data);
 800346c:	6938      	ldr	r0, [r7, #16]
 800346e:	f00c fb41 	bl	800faf4 <free>
		return RFS_READ_ERROR;
 8003472:	2305      	movs	r3, #5
 8003474:	e030      	b.n	80034d8 <read_nameuid+0xce>
	}

	if ((uint8_t)name[0] == 0xFF) { //Simple check to see if we read an empty entry
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2bff      	cmp	r3, #255	; 0xff
 800347c:	d104      	bne.n	8003488 <read_nameuid+0x7e>
		free(raw_data);
 800347e:	6938      	ldr	r0, [r7, #16]
 8003480:	f00c fb38 	bl	800faf4 <free>
		return RFS_NO_CARD;
 8003484:	2301      	movs	r3, #1
 8003486:	e027      	b.n	80034d8 <read_nameuid+0xce>
	}

	memcpy(name, raw_data, datasize - result->uidsize);
 8003488:	8afb      	ldrh	r3, [r7, #22]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	7912      	ldrb	r2, [r2, #4]
 800348e:	1a9b      	subs	r3, r3, r2
 8003490:	461a      	mov	r2, r3
 8003492:	6939      	ldr	r1, [r7, #16]
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f00c fb35 	bl	800fb04 <memcpy>
	name[datasize - result->uidsize] = '\0';
 800349a:	8afb      	ldrh	r3, [r7, #22]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	7912      	ldrb	r2, [r2, #4]
 80034a0:	1a9b      	subs	r3, r3, r2
 80034a2:	461a      	mov	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4413      	add	r3, r2
 80034a8:	2200      	movs	r2, #0
 80034aa:	701a      	strb	r2, [r3, #0]
	result->name = name;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	609a      	str	r2, [r3, #8]

	memcpy(uid, raw_data + strlen(name), result->uidsize);
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f7fc fe94 	bl	80001e0 <strlen>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1899      	adds	r1, r3, r2
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	791b      	ldrb	r3, [r3, #4]
 80034c2:	461a      	mov	r2, r3
 80034c4:	68b8      	ldr	r0, [r7, #8]
 80034c6:	f00c fb1d 	bl	800fb04 <memcpy>
	result->uid = uid;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	601a      	str	r2, [r3, #0]
	free(raw_data);
 80034d0:	6938      	ldr	r0, [r7, #16]
 80034d2:	f00c fb0f 	bl	800faf4 <free>

	return RFS_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <read_cardcontents>:
/**
 * Read the contents of a card entry
 * @param entry - Entry to read contents of
 * @return RFS_OK if data was successfully read
 * */
RFS_StatusTypeDef read_cardcontents(Card* result, uint16_t entry) {
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	807b      	strh	r3, [r7, #2]
	uint8_t* contents = malloc(result->contents_size * sizeof(uint8_t));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	8b1b      	ldrh	r3, [r3, #24]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f00c faf7 	bl	800fae4 <malloc>
 80034f6:	4603      	mov	r3, r0
 80034f8:	60fb      	str	r3, [r7, #12]

	if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + DATAPAGE_OFFSET, 0x0000, contents, result->contents_size) != HAL_OK) {
 80034fa:	887b      	ldrh	r3, [r7, #2]
 80034fc:	019b      	lsls	r3, r3, #6
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3302      	adds	r3, #2
 8003502:	b298      	uxth	r0, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	8b1b      	ldrh	r3, [r3, #24]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	2100      	movs	r1, #0
 800350c:	f7fe fe3e 	bl	800218c <MEM_READPAGE>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d004      	beq.n	8003520 <read_cardcontents+0x40>
		free(contents);
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f00c faec 	bl	800faf4 <free>
		return RFS_READ_ERROR;
 800351c:	2305      	movs	r3, #5
 800351e:	e003      	b.n	8003528 <read_cardcontents+0x48>
	}

	result->contents = contents;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	615a      	str	r2, [r3, #20]
	return RFS_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <get_datasize>:
 * Get the size of a chunk of data from specific block and page
 * @param entry - Entry to read from
 * @param page - Page to begin reading from
 * @return size of data in bytes
 * */
uint16_t get_datasize(uint16_t entry, uint8_t page) {
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	460a      	mov	r2, r1
 800353a:	80fb      	strh	r3, [r7, #6]
 800353c:	4613      	mov	r3, r2
 800353e:	717b      	strb	r3, [r7, #5]
	uint16_t size = 0;
 8003540:	2300      	movs	r3, #0
 8003542:	81fb      	strh	r3, [r7, #14]
	uint8_t byte_read = 0x00;
 8003544:	2300      	movs	r3, #0
 8003546:	737b      	strb	r3, [r7, #13]

	while(byte_read != 0xFF) {
 8003548:	e014      	b.n	8003574 <get_datasize+0x44>
		if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + page, size, &byte_read, 1) != HAL_OK) {
 800354a:	88fb      	ldrh	r3, [r7, #6]
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	b29a      	uxth	r2, r3
 8003550:	797b      	ldrb	r3, [r7, #5]
 8003552:	b29b      	uxth	r3, r3
 8003554:	4413      	add	r3, r2
 8003556:	b298      	uxth	r0, r3
 8003558:	f107 020d 	add.w	r2, r7, #13
 800355c:	89f9      	ldrh	r1, [r7, #14]
 800355e:	2301      	movs	r3, #1
 8003560:	f7fe fe14 	bl	800218c <MEM_READPAGE>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <get_datasize+0x3e>
			return 0; //Error occured whilst reading
 800356a:	2300      	movs	r3, #0
 800356c:	e008      	b.n	8003580 <get_datasize+0x50>
		}
		size++;
 800356e:	89fb      	ldrh	r3, [r7, #14]
 8003570:	3301      	adds	r3, #1
 8003572:	81fb      	strh	r3, [r7, #14]
	while(byte_read != 0xFF) {
 8003574:	7b7b      	ldrb	r3, [r7, #13]
 8003576:	2bff      	cmp	r3, #255	; 0xff
 8003578:	d1e7      	bne.n	800354a <get_datasize+0x1a>
	}

	return size - 1; //Last iteration will add 1 to true size so -1
 800357a:	89fb      	ldrh	r3, [r7, #14]
 800357c:	3b01      	subs	r3, #1
 800357e:	b29b      	uxth	r3, r3
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <get_number_files>:

/**
 * Get number of files currently stored
 * @return number of files stored
 * */
int get_number_files(void) {
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
	int count = 0;
 800358e:	2300      	movs	r3, #0
 8003590:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < BLOCK_COUNT; i++) {
 8003592:	2300      	movs	r3, #0
 8003594:	603b      	str	r3, [r7, #0]
 8003596:	e00d      	b.n	80035b4 <get_number_files+0x2c>
		if (entry_present(i) == RFS_OK) {
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	b29b      	uxth	r3, r3
 800359c:	4618      	mov	r0, r3
 800359e:	f000 f86a 	bl	8003676 <entry_present>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10a      	bne.n	80035be <get_number_files+0x36>
			count++;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3301      	adds	r3, #1
 80035ac:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < BLOCK_COUNT; i++) {
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	3301      	adds	r3, #1
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ba:	dbed      	blt.n	8003598 <get_number_files+0x10>
 80035bc:	e000      	b.n	80035c0 <get_number_files+0x38>
		} else {
			break;
 80035be:	bf00      	nop
		}

	}

	return count;
 80035c0:	687b      	ldr	r3, [r7, #4]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <get_all_files>:
 * Get the names of all currently stored cards
 *
 * @param result - Array to store file names
 * @return RFS_OK if all file names were read correctly
 * */
RFS_StatusTypeDef get_all_files(char** result) {
 80035ca:	b5b0      	push	{r4, r5, r7, lr}
 80035cc:	b084      	sub	sp, #16
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
	Card* work;

	for (int i = 0; i < BLOCK_COUNT; i++) {
 80035d2:	2300      	movs	r3, #0
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	e040      	b.n	800365a <get_all_files+0x90>
		if (entry_present(i) == RFS_OK) {
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	b29b      	uxth	r3, r3
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 f84a 	bl	8003676 <entry_present>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d13d      	bne.n	8003664 <get_all_files+0x9a>
			work = read_card_entry(i);
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff fe72 	bl	80032d6 <read_card_entry>
 80035f2:	60f8      	str	r0, [r7, #12]
			result[i] = malloc(strlen(work->name) + 1);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fc fdf1 	bl	80001e0 <strlen>
 80035fe:	4603      	mov	r3, r0
 8003600:	1c59      	adds	r1, r3, #1
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	18d4      	adds	r4, r2, r3
 800360a:	4608      	mov	r0, r1
 800360c:	f00c fa6a 	bl	800fae4 <malloc>
 8003610:	4603      	mov	r3, r0
 8003612:	6023      	str	r3, [r4, #0]
			memcpy(result[i], work->name, strlen(work->name));
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	4413      	add	r3, r2
 800361c:	681c      	ldr	r4, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	689d      	ldr	r5, [r3, #8]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	4618      	mov	r0, r3
 8003628:	f7fc fdda 	bl	80001e0 <strlen>
 800362c:	4603      	mov	r3, r0
 800362e:	461a      	mov	r2, r3
 8003630:	4629      	mov	r1, r5
 8003632:	4620      	mov	r0, r4
 8003634:	f00c fa66 	bl	800fb04 <memcpy>
			result[i][strlen(work->name)] = '\0';
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	4413      	add	r3, r2
 8003640:	681c      	ldr	r4, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	4618      	mov	r0, r3
 8003648:	f7fc fdca 	bl	80001e0 <strlen>
 800364c:	4603      	mov	r3, r0
 800364e:	4423      	add	r3, r4
 8003650:	2200      	movs	r2, #0
 8003652:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	3301      	adds	r3, #1
 8003658:	60bb      	str	r3, [r7, #8]
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003660:	dbba      	blt.n	80035d8 <get_all_files+0xe>
 8003662:	e000      	b.n	8003666 <get_all_files+0x9c>
		} else {
			break;
 8003664:	bf00      	nop
		}
	}

	free(work);
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f00c fa44 	bl	800faf4 <free>
	return RFS_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bdb0      	pop	{r4, r5, r7, pc}

08003676 <entry_present>:
 * Check if entry is present
 *
 * @param entry - Entry to check
 * @return RFS_OK if entry is present
 * */
RFS_StatusTypeDef entry_present(uint16_t entry) {
 8003676:	b580      	push	{r7, lr}
 8003678:	b084      	sub	sp, #16
 800367a:	af00      	add	r7, sp, #0
 800367c:	4603      	mov	r3, r0
 800367e:	80fb      	strh	r3, [r7, #6]
	uint8_t byte_read;

	if (MEM_READPAGE(entry * BLOCK_PAGECOUNT, 0x0000, &byte_read, 1) != HAL_OK) {
 8003680:	88fb      	ldrh	r3, [r7, #6]
 8003682:	019b      	lsls	r3, r3, #6
 8003684:	b298      	uxth	r0, r3
 8003686:	f107 020f 	add.w	r2, r7, #15
 800368a:	2301      	movs	r3, #1
 800368c:	2100      	movs	r1, #0
 800368e:	f7fe fd7d 	bl	800218c <MEM_READPAGE>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <entry_present+0x26>
		return RFS_READ_ERROR;
 8003698:	2305      	movs	r3, #5
 800369a:	e005      	b.n	80036a8 <entry_present+0x32>
	}

	if (byte_read == 0xFF) {
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	2bff      	cmp	r3, #255	; 0xff
 80036a0:	d101      	bne.n	80036a6 <entry_present+0x30>
		return RFS_NO_CARD;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <entry_present+0x32>
	}

	return RFS_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <get_file_name>:
/**
 * Get the file name of a given entry
 * @param entry - Entry to get name of
 * @return pointer to name
 * */
char* get_file_name(uint16_t entry) {
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	4603      	mov	r3, r0
 80036b8:	80fb      	strh	r3, [r7, #6]
	Card* work;

	if (entry_present(entry) != RFS_OK) {
 80036ba:	88fb      	ldrh	r3, [r7, #6]
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff ffda 	bl	8003676 <entry_present>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <get_file_name+0x1c>
		return NULL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	e01a      	b.n	8003702 <get_file_name+0x52>
	}

	work = read_card_entry(entry);
 80036cc:	88fb      	ldrh	r3, [r7, #6]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff fe01 	bl	80032d6 <read_card_entry>
 80036d4:	60f8      	str	r0, [r7, #12]

	char* name = malloc((strlen(work->name) + 1) * sizeof(char));
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7fc fd80 	bl	80001e0 <strlen>
 80036e0:	4603      	mov	r3, r0
 80036e2:	3301      	adds	r3, #1
 80036e4:	4618      	mov	r0, r3
 80036e6:	f00c f9fd 	bl	800fae4 <malloc>
 80036ea:	4603      	mov	r3, r0
 80036ec:	60bb      	str	r3, [r7, #8]
	strcpy(name, work->name);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	4619      	mov	r1, r3
 80036f4:	68b8      	ldr	r0, [r7, #8]
 80036f6:	f00c fb2b 	bl	800fd50 <strcpy>
	free(work);
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f00c f9fa 	bl	800faf4 <free>

	return name;
 8003700:	68bb      	ldr	r3, [r7, #8]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <remove_card>:

/**
 * Remove card from file system
 * @param entry - Entry to remove
 * */
void remove_card(uint16_t entry) {
 800370a:	b580      	push	{r7, lr}
 800370c:	b082      	sub	sp, #8
 800370e:	af00      	add	r7, sp, #0
 8003710:	4603      	mov	r3, r0
 8003712:	80fb      	strh	r3, [r7, #6]
	block_erase(entry);
 8003714:	88fb      	ldrh	r3, [r7, #6]
 8003716:	4618      	mov	r0, r3
 8003718:	f7fe fc4a 	bl	8001fb0 <block_erase>
}
 800371c:	bf00      	nop
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	0000      	movs	r0, r0
	...

08003728 <get_used_size>:

/**
 * Calculate the used size of memory in MiB
 * @return size of memory used in MiB
 * */
uint32_t get_used_size(void) {
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
	int file_count = get_number_files();
 800372e:	f7ff ff2b 	bl	8003588 <get_number_files>
 8003732:	6078      	str	r0, [r7, #4]

	return (BLOCK_SIZE * file_count);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7fd f827 	bl	8000788 <__aeabi_i2d>
 800373a:	a309      	add	r3, pc, #36	; (adr r3, 8003760 <get_used_size+0x38>)
 800373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003740:	f7fc fda6 	bl	8000290 <__aeabi_dmul>
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4610      	mov	r0, r2
 800374a:	4619      	mov	r1, r3
 800374c:	f7fd f886 	bl	800085c <__aeabi_d2uiz>
 8003750:	4603      	mov	r3, r0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	f3af 8000 	nop.w
 8003760:	d2f1a9fc 	.word	0xd2f1a9fc
 8003764:	3fc0624d 	.word	0x3fc0624d

08003768 <get_free_size>:

/**
 * Get size of memory that is free
 * @return size of memory that is free in MiB
 * */
uint32_t get_free_size(void) {
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
	return MEM_SIZE - get_used_size();
 800376c:	f7ff ffdc 	bl	8003728 <get_used_size>
 8003770:	4603      	mov	r3, r0
 8003772:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
}
 8003776:	4618      	mov	r0, r3
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <get_used_size_str>:

/**
 * Get used size as a string (Useful for printing to OLED)
 * @param result - Pointer to string to write to
 * */
void get_used_size_str(char* result) {
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
	uint32_t used = get_used_size();
 8003784:	f7ff ffd0 	bl	8003728 <get_used_size>
 8003788:	60f8      	str	r0, [r7, #12]
	sprintf(result,"%i", used);
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	4903      	ldr	r1, [pc, #12]	; (800379c <get_used_size_str+0x20>)
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f00c fabe 	bl	800fd10 <siprintf>
}
 8003794:	bf00      	nop
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	0801068c 	.word	0x0801068c

080037a0 <get_free_size_str>:

/**
 * Get free size as a string
 * @param result - Pointer to string to write to
 * */
void get_free_size_str(char* result) {
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
	uint32_t free = get_free_size();
 80037a8:	f7ff ffde 	bl	8003768 <get_free_size>
 80037ac:	60f8      	str	r0, [r7, #12]
	sprintf(result, "%i", free);
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	4903      	ldr	r1, [pc, #12]	; (80037c0 <get_free_size_str+0x20>)
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f00c faac 	bl	800fd10 <siprintf>
}
 80037b8:	bf00      	nop
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	0801068c 	.word	0x0801068c

080037c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ca:	2300      	movs	r3, #0
 80037cc:	607b      	str	r3, [r7, #4]
 80037ce:	4b12      	ldr	r3, [pc, #72]	; (8003818 <HAL_MspInit+0x54>)
 80037d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d2:	4a11      	ldr	r2, [pc, #68]	; (8003818 <HAL_MspInit+0x54>)
 80037d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037d8:	6453      	str	r3, [r2, #68]	; 0x44
 80037da:	4b0f      	ldr	r3, [pc, #60]	; (8003818 <HAL_MspInit+0x54>)
 80037dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037e2:	607b      	str	r3, [r7, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	603b      	str	r3, [r7, #0]
 80037ea:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <HAL_MspInit+0x54>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	4a0a      	ldr	r2, [pc, #40]	; (8003818 <HAL_MspInit+0x54>)
 80037f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f4:	6413      	str	r3, [r2, #64]	; 0x40
 80037f6:	4b08      	ldr	r3, [pc, #32]	; (8003818 <HAL_MspInit+0x54>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fe:	603b      	str	r3, [r7, #0]
 8003800:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003802:	2200      	movs	r2, #0
 8003804:	210f      	movs	r1, #15
 8003806:	f06f 0001 	mvn.w	r0, #1
 800380a:	f000 fb79 	bl	8003f00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40023800 	.word	0x40023800

0800381c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b08a      	sub	sp, #40	; 0x28
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003824:	f107 0314 	add.w	r3, r7, #20
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	605a      	str	r2, [r3, #4]
 800382e:	609a      	str	r2, [r3, #8]
 8003830:	60da      	str	r2, [r3, #12]
 8003832:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a19      	ldr	r2, [pc, #100]	; (80038a0 <HAL_I2C_MspInit+0x84>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d12b      	bne.n	8003896 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800383e:	2300      	movs	r3, #0
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	4b18      	ldr	r3, [pc, #96]	; (80038a4 <HAL_I2C_MspInit+0x88>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	4a17      	ldr	r2, [pc, #92]	; (80038a4 <HAL_I2C_MspInit+0x88>)
 8003848:	f043 0302 	orr.w	r3, r3, #2
 800384c:	6313      	str	r3, [r2, #48]	; 0x30
 800384e:	4b15      	ldr	r3, [pc, #84]	; (80038a4 <HAL_I2C_MspInit+0x88>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	613b      	str	r3, [r7, #16]
 8003858:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800385a:	23c0      	movs	r3, #192	; 0xc0
 800385c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800385e:	2312      	movs	r3, #18
 8003860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003862:	2300      	movs	r3, #0
 8003864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003866:	2303      	movs	r3, #3
 8003868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800386a:	2304      	movs	r3, #4
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800386e:	f107 0314 	add.w	r3, r7, #20
 8003872:	4619      	mov	r1, r3
 8003874:	480c      	ldr	r0, [pc, #48]	; (80038a8 <HAL_I2C_MspInit+0x8c>)
 8003876:	f000 fb6d 	bl	8003f54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <HAL_I2C_MspInit+0x88>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	4a08      	ldr	r2, [pc, #32]	; (80038a4 <HAL_I2C_MspInit+0x88>)
 8003884:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003888:	6413      	str	r3, [r2, #64]	; 0x40
 800388a:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <HAL_I2C_MspInit+0x88>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003896:	bf00      	nop
 8003898:	3728      	adds	r7, #40	; 0x28
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40005400 	.word	0x40005400
 80038a4:	40023800 	.word	0x40023800
 80038a8:	40020400 	.word	0x40020400

080038ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08c      	sub	sp, #48	; 0x30
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b4:	f107 031c 	add.w	r3, r7, #28
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	605a      	str	r2, [r3, #4]
 80038be:	609a      	str	r2, [r3, #8]
 80038c0:	60da      	str	r2, [r3, #12]
 80038c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a32      	ldr	r2, [pc, #200]	; (8003994 <HAL_SPI_MspInit+0xe8>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d12c      	bne.n	8003928 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038ce:	2300      	movs	r3, #0
 80038d0:	61bb      	str	r3, [r7, #24]
 80038d2:	4b31      	ldr	r3, [pc, #196]	; (8003998 <HAL_SPI_MspInit+0xec>)
 80038d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d6:	4a30      	ldr	r2, [pc, #192]	; (8003998 <HAL_SPI_MspInit+0xec>)
 80038d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038dc:	6453      	str	r3, [r2, #68]	; 0x44
 80038de:	4b2e      	ldr	r3, [pc, #184]	; (8003998 <HAL_SPI_MspInit+0xec>)
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038e6:	61bb      	str	r3, [r7, #24]
 80038e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ea:	2300      	movs	r3, #0
 80038ec:	617b      	str	r3, [r7, #20]
 80038ee:	4b2a      	ldr	r3, [pc, #168]	; (8003998 <HAL_SPI_MspInit+0xec>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	4a29      	ldr	r2, [pc, #164]	; (8003998 <HAL_SPI_MspInit+0xec>)
 80038f4:	f043 0301 	orr.w	r3, r3, #1
 80038f8:	6313      	str	r3, [r2, #48]	; 0x30
 80038fa:	4b27      	ldr	r3, [pc, #156]	; (8003998 <HAL_SPI_MspInit+0xec>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003906:	23a0      	movs	r3, #160	; 0xa0
 8003908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800390a:	2302      	movs	r3, #2
 800390c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390e:	2300      	movs	r3, #0
 8003910:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003912:	2303      	movs	r3, #3
 8003914:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003916:	2305      	movs	r3, #5
 8003918:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800391a:	f107 031c 	add.w	r3, r7, #28
 800391e:	4619      	mov	r1, r3
 8003920:	481e      	ldr	r0, [pc, #120]	; (800399c <HAL_SPI_MspInit+0xf0>)
 8003922:	f000 fb17 	bl	8003f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003926:	e031      	b.n	800398c <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a1c      	ldr	r2, [pc, #112]	; (80039a0 <HAL_SPI_MspInit+0xf4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d12c      	bne.n	800398c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003932:	2300      	movs	r3, #0
 8003934:	613b      	str	r3, [r7, #16]
 8003936:	4b18      	ldr	r3, [pc, #96]	; (8003998 <HAL_SPI_MspInit+0xec>)
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	4a17      	ldr	r2, [pc, #92]	; (8003998 <HAL_SPI_MspInit+0xec>)
 800393c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003940:	6413      	str	r3, [r2, #64]	; 0x40
 8003942:	4b15      	ldr	r3, [pc, #84]	; (8003998 <HAL_SPI_MspInit+0xec>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800394a:	613b      	str	r3, [r7, #16]
 800394c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800394e:	2300      	movs	r3, #0
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	4b11      	ldr	r3, [pc, #68]	; (8003998 <HAL_SPI_MspInit+0xec>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	4a10      	ldr	r2, [pc, #64]	; (8003998 <HAL_SPI_MspInit+0xec>)
 8003958:	f043 0302 	orr.w	r3, r3, #2
 800395c:	6313      	str	r3, [r2, #48]	; 0x30
 800395e:	4b0e      	ldr	r3, [pc, #56]	; (8003998 <HAL_SPI_MspInit+0xec>)
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800396a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800396e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003970:	2302      	movs	r3, #2
 8003972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003974:	2300      	movs	r3, #0
 8003976:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003978:	2303      	movs	r3, #3
 800397a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800397c:	2305      	movs	r3, #5
 800397e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003980:	f107 031c 	add.w	r3, r7, #28
 8003984:	4619      	mov	r1, r3
 8003986:	4807      	ldr	r0, [pc, #28]	; (80039a4 <HAL_SPI_MspInit+0xf8>)
 8003988:	f000 fae4 	bl	8003f54 <HAL_GPIO_Init>
}
 800398c:	bf00      	nop
 800398e:	3730      	adds	r7, #48	; 0x30
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40013000 	.word	0x40013000
 8003998:	40023800 	.word	0x40023800
 800399c:	40020000 	.word	0x40020000
 80039a0:	40003800 	.word	0x40003800
 80039a4:	40020400 	.word	0x40020400

080039a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b8:	d10e      	bne.n	80039d8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039ba:	2300      	movs	r3, #0
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	4b13      	ldr	r3, [pc, #76]	; (8003a0c <HAL_TIM_Base_MspInit+0x64>)
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	4a12      	ldr	r2, [pc, #72]	; (8003a0c <HAL_TIM_Base_MspInit+0x64>)
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	6413      	str	r3, [r2, #64]	; 0x40
 80039ca:	4b10      	ldr	r3, [pc, #64]	; (8003a0c <HAL_TIM_Base_MspInit+0x64>)
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80039d6:	e012      	b.n	80039fe <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a0c      	ldr	r2, [pc, #48]	; (8003a10 <HAL_TIM_Base_MspInit+0x68>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d10d      	bne.n	80039fe <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039e2:	2300      	movs	r3, #0
 80039e4:	60bb      	str	r3, [r7, #8]
 80039e6:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <HAL_TIM_Base_MspInit+0x64>)
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	4a08      	ldr	r2, [pc, #32]	; (8003a0c <HAL_TIM_Base_MspInit+0x64>)
 80039ec:	f043 0302 	orr.w	r3, r3, #2
 80039f0:	6413      	str	r3, [r2, #64]	; 0x40
 80039f2:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <HAL_TIM_Base_MspInit+0x64>)
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	60bb      	str	r3, [r7, #8]
 80039fc:	68bb      	ldr	r3, [r7, #8]
}
 80039fe:	bf00      	nop
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	40000400 	.word	0x40000400

08003a14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b088      	sub	sp, #32
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a1c:	f107 030c 	add.w	r3, r7, #12
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	605a      	str	r2, [r3, #4]
 8003a26:	609a      	str	r2, [r3, #8]
 8003a28:	60da      	str	r2, [r3, #12]
 8003a2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a34:	d11d      	bne.n	8003a72 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a36:	2300      	movs	r3, #0
 8003a38:	60bb      	str	r3, [r7, #8]
 8003a3a:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <HAL_TIM_MspPostInit+0x68>)
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	4a0f      	ldr	r2, [pc, #60]	; (8003a7c <HAL_TIM_MspPostInit+0x68>)
 8003a40:	f043 0301 	orr.w	r3, r3, #1
 8003a44:	6313      	str	r3, [r2, #48]	; 0x30
 8003a46:	4b0d      	ldr	r3, [pc, #52]	; (8003a7c <HAL_TIM_MspPostInit+0x68>)
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	60bb      	str	r3, [r7, #8]
 8003a50:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003a52:	2304      	movs	r3, #4
 8003a54:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a56:	2302      	movs	r3, #2
 8003a58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a62:	2301      	movs	r3, #1
 8003a64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a66:	f107 030c 	add.w	r3, r7, #12
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4804      	ldr	r0, [pc, #16]	; (8003a80 <HAL_TIM_MspPostInit+0x6c>)
 8003a6e:	f000 fa71 	bl	8003f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003a72:	bf00      	nop
 8003a74:	3720      	adds	r7, #32
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	40020000 	.word	0x40020000

08003a84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08e      	sub	sp, #56	; 0x38
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	4b33      	ldr	r3, [pc, #204]	; (8003b68 <HAL_InitTick+0xe4>)
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9c:	4a32      	ldr	r2, [pc, #200]	; (8003b68 <HAL_InitTick+0xe4>)
 8003a9e:	f043 0308 	orr.w	r3, r3, #8
 8003aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8003aa4:	4b30      	ldr	r3, [pc, #192]	; (8003b68 <HAL_InitTick+0xe4>)
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ab0:	f107 0210 	add.w	r2, r7, #16
 8003ab4:	f107 0314 	add.w	r3, r7, #20
 8003ab8:	4611      	mov	r1, r2
 8003aba:	4618      	mov	r0, r3
 8003abc:	f003 fad6 	bl	800706c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d103      	bne.n	8003ad2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003aca:	f003 fabb 	bl	8007044 <HAL_RCC_GetPCLK1Freq>
 8003ace:	6378      	str	r0, [r7, #52]	; 0x34
 8003ad0:	e004      	b.n	8003adc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003ad2:	f003 fab7 	bl	8007044 <HAL_RCC_GetPCLK1Freq>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ade:	4a23      	ldr	r2, [pc, #140]	; (8003b6c <HAL_InitTick+0xe8>)
 8003ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae4:	0c9b      	lsrs	r3, r3, #18
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8003aea:	4b21      	ldr	r3, [pc, #132]	; (8003b70 <HAL_InitTick+0xec>)
 8003aec:	4a21      	ldr	r2, [pc, #132]	; (8003b74 <HAL_InitTick+0xf0>)
 8003aee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8003af0:	4b1f      	ldr	r3, [pc, #124]	; (8003b70 <HAL_InitTick+0xec>)
 8003af2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003af6:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8003af8:	4a1d      	ldr	r2, [pc, #116]	; (8003b70 <HAL_InitTick+0xec>)
 8003afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afc:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8003afe:	4b1c      	ldr	r3, [pc, #112]	; (8003b70 <HAL_InitTick+0xec>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b04:	4b1a      	ldr	r3, [pc, #104]	; (8003b70 <HAL_InitTick+0xec>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b0a:	4b19      	ldr	r3, [pc, #100]	; (8003b70 <HAL_InitTick+0xec>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8003b10:	4817      	ldr	r0, [pc, #92]	; (8003b70 <HAL_InitTick+0xec>)
 8003b12:	f003 ff0f 	bl	8007934 <HAL_TIM_Base_Init>
 8003b16:	4603      	mov	r3, r0
 8003b18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003b1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d11b      	bne.n	8003b5c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8003b24:	4812      	ldr	r0, [pc, #72]	; (8003b70 <HAL_InitTick+0xec>)
 8003b26:	f003 ffd7 	bl	8007ad8 <HAL_TIM_Base_Start_IT>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003b30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d111      	bne.n	8003b5c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003b38:	2032      	movs	r0, #50	; 0x32
 8003b3a:	f000 f9fd 	bl	8003f38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b0f      	cmp	r3, #15
 8003b42:	d808      	bhi.n	8003b56 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8003b44:	2200      	movs	r2, #0
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	2032      	movs	r0, #50	; 0x32
 8003b4a:	f000 f9d9 	bl	8003f00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b4e:	4a0a      	ldr	r2, [pc, #40]	; (8003b78 <HAL_InitTick+0xf4>)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	e002      	b.n	8003b5c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003b5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3738      	adds	r7, #56	; 0x38
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	431bde83 	.word	0x431bde83
 8003b70:	20000868 	.word	0x20000868
 8003b74:	40000c00 	.word	0x40000c00
 8003b78:	2000052c 	.word	0x2000052c

08003b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b80:	e7fe      	b.n	8003b80 <NMI_Handler+0x4>

08003b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b82:	b480      	push	{r7}
 8003b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b86:	e7fe      	b.n	8003b86 <HardFault_Handler+0x4>

08003b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b8c:	e7fe      	b.n	8003b8c <MemManage_Handler+0x4>

08003b8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b92:	e7fe      	b.n	8003b92 <BusFault_Handler+0x4>

08003b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b98:	e7fe      	b.n	8003b98 <UsageFault_Handler+0x4>

08003b9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b9e:	bf00      	nop
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8003bac:	2002      	movs	r0, #2
 8003bae:	f000 fb87 	bl	80042c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003bb2:	bf00      	nop
 8003bb4:	bd80      	pop	{r7, pc}
	...

08003bb8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003bbc:	4802      	ldr	r0, [pc, #8]	; (8003bc8 <TIM5_IRQHandler+0x10>)
 8003bbe:	f004 f95b 	bl	8007e78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003bc2:	bf00      	nop
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20000868 	.word	0x20000868

08003bcc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003bd0:	4802      	ldr	r0, [pc, #8]	; (8003bdc <OTG_FS_IRQHandler+0x10>)
 8003bd2:	f001 fc9c 	bl	800550e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003bd6:	bf00      	nop
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	20007728 	.word	0x20007728

08003be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003be8:	4a14      	ldr	r2, [pc, #80]	; (8003c3c <_sbrk+0x5c>)
 8003bea:	4b15      	ldr	r3, [pc, #84]	; (8003c40 <_sbrk+0x60>)
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003bf4:	4b13      	ldr	r3, [pc, #76]	; (8003c44 <_sbrk+0x64>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d102      	bne.n	8003c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003bfc:	4b11      	ldr	r3, [pc, #68]	; (8003c44 <_sbrk+0x64>)
 8003bfe:	4a12      	ldr	r2, [pc, #72]	; (8003c48 <_sbrk+0x68>)
 8003c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c02:	4b10      	ldr	r3, [pc, #64]	; (8003c44 <_sbrk+0x64>)
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4413      	add	r3, r2
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d207      	bcs.n	8003c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c10:	f00b ff3e 	bl	800fa90 <__errno>
 8003c14:	4603      	mov	r3, r0
 8003c16:	220c      	movs	r2, #12
 8003c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c1e:	e009      	b.n	8003c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c20:	4b08      	ldr	r3, [pc, #32]	; (8003c44 <_sbrk+0x64>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c26:	4b07      	ldr	r3, [pc, #28]	; (8003c44 <_sbrk+0x64>)
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	4a05      	ldr	r2, [pc, #20]	; (8003c44 <_sbrk+0x64>)
 8003c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c32:	68fb      	ldr	r3, [r7, #12]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	20010000 	.word	0x20010000
 8003c40:	00000400 	.word	0x00000400
 8003c44:	200008b0 	.word	0x200008b0
 8003c48:	20007e68 	.word	0x20007e68

08003c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c50:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <SystemInit+0x20>)
 8003c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c56:	4a05      	ldr	r2, [pc, #20]	; (8003c6c <SystemInit+0x20>)
 8003c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c60:	bf00      	nop
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	e000ed00 	.word	0xe000ed00

08003c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ca8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c74:	480d      	ldr	r0, [pc, #52]	; (8003cac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003c76:	490e      	ldr	r1, [pc, #56]	; (8003cb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003c78:	4a0e      	ldr	r2, [pc, #56]	; (8003cb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c7c:	e002      	b.n	8003c84 <LoopCopyDataInit>

08003c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c82:	3304      	adds	r3, #4

08003c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c88:	d3f9      	bcc.n	8003c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c8a:	4a0b      	ldr	r2, [pc, #44]	; (8003cb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003c8c:	4c0b      	ldr	r4, [pc, #44]	; (8003cbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8003c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c90:	e001      	b.n	8003c96 <LoopFillZerobss>

08003c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c94:	3204      	adds	r2, #4

08003c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c98:	d3fb      	bcc.n	8003c92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c9a:	f7ff ffd7 	bl	8003c4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c9e:	f00b fefd 	bl	800fa9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ca2:	f7fe fc35 	bl	8002510 <main>
  bx  lr    
 8003ca6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ca8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cb0:	2000068c 	.word	0x2000068c
  ldr r2, =_sidata
 8003cb4:	08010cc0 	.word	0x08010cc0
  ldr r2, =_sbss
 8003cb8:	2000068c 	.word	0x2000068c
  ldr r4, =_ebss
 8003cbc:	20007e64 	.word	0x20007e64

08003cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003cc0:	e7fe      	b.n	8003cc0 <ADC_IRQHandler>
	...

08003cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003cc8:	4b0e      	ldr	r3, [pc, #56]	; (8003d04 <HAL_Init+0x40>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a0d      	ldr	r2, [pc, #52]	; (8003d04 <HAL_Init+0x40>)
 8003cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003cd4:	4b0b      	ldr	r3, [pc, #44]	; (8003d04 <HAL_Init+0x40>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a0a      	ldr	r2, [pc, #40]	; (8003d04 <HAL_Init+0x40>)
 8003cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ce0:	4b08      	ldr	r3, [pc, #32]	; (8003d04 <HAL_Init+0x40>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a07      	ldr	r2, [pc, #28]	; (8003d04 <HAL_Init+0x40>)
 8003ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cec:	2003      	movs	r0, #3
 8003cee:	f000 f8fc 	bl	8003eea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cf2:	200f      	movs	r0, #15
 8003cf4:	f7ff fec6 	bl	8003a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cf8:	f7ff fd64 	bl	80037c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40023c00 	.word	0x40023c00

08003d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d0c:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <HAL_IncTick+0x20>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	461a      	mov	r2, r3
 8003d12:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <HAL_IncTick+0x24>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4413      	add	r3, r2
 8003d18:	4a04      	ldr	r2, [pc, #16]	; (8003d2c <HAL_IncTick+0x24>)
 8003d1a:	6013      	str	r3, [r2, #0]
}
 8003d1c:	bf00      	nop
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	20000530 	.word	0x20000530
 8003d2c:	200008b4 	.word	0x200008b4

08003d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  return uwTick;
 8003d34:	4b03      	ldr	r3, [pc, #12]	; (8003d44 <HAL_GetTick+0x14>)
 8003d36:	681b      	ldr	r3, [r3, #0]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	200008b4 	.word	0x200008b4

08003d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d50:	f7ff ffee 	bl	8003d30 <HAL_GetTick>
 8003d54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d60:	d005      	beq.n	8003d6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d62:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <HAL_Delay+0x44>)
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	461a      	mov	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d6e:	bf00      	nop
 8003d70:	f7ff ffde 	bl	8003d30 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d8f7      	bhi.n	8003d70 <HAL_Delay+0x28>
  {
  }
}
 8003d80:	bf00      	nop
 8003d82:	bf00      	nop
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20000530 	.word	0x20000530

08003d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003da0:	4b0c      	ldr	r3, [pc, #48]	; (8003dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dac:	4013      	ands	r3, r2
 8003dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003db8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dc2:	4a04      	ldr	r2, [pc, #16]	; (8003dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	60d3      	str	r3, [r2, #12]
}
 8003dc8:	bf00      	nop
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	e000ed00 	.word	0xe000ed00

08003dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ddc:	4b04      	ldr	r3, [pc, #16]	; (8003df0 <__NVIC_GetPriorityGrouping+0x18>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	0a1b      	lsrs	r3, r3, #8
 8003de2:	f003 0307 	and.w	r3, r3, #7
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	e000ed00 	.word	0xe000ed00

08003df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	db0b      	blt.n	8003e1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e06:	79fb      	ldrb	r3, [r7, #7]
 8003e08:	f003 021f 	and.w	r2, r3, #31
 8003e0c:	4907      	ldr	r1, [pc, #28]	; (8003e2c <__NVIC_EnableIRQ+0x38>)
 8003e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	2001      	movs	r0, #1
 8003e16:	fa00 f202 	lsl.w	r2, r0, r2
 8003e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	e000e100 	.word	0xe000e100

08003e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	6039      	str	r1, [r7, #0]
 8003e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	db0a      	blt.n	8003e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	490c      	ldr	r1, [pc, #48]	; (8003e7c <__NVIC_SetPriority+0x4c>)
 8003e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4e:	0112      	lsls	r2, r2, #4
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	440b      	add	r3, r1
 8003e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e58:	e00a      	b.n	8003e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	4908      	ldr	r1, [pc, #32]	; (8003e80 <__NVIC_SetPriority+0x50>)
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	3b04      	subs	r3, #4
 8003e68:	0112      	lsls	r2, r2, #4
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	761a      	strb	r2, [r3, #24]
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	e000e100 	.word	0xe000e100
 8003e80:	e000ed00 	.word	0xe000ed00

08003e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b089      	sub	sp, #36	; 0x24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	f1c3 0307 	rsb	r3, r3, #7
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	bf28      	it	cs
 8003ea2:	2304      	movcs	r3, #4
 8003ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	2b06      	cmp	r3, #6
 8003eac:	d902      	bls.n	8003eb4 <NVIC_EncodePriority+0x30>
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	3b03      	subs	r3, #3
 8003eb2:	e000      	b.n	8003eb6 <NVIC_EncodePriority+0x32>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	43da      	mvns	r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	401a      	ands	r2, r3
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed6:	43d9      	mvns	r1, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003edc:	4313      	orrs	r3, r2
         );
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3724      	adds	r7, #36	; 0x24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b082      	sub	sp, #8
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7ff ff4c 	bl	8003d90 <__NVIC_SetPriorityGrouping>
}
 8003ef8:	bf00      	nop
 8003efa:	3708      	adds	r7, #8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	4603      	mov	r3, r0
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
 8003f0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f12:	f7ff ff61 	bl	8003dd8 <__NVIC_GetPriorityGrouping>
 8003f16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	68b9      	ldr	r1, [r7, #8]
 8003f1c:	6978      	ldr	r0, [r7, #20]
 8003f1e:	f7ff ffb1 	bl	8003e84 <NVIC_EncodePriority>
 8003f22:	4602      	mov	r2, r0
 8003f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f28:	4611      	mov	r1, r2
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff ff80 	bl	8003e30 <__NVIC_SetPriority>
}
 8003f30:	bf00      	nop
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	4603      	mov	r3, r0
 8003f40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff ff54 	bl	8003df4 <__NVIC_EnableIRQ>
}
 8003f4c:	bf00      	nop
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b089      	sub	sp, #36	; 0x24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f66:	2300      	movs	r3, #0
 8003f68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	61fb      	str	r3, [r7, #28]
 8003f6e:	e159      	b.n	8004224 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f70:	2201      	movs	r2, #1
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	4013      	ands	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	f040 8148 	bne.w	800421e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d005      	beq.n	8003fa6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d130      	bne.n	8004008 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	2203      	movs	r2, #3
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68da      	ldr	r2, [r3, #12]
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fdc:	2201      	movs	r2, #1
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	091b      	lsrs	r3, r3, #4
 8003ff2:	f003 0201 	and.w	r2, r3, #1
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 0303 	and.w	r3, r3, #3
 8004010:	2b03      	cmp	r3, #3
 8004012:	d017      	beq.n	8004044 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	2203      	movs	r2, #3
 8004020:	fa02 f303 	lsl.w	r3, r2, r3
 8004024:	43db      	mvns	r3, r3
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	4013      	ands	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	4313      	orrs	r3, r2
 800403c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f003 0303 	and.w	r3, r3, #3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d123      	bne.n	8004098 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	08da      	lsrs	r2, r3, #3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3208      	adds	r2, #8
 8004058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800405c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	220f      	movs	r2, #15
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	43db      	mvns	r3, r3
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	4013      	ands	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	691a      	ldr	r2, [r3, #16]
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	4313      	orrs	r3, r2
 8004088:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	08da      	lsrs	r2, r3, #3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	3208      	adds	r2, #8
 8004092:	69b9      	ldr	r1, [r7, #24]
 8004094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	2203      	movs	r2, #3
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	43db      	mvns	r3, r3
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	4013      	ands	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f003 0203 	and.w	r2, r3, #3
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 80a2 	beq.w	800421e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040da:	2300      	movs	r3, #0
 80040dc:	60fb      	str	r3, [r7, #12]
 80040de:	4b57      	ldr	r3, [pc, #348]	; (800423c <HAL_GPIO_Init+0x2e8>)
 80040e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e2:	4a56      	ldr	r2, [pc, #344]	; (800423c <HAL_GPIO_Init+0x2e8>)
 80040e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040e8:	6453      	str	r3, [r2, #68]	; 0x44
 80040ea:	4b54      	ldr	r3, [pc, #336]	; (800423c <HAL_GPIO_Init+0x2e8>)
 80040ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040f6:	4a52      	ldr	r2, [pc, #328]	; (8004240 <HAL_GPIO_Init+0x2ec>)
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	089b      	lsrs	r3, r3, #2
 80040fc:	3302      	adds	r3, #2
 80040fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	220f      	movs	r2, #15
 800410e:	fa02 f303 	lsl.w	r3, r2, r3
 8004112:	43db      	mvns	r3, r3
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	4013      	ands	r3, r2
 8004118:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a49      	ldr	r2, [pc, #292]	; (8004244 <HAL_GPIO_Init+0x2f0>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d019      	beq.n	8004156 <HAL_GPIO_Init+0x202>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a48      	ldr	r2, [pc, #288]	; (8004248 <HAL_GPIO_Init+0x2f4>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d013      	beq.n	8004152 <HAL_GPIO_Init+0x1fe>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a47      	ldr	r2, [pc, #284]	; (800424c <HAL_GPIO_Init+0x2f8>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d00d      	beq.n	800414e <HAL_GPIO_Init+0x1fa>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a46      	ldr	r2, [pc, #280]	; (8004250 <HAL_GPIO_Init+0x2fc>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d007      	beq.n	800414a <HAL_GPIO_Init+0x1f6>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a45      	ldr	r2, [pc, #276]	; (8004254 <HAL_GPIO_Init+0x300>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d101      	bne.n	8004146 <HAL_GPIO_Init+0x1f2>
 8004142:	2304      	movs	r3, #4
 8004144:	e008      	b.n	8004158 <HAL_GPIO_Init+0x204>
 8004146:	2307      	movs	r3, #7
 8004148:	e006      	b.n	8004158 <HAL_GPIO_Init+0x204>
 800414a:	2303      	movs	r3, #3
 800414c:	e004      	b.n	8004158 <HAL_GPIO_Init+0x204>
 800414e:	2302      	movs	r3, #2
 8004150:	e002      	b.n	8004158 <HAL_GPIO_Init+0x204>
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <HAL_GPIO_Init+0x204>
 8004156:	2300      	movs	r3, #0
 8004158:	69fa      	ldr	r2, [r7, #28]
 800415a:	f002 0203 	and.w	r2, r2, #3
 800415e:	0092      	lsls	r2, r2, #2
 8004160:	4093      	lsls	r3, r2
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	4313      	orrs	r3, r2
 8004166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004168:	4935      	ldr	r1, [pc, #212]	; (8004240 <HAL_GPIO_Init+0x2ec>)
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	089b      	lsrs	r3, r3, #2
 800416e:	3302      	adds	r3, #2
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004176:	4b38      	ldr	r3, [pc, #224]	; (8004258 <HAL_GPIO_Init+0x304>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	43db      	mvns	r3, r3
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	4013      	ands	r3, r2
 8004184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800419a:	4a2f      	ldr	r2, [pc, #188]	; (8004258 <HAL_GPIO_Init+0x304>)
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041a0:	4b2d      	ldr	r3, [pc, #180]	; (8004258 <HAL_GPIO_Init+0x304>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	43db      	mvns	r3, r3
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	4013      	ands	r3, r2
 80041ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041c4:	4a24      	ldr	r2, [pc, #144]	; (8004258 <HAL_GPIO_Init+0x304>)
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041ca:	4b23      	ldr	r3, [pc, #140]	; (8004258 <HAL_GPIO_Init+0x304>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	43db      	mvns	r3, r3
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	4013      	ands	r3, r2
 80041d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041ee:	4a1a      	ldr	r2, [pc, #104]	; (8004258 <HAL_GPIO_Init+0x304>)
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041f4:	4b18      	ldr	r3, [pc, #96]	; (8004258 <HAL_GPIO_Init+0x304>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	43db      	mvns	r3, r3
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	4013      	ands	r3, r2
 8004202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	4313      	orrs	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004218:	4a0f      	ldr	r2, [pc, #60]	; (8004258 <HAL_GPIO_Init+0x304>)
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	3301      	adds	r3, #1
 8004222:	61fb      	str	r3, [r7, #28]
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	2b0f      	cmp	r3, #15
 8004228:	f67f aea2 	bls.w	8003f70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800422c:	bf00      	nop
 800422e:	bf00      	nop
 8004230:	3724      	adds	r7, #36	; 0x24
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40023800 	.word	0x40023800
 8004240:	40013800 	.word	0x40013800
 8004244:	40020000 	.word	0x40020000
 8004248:	40020400 	.word	0x40020400
 800424c:	40020800 	.word	0x40020800
 8004250:	40020c00 	.word	0x40020c00
 8004254:	40021000 	.word	0x40021000
 8004258:	40013c00 	.word	0x40013c00

0800425c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	460b      	mov	r3, r1
 8004266:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	887b      	ldrh	r3, [r7, #2]
 800426e:	4013      	ands	r3, r2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d002      	beq.n	800427a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004274:	2301      	movs	r3, #1
 8004276:	73fb      	strb	r3, [r7, #15]
 8004278:	e001      	b.n	800427e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800427a:	2300      	movs	r3, #0
 800427c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800427e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	460b      	mov	r3, r1
 8004296:	807b      	strh	r3, [r7, #2]
 8004298:	4613      	mov	r3, r2
 800429a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800429c:	787b      	ldrb	r3, [r7, #1]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042a2:	887a      	ldrh	r2, [r7, #2]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042a8:	e003      	b.n	80042b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042aa:	887b      	ldrh	r3, [r7, #2]
 80042ac:	041a      	lsls	r2, r3, #16
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	619a      	str	r2, [r3, #24]
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
	...

080042c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	4603      	mov	r3, r0
 80042c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80042ca:	4b08      	ldr	r3, [pc, #32]	; (80042ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042cc:	695a      	ldr	r2, [r3, #20]
 80042ce:	88fb      	ldrh	r3, [r7, #6]
 80042d0:	4013      	ands	r3, r2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d006      	beq.n	80042e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042d6:	4a05      	ldr	r2, [pc, #20]	; (80042ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042d8:	88fb      	ldrh	r3, [r7, #6]
 80042da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042dc:	88fb      	ldrh	r3, [r7, #6]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fe f864 	bl	80023ac <HAL_GPIO_EXTI_Callback>
  }
}
 80042e4:	bf00      	nop
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40013c00 	.word	0x40013c00

080042f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e12b      	b.n	800455a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d106      	bne.n	800431c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7ff fa80 	bl	800381c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2224      	movs	r2, #36	; 0x24
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0201 	bic.w	r2, r2, #1
 8004332:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004342:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004352:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004354:	f002 fe76 	bl	8007044 <HAL_RCC_GetPCLK1Freq>
 8004358:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	4a81      	ldr	r2, [pc, #516]	; (8004564 <HAL_I2C_Init+0x274>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d807      	bhi.n	8004374 <HAL_I2C_Init+0x84>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4a80      	ldr	r2, [pc, #512]	; (8004568 <HAL_I2C_Init+0x278>)
 8004368:	4293      	cmp	r3, r2
 800436a:	bf94      	ite	ls
 800436c:	2301      	movls	r3, #1
 800436e:	2300      	movhi	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	e006      	b.n	8004382 <HAL_I2C_Init+0x92>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4a7d      	ldr	r2, [pc, #500]	; (800456c <HAL_I2C_Init+0x27c>)
 8004378:	4293      	cmp	r3, r2
 800437a:	bf94      	ite	ls
 800437c:	2301      	movls	r3, #1
 800437e:	2300      	movhi	r3, #0
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e0e7      	b.n	800455a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4a78      	ldr	r2, [pc, #480]	; (8004570 <HAL_I2C_Init+0x280>)
 800438e:	fba2 2303 	umull	r2, r3, r2, r3
 8004392:	0c9b      	lsrs	r3, r3, #18
 8004394:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	4a6a      	ldr	r2, [pc, #424]	; (8004564 <HAL_I2C_Init+0x274>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d802      	bhi.n	80043c4 <HAL_I2C_Init+0xd4>
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	3301      	adds	r3, #1
 80043c2:	e009      	b.n	80043d8 <HAL_I2C_Init+0xe8>
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80043ca:	fb02 f303 	mul.w	r3, r2, r3
 80043ce:	4a69      	ldr	r2, [pc, #420]	; (8004574 <HAL_I2C_Init+0x284>)
 80043d0:	fba2 2303 	umull	r2, r3, r2, r3
 80043d4:	099b      	lsrs	r3, r3, #6
 80043d6:	3301      	adds	r3, #1
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6812      	ldr	r2, [r2, #0]
 80043dc:	430b      	orrs	r3, r1
 80043de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80043ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	495c      	ldr	r1, [pc, #368]	; (8004564 <HAL_I2C_Init+0x274>)
 80043f4:	428b      	cmp	r3, r1
 80043f6:	d819      	bhi.n	800442c <HAL_I2C_Init+0x13c>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	1e59      	subs	r1, r3, #1
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	fbb1 f3f3 	udiv	r3, r1, r3
 8004406:	1c59      	adds	r1, r3, #1
 8004408:	f640 73fc 	movw	r3, #4092	; 0xffc
 800440c:	400b      	ands	r3, r1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00a      	beq.n	8004428 <HAL_I2C_Init+0x138>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	1e59      	subs	r1, r3, #1
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004420:	3301      	adds	r3, #1
 8004422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004426:	e051      	b.n	80044cc <HAL_I2C_Init+0x1dc>
 8004428:	2304      	movs	r3, #4
 800442a:	e04f      	b.n	80044cc <HAL_I2C_Init+0x1dc>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d111      	bne.n	8004458 <HAL_I2C_Init+0x168>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	1e58      	subs	r0, r3, #1
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6859      	ldr	r1, [r3, #4]
 800443c:	460b      	mov	r3, r1
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	440b      	add	r3, r1
 8004442:	fbb0 f3f3 	udiv	r3, r0, r3
 8004446:	3301      	adds	r3, #1
 8004448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800444c:	2b00      	cmp	r3, #0
 800444e:	bf0c      	ite	eq
 8004450:	2301      	moveq	r3, #1
 8004452:	2300      	movne	r3, #0
 8004454:	b2db      	uxtb	r3, r3
 8004456:	e012      	b.n	800447e <HAL_I2C_Init+0x18e>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	1e58      	subs	r0, r3, #1
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6859      	ldr	r1, [r3, #4]
 8004460:	460b      	mov	r3, r1
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	440b      	add	r3, r1
 8004466:	0099      	lsls	r1, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	fbb0 f3f3 	udiv	r3, r0, r3
 800446e:	3301      	adds	r3, #1
 8004470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004474:	2b00      	cmp	r3, #0
 8004476:	bf0c      	ite	eq
 8004478:	2301      	moveq	r3, #1
 800447a:	2300      	movne	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <HAL_I2C_Init+0x196>
 8004482:	2301      	movs	r3, #1
 8004484:	e022      	b.n	80044cc <HAL_I2C_Init+0x1dc>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10e      	bne.n	80044ac <HAL_I2C_Init+0x1bc>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	1e58      	subs	r0, r3, #1
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6859      	ldr	r1, [r3, #4]
 8004496:	460b      	mov	r3, r1
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	440b      	add	r3, r1
 800449c:	fbb0 f3f3 	udiv	r3, r0, r3
 80044a0:	3301      	adds	r3, #1
 80044a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044aa:	e00f      	b.n	80044cc <HAL_I2C_Init+0x1dc>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	1e58      	subs	r0, r3, #1
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6859      	ldr	r1, [r3, #4]
 80044b4:	460b      	mov	r3, r1
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	440b      	add	r3, r1
 80044ba:	0099      	lsls	r1, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	fbb0 f3f3 	udiv	r3, r0, r3
 80044c2:	3301      	adds	r3, #1
 80044c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044cc:	6879      	ldr	r1, [r7, #4]
 80044ce:	6809      	ldr	r1, [r1, #0]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	69da      	ldr	r2, [r3, #28]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6911      	ldr	r1, [r2, #16]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	68d2      	ldr	r2, [r2, #12]
 8004506:	4311      	orrs	r1, r2
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	6812      	ldr	r2, [r2, #0]
 800450c:	430b      	orrs	r3, r1
 800450e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	695a      	ldr	r2, [r3, #20]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0201 	orr.w	r2, r2, #1
 800453a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2220      	movs	r2, #32
 8004546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	000186a0 	.word	0x000186a0
 8004568:	001e847f 	.word	0x001e847f
 800456c:	003d08ff 	.word	0x003d08ff
 8004570:	431bde83 	.word	0x431bde83
 8004574:	10624dd3 	.word	0x10624dd3

08004578 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b088      	sub	sp, #32
 800457c:	af02      	add	r7, sp, #8
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	4608      	mov	r0, r1
 8004582:	4611      	mov	r1, r2
 8004584:	461a      	mov	r2, r3
 8004586:	4603      	mov	r3, r0
 8004588:	817b      	strh	r3, [r7, #10]
 800458a:	460b      	mov	r3, r1
 800458c:	813b      	strh	r3, [r7, #8]
 800458e:	4613      	mov	r3, r2
 8004590:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004592:	f7ff fbcd 	bl	8003d30 <HAL_GetTick>
 8004596:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b20      	cmp	r3, #32
 80045a2:	f040 80d9 	bne.w	8004758 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	2319      	movs	r3, #25
 80045ac:	2201      	movs	r2, #1
 80045ae:	496d      	ldr	r1, [pc, #436]	; (8004764 <HAL_I2C_Mem_Write+0x1ec>)
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 fc7f 	bl	8004eb4 <I2C_WaitOnFlagUntilTimeout>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80045bc:	2302      	movs	r3, #2
 80045be:	e0cc      	b.n	800475a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d101      	bne.n	80045ce <HAL_I2C_Mem_Write+0x56>
 80045ca:	2302      	movs	r3, #2
 80045cc:	e0c5      	b.n	800475a <HAL_I2C_Mem_Write+0x1e2>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d007      	beq.n	80045f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0201 	orr.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004602:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2221      	movs	r2, #33	; 0x21
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2240      	movs	r2, #64	; 0x40
 8004610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a3a      	ldr	r2, [r7, #32]
 800461e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004624:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462a:	b29a      	uxth	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4a4d      	ldr	r2, [pc, #308]	; (8004768 <HAL_I2C_Mem_Write+0x1f0>)
 8004634:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004636:	88f8      	ldrh	r0, [r7, #6]
 8004638:	893a      	ldrh	r2, [r7, #8]
 800463a:	8979      	ldrh	r1, [r7, #10]
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	9301      	str	r3, [sp, #4]
 8004640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	4603      	mov	r3, r0
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 fab6 	bl	8004bb8 <I2C_RequestMemoryWrite>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d052      	beq.n	80046f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e081      	b.n	800475a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 fd00 	bl	8005060 <I2C_WaitOnTXEFlagUntilTimeout>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00d      	beq.n	8004682 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	2b04      	cmp	r3, #4
 800466c:	d107      	bne.n	800467e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800467c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e06b      	b.n	800475a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	781a      	ldrb	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	3b01      	subs	r3, #1
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b04      	cmp	r3, #4
 80046be:	d11b      	bne.n	80046f8 <HAL_I2C_Mem_Write+0x180>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d017      	beq.n	80046f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046cc:	781a      	ldrb	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e2:	3b01      	subs	r3, #1
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	3b01      	subs	r3, #1
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1aa      	bne.n	8004656 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 fcec 	bl	80050e2 <I2C_WaitOnBTFFlagUntilTimeout>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00d      	beq.n	800472c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	2b04      	cmp	r3, #4
 8004716:	d107      	bne.n	8004728 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004726:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e016      	b.n	800475a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800473a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004754:	2300      	movs	r3, #0
 8004756:	e000      	b.n	800475a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004758:	2302      	movs	r3, #2
  }
}
 800475a:	4618      	mov	r0, r3
 800475c:	3718      	adds	r7, #24
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	00100002 	.word	0x00100002
 8004768:	ffff0000 	.word	0xffff0000

0800476c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b08c      	sub	sp, #48	; 0x30
 8004770:	af02      	add	r7, sp, #8
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	4608      	mov	r0, r1
 8004776:	4611      	mov	r1, r2
 8004778:	461a      	mov	r2, r3
 800477a:	4603      	mov	r3, r0
 800477c:	817b      	strh	r3, [r7, #10]
 800477e:	460b      	mov	r3, r1
 8004780:	813b      	strh	r3, [r7, #8]
 8004782:	4613      	mov	r3, r2
 8004784:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004786:	f7ff fad3 	bl	8003d30 <HAL_GetTick>
 800478a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b20      	cmp	r3, #32
 8004796:	f040 8208 	bne.w	8004baa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	2319      	movs	r3, #25
 80047a0:	2201      	movs	r2, #1
 80047a2:	497b      	ldr	r1, [pc, #492]	; (8004990 <HAL_I2C_Mem_Read+0x224>)
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 fb85 	bl	8004eb4 <I2C_WaitOnFlagUntilTimeout>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80047b0:	2302      	movs	r3, #2
 80047b2:	e1fb      	b.n	8004bac <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d101      	bne.n	80047c2 <HAL_I2C_Mem_Read+0x56>
 80047be:	2302      	movs	r3, #2
 80047c0:	e1f4      	b.n	8004bac <HAL_I2C_Mem_Read+0x440>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d007      	beq.n	80047e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f042 0201 	orr.w	r2, r2, #1
 80047e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2222      	movs	r2, #34	; 0x22
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2240      	movs	r2, #64	; 0x40
 8004804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004812:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004818:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481e:	b29a      	uxth	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4a5b      	ldr	r2, [pc, #364]	; (8004994 <HAL_I2C_Mem_Read+0x228>)
 8004828:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800482a:	88f8      	ldrh	r0, [r7, #6]
 800482c:	893a      	ldrh	r2, [r7, #8]
 800482e:	8979      	ldrh	r1, [r7, #10]
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	9301      	str	r3, [sp, #4]
 8004834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004836:	9300      	str	r3, [sp, #0]
 8004838:	4603      	mov	r3, r0
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 fa52 	bl	8004ce4 <I2C_RequestMemoryRead>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e1b0      	b.n	8004bac <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800484e:	2b00      	cmp	r3, #0
 8004850:	d113      	bne.n	800487a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004852:	2300      	movs	r3, #0
 8004854:	623b      	str	r3, [r7, #32]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	623b      	str	r3, [r7, #32]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	623b      	str	r3, [r7, #32]
 8004866:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	e184      	b.n	8004b84 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487e:	2b01      	cmp	r3, #1
 8004880:	d11b      	bne.n	80048ba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004890:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004892:	2300      	movs	r3, #0
 8004894:	61fb      	str	r3, [r7, #28]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	61fb      	str	r3, [r7, #28]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	61fb      	str	r3, [r7, #28]
 80048a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b6:	601a      	str	r2, [r3, #0]
 80048b8:	e164      	b.n	8004b84 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d11b      	bne.n	80048fa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048e2:	2300      	movs	r3, #0
 80048e4:	61bb      	str	r3, [r7, #24]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	61bb      	str	r3, [r7, #24]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	61bb      	str	r3, [r7, #24]
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	e144      	b.n	8004b84 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048fa:	2300      	movs	r3, #0
 80048fc:	617b      	str	r3, [r7, #20]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	617b      	str	r3, [r7, #20]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	617b      	str	r3, [r7, #20]
 800490e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004910:	e138      	b.n	8004b84 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004916:	2b03      	cmp	r3, #3
 8004918:	f200 80f1 	bhi.w	8004afe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004920:	2b01      	cmp	r3, #1
 8004922:	d123      	bne.n	800496c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004926:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 fc1b 	bl	8005164 <I2C_WaitOnRXNEFlagUntilTimeout>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e139      	b.n	8004bac <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691a      	ldr	r2, [r3, #16]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004954:	3b01      	subs	r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004960:	b29b      	uxth	r3, r3
 8004962:	3b01      	subs	r3, #1
 8004964:	b29a      	uxth	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	855a      	strh	r2, [r3, #42]	; 0x2a
 800496a:	e10b      	b.n	8004b84 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004970:	2b02      	cmp	r3, #2
 8004972:	d14e      	bne.n	8004a12 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497a:	2200      	movs	r2, #0
 800497c:	4906      	ldr	r1, [pc, #24]	; (8004998 <HAL_I2C_Mem_Read+0x22c>)
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 fa98 	bl	8004eb4 <I2C_WaitOnFlagUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d008      	beq.n	800499c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e10e      	b.n	8004bac <HAL_I2C_Mem_Read+0x440>
 800498e:	bf00      	nop
 8004990:	00100002 	.word	0x00100002
 8004994:	ffff0000 	.word	0xffff0000
 8004998:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	691a      	ldr	r2, [r3, #16]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	3b01      	subs	r3, #1
 80049d8:	b29a      	uxth	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	691a      	ldr	r2, [r3, #16]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	b2d2      	uxtb	r2, r2
 80049ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f0:	1c5a      	adds	r2, r3, #1
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049fa:	3b01      	subs	r3, #1
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a10:	e0b8      	b.n	8004b84 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a18:	2200      	movs	r2, #0
 8004a1a:	4966      	ldr	r1, [pc, #408]	; (8004bb4 <HAL_I2C_Mem_Read+0x448>)
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 fa49 	bl	8004eb4 <I2C_WaitOnFlagUntilTimeout>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e0bf      	b.n	8004bac <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691a      	ldr	r2, [r3, #16]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	b2d2      	uxtb	r2, r2
 8004a48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	1c5a      	adds	r2, r3, #1
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	3b01      	subs	r3, #1
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a74:	2200      	movs	r2, #0
 8004a76:	494f      	ldr	r1, [pc, #316]	; (8004bb4 <HAL_I2C_Mem_Read+0x448>)
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 fa1b 	bl	8004eb4 <I2C_WaitOnFlagUntilTimeout>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e091      	b.n	8004bac <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	691a      	ldr	r2, [r3, #16]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	691a      	ldr	r2, [r3, #16]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	b2d2      	uxtb	r2, r2
 8004ad6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	1c5a      	adds	r2, r3, #1
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	3b01      	subs	r3, #1
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004afc:	e042      	b.n	8004b84 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 fb2e 	bl	8005164 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e04c      	b.n	8004bac <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	691a      	ldr	r2, [r3, #16]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	d118      	bne.n	8004b84 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	b2d2      	uxtb	r2, r2
 8004b5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f47f aec2 	bne.w	8004912 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2220      	movs	r2, #32
 8004b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	e000      	b.n	8004bac <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004baa:	2302      	movs	r3, #2
  }
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3728      	adds	r7, #40	; 0x28
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	00010004 	.word	0x00010004

08004bb8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b088      	sub	sp, #32
 8004bbc:	af02      	add	r7, sp, #8
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	4608      	mov	r0, r1
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	817b      	strh	r3, [r7, #10]
 8004bca:	460b      	mov	r3, r1
 8004bcc:	813b      	strh	r3, [r7, #8]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004be0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f000 f960 	bl	8004eb4 <I2C_WaitOnFlagUntilTimeout>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00d      	beq.n	8004c16 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c08:	d103      	bne.n	8004c12 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e05f      	b.n	8004cd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c16:	897b      	ldrh	r3, [r7, #10]
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c28:	6a3a      	ldr	r2, [r7, #32]
 8004c2a:	492d      	ldr	r1, [pc, #180]	; (8004ce0 <I2C_RequestMemoryWrite+0x128>)
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 f998 	bl	8004f62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d001      	beq.n	8004c3c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e04c      	b.n	8004cd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	617b      	str	r3, [r7, #20]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	617b      	str	r3, [r7, #20]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c54:	6a39      	ldr	r1, [r7, #32]
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 fa02 	bl	8005060 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00d      	beq.n	8004c7e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d107      	bne.n	8004c7a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e02b      	b.n	8004cd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c7e:	88fb      	ldrh	r3, [r7, #6]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d105      	bne.n	8004c90 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c84:	893b      	ldrh	r3, [r7, #8]
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	611a      	str	r2, [r3, #16]
 8004c8e:	e021      	b.n	8004cd4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c90:	893b      	ldrh	r3, [r7, #8]
 8004c92:	0a1b      	lsrs	r3, r3, #8
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca0:	6a39      	ldr	r1, [r7, #32]
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f000 f9dc 	bl	8005060 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00d      	beq.n	8004cca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d107      	bne.n	8004cc6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cc4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e005      	b.n	8004cd6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cca:	893b      	ldrh	r3, [r7, #8]
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3718      	adds	r7, #24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	00010002 	.word	0x00010002

08004ce4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b088      	sub	sp, #32
 8004ce8:	af02      	add	r7, sp, #8
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	4608      	mov	r0, r1
 8004cee:	4611      	mov	r1, r2
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	817b      	strh	r3, [r7, #10]
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	813b      	strh	r3, [r7, #8]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d0c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	6a3b      	ldr	r3, [r7, #32]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 f8c2 	bl	8004eb4 <I2C_WaitOnFlagUntilTimeout>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00d      	beq.n	8004d52 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d44:	d103      	bne.n	8004d4e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e0aa      	b.n	8004ea8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d52:	897b      	ldrh	r3, [r7, #10]
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	461a      	mov	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	6a3a      	ldr	r2, [r7, #32]
 8004d66:	4952      	ldr	r1, [pc, #328]	; (8004eb0 <I2C_RequestMemoryRead+0x1cc>)
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 f8fa 	bl	8004f62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e097      	b.n	8004ea8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d78:	2300      	movs	r3, #0
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	617b      	str	r3, [r7, #20]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	617b      	str	r3, [r7, #20]
 8004d8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d90:	6a39      	ldr	r1, [r7, #32]
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 f964 	bl	8005060 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00d      	beq.n	8004dba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	d107      	bne.n	8004db6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e076      	b.n	8004ea8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004dba:	88fb      	ldrh	r3, [r7, #6]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d105      	bne.n	8004dcc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dc0:	893b      	ldrh	r3, [r7, #8]
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	611a      	str	r2, [r3, #16]
 8004dca:	e021      	b.n	8004e10 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004dcc:	893b      	ldrh	r3, [r7, #8]
 8004dce:	0a1b      	lsrs	r3, r3, #8
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ddc:	6a39      	ldr	r1, [r7, #32]
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 f93e 	bl	8005060 <I2C_WaitOnTXEFlagUntilTimeout>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00d      	beq.n	8004e06 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dee:	2b04      	cmp	r3, #4
 8004df0:	d107      	bne.n	8004e02 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e050      	b.n	8004ea8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e06:	893b      	ldrh	r3, [r7, #8]
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e12:	6a39      	ldr	r1, [r7, #32]
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 f923 	bl	8005060 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00d      	beq.n	8004e3c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e24:	2b04      	cmp	r3, #4
 8004e26:	d107      	bne.n	8004e38 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e36:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e035      	b.n	8004ea8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e4a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f000 f82b 	bl	8004eb4 <I2C_WaitOnFlagUntilTimeout>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00d      	beq.n	8004e80 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e72:	d103      	bne.n	8004e7c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e013      	b.n	8004ea8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e80:	897b      	ldrh	r3, [r7, #10]
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	f043 0301 	orr.w	r3, r3, #1
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	6a3a      	ldr	r2, [r7, #32]
 8004e94:	4906      	ldr	r1, [pc, #24]	; (8004eb0 <I2C_RequestMemoryRead+0x1cc>)
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f000 f863 	bl	8004f62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e000      	b.n	8004ea8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	00010002 	.word	0x00010002

08004eb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	603b      	str	r3, [r7, #0]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ec4:	e025      	b.n	8004f12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ecc:	d021      	beq.n	8004f12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ece:	f7fe ff2f 	bl	8003d30 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d302      	bcc.n	8004ee4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d116      	bne.n	8004f12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2220      	movs	r2, #32
 8004eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	f043 0220 	orr.w	r2, r3, #32
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e023      	b.n	8004f5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	0c1b      	lsrs	r3, r3, #16
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d10d      	bne.n	8004f38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	43da      	mvns	r2, r3
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	4013      	ands	r3, r2
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	bf0c      	ite	eq
 8004f2e:	2301      	moveq	r3, #1
 8004f30:	2300      	movne	r3, #0
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	461a      	mov	r2, r3
 8004f36:	e00c      	b.n	8004f52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	43da      	mvns	r2, r3
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	4013      	ands	r3, r2
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	bf0c      	ite	eq
 8004f4a:	2301      	moveq	r3, #1
 8004f4c:	2300      	movne	r3, #0
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	461a      	mov	r2, r3
 8004f52:	79fb      	ldrb	r3, [r7, #7]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d0b6      	beq.n	8004ec6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b084      	sub	sp, #16
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	60f8      	str	r0, [r7, #12]
 8004f6a:	60b9      	str	r1, [r7, #8]
 8004f6c:	607a      	str	r2, [r7, #4]
 8004f6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f70:	e051      	b.n	8005016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f80:	d123      	bne.n	8004fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb6:	f043 0204 	orr.w	r2, r3, #4
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e046      	b.n	8005058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd0:	d021      	beq.n	8005016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fd2:	f7fe fead 	bl	8003d30 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d302      	bcc.n	8004fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d116      	bne.n	8005016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	f043 0220 	orr.w	r2, r3, #32
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e020      	b.n	8005058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	0c1b      	lsrs	r3, r3, #16
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b01      	cmp	r3, #1
 800501e:	d10c      	bne.n	800503a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	43da      	mvns	r2, r3
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	4013      	ands	r3, r2
 800502c:	b29b      	uxth	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	bf14      	ite	ne
 8005032:	2301      	movne	r3, #1
 8005034:	2300      	moveq	r3, #0
 8005036:	b2db      	uxtb	r3, r3
 8005038:	e00b      	b.n	8005052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	43da      	mvns	r2, r3
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	4013      	ands	r3, r2
 8005046:	b29b      	uxth	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	bf14      	ite	ne
 800504c:	2301      	movne	r3, #1
 800504e:	2300      	moveq	r3, #0
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d18d      	bne.n	8004f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800506c:	e02d      	b.n	80050ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f000 f8ce 	bl	8005210 <I2C_IsAcknowledgeFailed>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e02d      	b.n	80050da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005084:	d021      	beq.n	80050ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005086:	f7fe fe53 	bl	8003d30 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	429a      	cmp	r2, r3
 8005094:	d302      	bcc.n	800509c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d116      	bne.n	80050ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2220      	movs	r2, #32
 80050a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	f043 0220 	orr.w	r2, r3, #32
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e007      	b.n	80050da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d4:	2b80      	cmp	r3, #128	; 0x80
 80050d6:	d1ca      	bne.n	800506e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b084      	sub	sp, #16
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	60f8      	str	r0, [r7, #12]
 80050ea:	60b9      	str	r1, [r7, #8]
 80050ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050ee:	e02d      	b.n	800514c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f000 f88d 	bl	8005210 <I2C_IsAcknowledgeFailed>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e02d      	b.n	800515c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005106:	d021      	beq.n	800514c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005108:	f7fe fe12 	bl	8003d30 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	429a      	cmp	r2, r3
 8005116:	d302      	bcc.n	800511e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d116      	bne.n	800514c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2220      	movs	r2, #32
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005138:	f043 0220 	orr.w	r2, r3, #32
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e007      	b.n	800515c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	f003 0304 	and.w	r3, r3, #4
 8005156:	2b04      	cmp	r3, #4
 8005158:	d1ca      	bne.n	80050f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005170:	e042      	b.n	80051f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	f003 0310 	and.w	r3, r3, #16
 800517c:	2b10      	cmp	r3, #16
 800517e:	d119      	bne.n	80051b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f06f 0210 	mvn.w	r2, #16
 8005188:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2220      	movs	r2, #32
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e029      	b.n	8005208 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051b4:	f7fe fdbc 	bl	8003d30 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d302      	bcc.n	80051ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d116      	bne.n	80051f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2220      	movs	r2, #32
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e4:	f043 0220 	orr.w	r2, r3, #32
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e007      	b.n	8005208 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005202:	2b40      	cmp	r3, #64	; 0x40
 8005204:	d1b5      	bne.n	8005172 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005226:	d11b      	bne.n	8005260 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005230:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2220      	movs	r2, #32
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524c:	f043 0204 	orr.w	r2, r3, #4
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e000      	b.n	8005262 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800526e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005270:	b08f      	sub	sp, #60	; 0x3c
 8005272:	af0a      	add	r7, sp, #40	; 0x28
 8005274:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e10f      	b.n	80054a0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d106      	bne.n	80052a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f00a f8ee 	bl	800f47c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2203      	movs	r2, #3
 80052a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d102      	bne.n	80052ba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4618      	mov	r0, r3
 80052c0:	f003 fcf7 	bl	8008cb2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	603b      	str	r3, [r7, #0]
 80052ca:	687e      	ldr	r6, [r7, #4]
 80052cc:	466d      	mov	r5, sp
 80052ce:	f106 0410 	add.w	r4, r6, #16
 80052d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80052de:	e885 0003 	stmia.w	r5, {r0, r1}
 80052e2:	1d33      	adds	r3, r6, #4
 80052e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052e6:	6838      	ldr	r0, [r7, #0]
 80052e8:	f003 fbce 	bl	8008a88 <USB_CoreInit>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d005      	beq.n	80052fe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2202      	movs	r2, #2
 80052f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e0d0      	b.n	80054a0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2100      	movs	r1, #0
 8005304:	4618      	mov	r0, r3
 8005306:	f003 fce5 	bl	8008cd4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800530a:	2300      	movs	r3, #0
 800530c:	73fb      	strb	r3, [r7, #15]
 800530e:	e04a      	b.n	80053a6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005310:	7bfa      	ldrb	r2, [r7, #15]
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	4613      	mov	r3, r2
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	4413      	add	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	440b      	add	r3, r1
 800531e:	333d      	adds	r3, #61	; 0x3d
 8005320:	2201      	movs	r2, #1
 8005322:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005324:	7bfa      	ldrb	r2, [r7, #15]
 8005326:	6879      	ldr	r1, [r7, #4]
 8005328:	4613      	mov	r3, r2
 800532a:	00db      	lsls	r3, r3, #3
 800532c:	4413      	add	r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	440b      	add	r3, r1
 8005332:	333c      	adds	r3, #60	; 0x3c
 8005334:	7bfa      	ldrb	r2, [r7, #15]
 8005336:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005338:	7bfa      	ldrb	r2, [r7, #15]
 800533a:	7bfb      	ldrb	r3, [r7, #15]
 800533c:	b298      	uxth	r0, r3
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	4613      	mov	r3, r2
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	4413      	add	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	440b      	add	r3, r1
 800534a:	3344      	adds	r3, #68	; 0x44
 800534c:	4602      	mov	r2, r0
 800534e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005350:	7bfa      	ldrb	r2, [r7, #15]
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	4613      	mov	r3, r2
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	4413      	add	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	440b      	add	r3, r1
 800535e:	3340      	adds	r3, #64	; 0x40
 8005360:	2200      	movs	r2, #0
 8005362:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005364:	7bfa      	ldrb	r2, [r7, #15]
 8005366:	6879      	ldr	r1, [r7, #4]
 8005368:	4613      	mov	r3, r2
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	4413      	add	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	440b      	add	r3, r1
 8005372:	3348      	adds	r3, #72	; 0x48
 8005374:	2200      	movs	r2, #0
 8005376:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005378:	7bfa      	ldrb	r2, [r7, #15]
 800537a:	6879      	ldr	r1, [r7, #4]
 800537c:	4613      	mov	r3, r2
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	4413      	add	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	440b      	add	r3, r1
 8005386:	334c      	adds	r3, #76	; 0x4c
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800538c:	7bfa      	ldrb	r2, [r7, #15]
 800538e:	6879      	ldr	r1, [r7, #4]
 8005390:	4613      	mov	r3, r2
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	4413      	add	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	440b      	add	r3, r1
 800539a:	3354      	adds	r3, #84	; 0x54
 800539c:	2200      	movs	r2, #0
 800539e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
 80053a2:	3301      	adds	r3, #1
 80053a4:	73fb      	strb	r3, [r7, #15]
 80053a6:	7bfa      	ldrb	r2, [r7, #15]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d3af      	bcc.n	8005310 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053b0:	2300      	movs	r3, #0
 80053b2:	73fb      	strb	r3, [r7, #15]
 80053b4:	e044      	b.n	8005440 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80053b6:	7bfa      	ldrb	r2, [r7, #15]
 80053b8:	6879      	ldr	r1, [r7, #4]
 80053ba:	4613      	mov	r3, r2
 80053bc:	00db      	lsls	r3, r3, #3
 80053be:	4413      	add	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	440b      	add	r3, r1
 80053c4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80053c8:	2200      	movs	r2, #0
 80053ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80053cc:	7bfa      	ldrb	r2, [r7, #15]
 80053ce:	6879      	ldr	r1, [r7, #4]
 80053d0:	4613      	mov	r3, r2
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	4413      	add	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	440b      	add	r3, r1
 80053da:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80053de:	7bfa      	ldrb	r2, [r7, #15]
 80053e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80053e2:	7bfa      	ldrb	r2, [r7, #15]
 80053e4:	6879      	ldr	r1, [r7, #4]
 80053e6:	4613      	mov	r3, r2
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	4413      	add	r3, r2
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	440b      	add	r3, r1
 80053f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80053f4:	2200      	movs	r2, #0
 80053f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80053f8:	7bfa      	ldrb	r2, [r7, #15]
 80053fa:	6879      	ldr	r1, [r7, #4]
 80053fc:	4613      	mov	r3, r2
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	4413      	add	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	440b      	add	r3, r1
 8005406:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800540a:	2200      	movs	r2, #0
 800540c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800540e:	7bfa      	ldrb	r2, [r7, #15]
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	4613      	mov	r3, r2
 8005414:	00db      	lsls	r3, r3, #3
 8005416:	4413      	add	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	440b      	add	r3, r1
 800541c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005424:	7bfa      	ldrb	r2, [r7, #15]
 8005426:	6879      	ldr	r1, [r7, #4]
 8005428:	4613      	mov	r3, r2
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	4413      	add	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	440b      	add	r3, r1
 8005432:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800543a:	7bfb      	ldrb	r3, [r7, #15]
 800543c:	3301      	adds	r3, #1
 800543e:	73fb      	strb	r3, [r7, #15]
 8005440:	7bfa      	ldrb	r2, [r7, #15]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	429a      	cmp	r2, r3
 8005448:	d3b5      	bcc.n	80053b6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	603b      	str	r3, [r7, #0]
 8005450:	687e      	ldr	r6, [r7, #4]
 8005452:	466d      	mov	r5, sp
 8005454:	f106 0410 	add.w	r4, r6, #16
 8005458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800545a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800545c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800545e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005460:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005464:	e885 0003 	stmia.w	r5, {r0, r1}
 8005468:	1d33      	adds	r3, r6, #4
 800546a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800546c:	6838      	ldr	r0, [r7, #0]
 800546e:	f003 fc7d 	bl	8008d6c <USB_DevInit>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d005      	beq.n	8005484 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e00d      	b.n	80054a0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4618      	mov	r0, r3
 800549a:	f004 fdcc 	bl	800a036 <USB_DevDisconnect>

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054a8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d101      	bne.n	80054c4 <HAL_PCD_Start+0x1c>
 80054c0:	2302      	movs	r3, #2
 80054c2:	e020      	b.n	8005506 <HAL_PCD_Start+0x5e>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d109      	bne.n	80054e8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d005      	beq.n	80054e8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4618      	mov	r0, r3
 80054ee:	f003 fbcf 	bl	8008c90 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f004 fd7c 	bl	8009ff4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800550e:	b590      	push	{r4, r7, lr}
 8005510:	b08d      	sub	sp, #52	; 0x34
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4618      	mov	r0, r3
 8005526:	f004 fe3a 	bl	800a19e <USB_GetMode>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	f040 848a 	bne.w	8005e46 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4618      	mov	r0, r3
 8005538:	f004 fd9e 	bl	800a078 <USB_ReadInterrupts>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 8480 	beq.w	8005e44 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	0a1b      	lsrs	r3, r3, #8
 800554e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4618      	mov	r0, r3
 800555e:	f004 fd8b 	bl	800a078 <USB_ReadInterrupts>
 8005562:	4603      	mov	r3, r0
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b02      	cmp	r3, #2
 800556a:	d107      	bne.n	800557c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	695a      	ldr	r2, [r3, #20]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f002 0202 	and.w	r2, r2, #2
 800557a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4618      	mov	r0, r3
 8005582:	f004 fd79 	bl	800a078 <USB_ReadInterrupts>
 8005586:	4603      	mov	r3, r0
 8005588:	f003 0310 	and.w	r3, r3, #16
 800558c:	2b10      	cmp	r3, #16
 800558e:	d161      	bne.n	8005654 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	699a      	ldr	r2, [r3, #24]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 0210 	bic.w	r2, r2, #16
 800559e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	f003 020f 	and.w	r2, r3, #15
 80055ac:	4613      	mov	r3, r2
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	4413      	add	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	4413      	add	r3, r2
 80055bc:	3304      	adds	r3, #4
 80055be:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	0c5b      	lsrs	r3, r3, #17
 80055c4:	f003 030f 	and.w	r3, r3, #15
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d124      	bne.n	8005616 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80055cc:	69ba      	ldr	r2, [r7, #24]
 80055ce:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80055d2:	4013      	ands	r3, r2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d035      	beq.n	8005644 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	091b      	lsrs	r3, r3, #4
 80055e0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80055e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	461a      	mov	r2, r3
 80055ea:	6a38      	ldr	r0, [r7, #32]
 80055ec:	f004 fbb0 	bl	8009d50 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	691a      	ldr	r2, [r3, #16]
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	091b      	lsrs	r3, r3, #4
 80055f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055fc:	441a      	add	r2, r3
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	6a1a      	ldr	r2, [r3, #32]
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	091b      	lsrs	r3, r3, #4
 800560a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800560e:	441a      	add	r2, r3
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	621a      	str	r2, [r3, #32]
 8005614:	e016      	b.n	8005644 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	0c5b      	lsrs	r3, r3, #17
 800561a:	f003 030f 	and.w	r3, r3, #15
 800561e:	2b06      	cmp	r3, #6
 8005620:	d110      	bne.n	8005644 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005628:	2208      	movs	r2, #8
 800562a:	4619      	mov	r1, r3
 800562c:	6a38      	ldr	r0, [r7, #32]
 800562e:	f004 fb8f 	bl	8009d50 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	6a1a      	ldr	r2, [r3, #32]
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	091b      	lsrs	r3, r3, #4
 800563a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800563e:	441a      	add	r2, r3
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	699a      	ldr	r2, [r3, #24]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f042 0210 	orr.w	r2, r2, #16
 8005652:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4618      	mov	r0, r3
 800565a:	f004 fd0d 	bl	800a078 <USB_ReadInterrupts>
 800565e:	4603      	mov	r3, r0
 8005660:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005664:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005668:	f040 80a7 	bne.w	80057ba <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800566c:	2300      	movs	r3, #0
 800566e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4618      	mov	r0, r3
 8005676:	f004 fd12 	bl	800a09e <USB_ReadDevAllOutEpInterrupt>
 800567a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800567c:	e099      	b.n	80057b2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800567e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 808e 	beq.w	80057a6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005690:	b2d2      	uxtb	r2, r2
 8005692:	4611      	mov	r1, r2
 8005694:	4618      	mov	r0, r3
 8005696:	f004 fd36 	bl	800a106 <USB_ReadDevOutEPInterrupt>
 800569a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00c      	beq.n	80056c0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b2:	461a      	mov	r2, r3
 80056b4:	2301      	movs	r3, #1
 80056b6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80056b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 fec2 	bl	8006444 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	f003 0308 	and.w	r3, r3, #8
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00c      	beq.n	80056e4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d6:	461a      	mov	r2, r3
 80056d8:	2308      	movs	r3, #8
 80056da:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80056dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 ff98 	bl	8006614 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	f003 0310 	and.w	r3, r3, #16
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d008      	beq.n	8005700 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fa:	461a      	mov	r2, r3
 80056fc:	2310      	movs	r3, #16
 80056fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d030      	beq.n	800576c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005712:	2b80      	cmp	r3, #128	; 0x80
 8005714:	d109      	bne.n	800572a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	69fa      	ldr	r2, [r7, #28]
 8005720:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005724:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005728:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800572a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800572c:	4613      	mov	r3, r2
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	4413      	add	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	4413      	add	r3, r2
 800573c:	3304      	adds	r3, #4
 800573e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	78db      	ldrb	r3, [r3, #3]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d108      	bne.n	800575a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	2200      	movs	r2, #0
 800574c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	b2db      	uxtb	r3, r3
 8005752:	4619      	mov	r1, r3
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f009 ff8d 	bl	800f674 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	015a      	lsls	r2, r3, #5
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	4413      	add	r3, r2
 8005762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005766:	461a      	mov	r2, r3
 8005768:	2302      	movs	r3, #2
 800576a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	f003 0320 	and.w	r3, r3, #32
 8005772:	2b00      	cmp	r3, #0
 8005774:	d008      	beq.n	8005788 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	4413      	add	r3, r2
 800577e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005782:	461a      	mov	r2, r3
 8005784:	2320      	movs	r3, #32
 8005786:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d009      	beq.n	80057a6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579e:	461a      	mov	r2, r3
 80057a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80057a4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	3301      	adds	r3, #1
 80057aa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80057ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ae:	085b      	lsrs	r3, r3, #1
 80057b0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80057b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f47f af62 	bne.w	800567e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4618      	mov	r0, r3
 80057c0:	f004 fc5a 	bl	800a078 <USB_ReadInterrupts>
 80057c4:	4603      	mov	r3, r0
 80057c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057ce:	f040 80db 	bne.w	8005988 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f004 fc7b 	bl	800a0d2 <USB_ReadDevAllInEpInterrupt>
 80057dc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80057de:	2300      	movs	r3, #0
 80057e0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80057e2:	e0cd      	b.n	8005980 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80057e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f000 80c2 	beq.w	8005974 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f6:	b2d2      	uxtb	r2, r2
 80057f8:	4611      	mov	r1, r2
 80057fa:	4618      	mov	r0, r3
 80057fc:	f004 fca1 	bl	800a142 <USB_ReadDevInEPInterrupt>
 8005800:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b00      	cmp	r3, #0
 800580a:	d057      	beq.n	80058bc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	f003 030f 	and.w	r3, r3, #15
 8005812:	2201      	movs	r2, #1
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	43db      	mvns	r3, r3
 8005826:	69f9      	ldr	r1, [r7, #28]
 8005828:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800582c:	4013      	ands	r3, r2
 800582e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	015a      	lsls	r2, r3, #5
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	4413      	add	r3, r2
 8005838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583c:	461a      	mov	r2, r3
 800583e:	2301      	movs	r3, #1
 8005840:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d132      	bne.n	80058b0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800584a:	6879      	ldr	r1, [r7, #4]
 800584c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800584e:	4613      	mov	r3, r2
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	4413      	add	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	440b      	add	r3, r1
 8005858:	334c      	adds	r3, #76	; 0x4c
 800585a:	6819      	ldr	r1, [r3, #0]
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005860:	4613      	mov	r3, r2
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	4413      	add	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4403      	add	r3, r0
 800586a:	3348      	adds	r3, #72	; 0x48
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4419      	add	r1, r3
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005874:	4613      	mov	r3, r2
 8005876:	00db      	lsls	r3, r3, #3
 8005878:	4413      	add	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4403      	add	r3, r0
 800587e:	334c      	adds	r3, #76	; 0x4c
 8005880:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	2b00      	cmp	r3, #0
 8005886:	d113      	bne.n	80058b0 <HAL_PCD_IRQHandler+0x3a2>
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800588c:	4613      	mov	r3, r2
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	4413      	add	r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	440b      	add	r3, r1
 8005896:	3354      	adds	r3, #84	; 0x54
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d108      	bne.n	80058b0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6818      	ldr	r0, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80058a8:	461a      	mov	r2, r3
 80058aa:	2101      	movs	r1, #1
 80058ac:	f004 fca8 	bl	800a200 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	4619      	mov	r1, r3
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f009 fe61 	bl	800f57e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	f003 0308 	and.w	r3, r3, #8
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d008      	beq.n	80058d8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	015a      	lsls	r2, r3, #5
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d2:	461a      	mov	r2, r3
 80058d4:	2308      	movs	r3, #8
 80058d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f003 0310 	and.w	r3, r3, #16
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d008      	beq.n	80058f4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ee:	461a      	mov	r2, r3
 80058f0:	2310      	movs	r3, #16
 80058f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d008      	beq.n	8005910 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	4413      	add	r3, r2
 8005906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800590a:	461a      	mov	r2, r3
 800590c:	2340      	movs	r3, #64	; 0x40
 800590e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d023      	beq.n	8005962 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800591a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800591c:	6a38      	ldr	r0, [r7, #32]
 800591e:	f003 fb89 	bl	8009034 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005924:	4613      	mov	r3, r2
 8005926:	00db      	lsls	r3, r3, #3
 8005928:	4413      	add	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	3338      	adds	r3, #56	; 0x38
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	4413      	add	r3, r2
 8005932:	3304      	adds	r3, #4
 8005934:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	78db      	ldrb	r3, [r3, #3]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d108      	bne.n	8005950 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2200      	movs	r2, #0
 8005942:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	b2db      	uxtb	r3, r3
 8005948:	4619      	mov	r1, r3
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f009 fea4 	bl	800f698 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595c:	461a      	mov	r2, r3
 800595e:	2302      	movs	r3, #2
 8005960:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005968:	2b00      	cmp	r3, #0
 800596a:	d003      	beq.n	8005974 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800596c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fcdb 	bl	800632a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	3301      	adds	r3, #1
 8005978:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800597a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597c:	085b      	lsrs	r3, r3, #1
 800597e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005982:	2b00      	cmp	r3, #0
 8005984:	f47f af2e 	bne.w	80057e4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4618      	mov	r0, r3
 800598e:	f004 fb73 	bl	800a078 <USB_ReadInterrupts>
 8005992:	4603      	mov	r3, r0
 8005994:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005998:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800599c:	d122      	bne.n	80059e4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	69fa      	ldr	r2, [r7, #28]
 80059a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059ac:	f023 0301 	bic.w	r3, r3, #1
 80059b0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d108      	bne.n	80059ce <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80059c4:	2100      	movs	r1, #0
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fec2 	bl	8006750 <HAL_PCDEx_LPM_Callback>
 80059cc:	e002      	b.n	80059d4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f009 fe42 	bl	800f658 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	695a      	ldr	r2, [r3, #20]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80059e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f004 fb45 	bl	800a078 <USB_ReadInterrupts>
 80059ee:	4603      	mov	r3, r0
 80059f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059f8:	d112      	bne.n	8005a20 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d102      	bne.n	8005a10 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f009 fdfe 	bl	800f60c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695a      	ldr	r2, [r3, #20]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005a1e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f004 fb27 	bl	800a078 <USB_ReadInterrupts>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a34:	f040 80b7 	bne.w	8005ba6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	69fa      	ldr	r2, [r7, #28]
 8005a42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a46:	f023 0301 	bic.w	r3, r3, #1
 8005a4a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2110      	movs	r1, #16
 8005a52:	4618      	mov	r0, r3
 8005a54:	f003 faee 	bl	8009034 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a58:	2300      	movs	r3, #0
 8005a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a5c:	e046      	b.n	8005aec <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a70:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a82:	0151      	lsls	r1, r2, #5
 8005a84:	69fa      	ldr	r2, [r7, #28]
 8005a86:	440a      	add	r2, r1
 8005a88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a90:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005aa4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ab6:	0151      	lsls	r1, r2, #5
 8005ab8:	69fa      	ldr	r2, [r7, #28]
 8005aba:	440a      	add	r2, r1
 8005abc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ac0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ac4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac8:	015a      	lsls	r2, r3, #5
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	4413      	add	r3, r2
 8005ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ad6:	0151      	lsls	r1, r2, #5
 8005ad8:	69fa      	ldr	r2, [r7, #28]
 8005ada:	440a      	add	r2, r1
 8005adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ae0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ae4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae8:	3301      	adds	r3, #1
 8005aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d3b3      	bcc.n	8005a5e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005afc:	69db      	ldr	r3, [r3, #28]
 8005afe:	69fa      	ldr	r2, [r7, #28]
 8005b00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b04:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005b08:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d016      	beq.n	8005b40 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b1c:	69fa      	ldr	r2, [r7, #28]
 8005b1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b22:	f043 030b 	orr.w	r3, r3, #11
 8005b26:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b32:	69fa      	ldr	r2, [r7, #28]
 8005b34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b38:	f043 030b 	orr.w	r3, r3, #11
 8005b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8005b3e:	e015      	b.n	8005b6c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	69fa      	ldr	r2, [r7, #28]
 8005b4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005b52:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005b56:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	69fa      	ldr	r2, [r7, #28]
 8005b62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b66:	f043 030b 	orr.w	r3, r3, #11
 8005b6a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	69fa      	ldr	r2, [r7, #28]
 8005b76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b7a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005b7e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6818      	ldr	r0, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005b90:	461a      	mov	r2, r3
 8005b92:	f004 fb35 	bl	800a200 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	695a      	ldr	r2, [r3, #20]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005ba4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f004 fa64 	bl	800a078 <USB_ReadInterrupts>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bba:	d124      	bne.n	8005c06 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f004 fafa 	bl	800a1ba <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f003 faaf 	bl	800912e <USB_GetDevSpeed>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681c      	ldr	r4, [r3, #0]
 8005bdc:	f001 fa26 	bl	800702c <HAL_RCC_GetHCLKFreq>
 8005be0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	461a      	mov	r2, r3
 8005bea:	4620      	mov	r0, r4
 8005bec:	f002 ffae 	bl	8008b4c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f009 fcec 	bl	800f5ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	695a      	ldr	r2, [r3, #20]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005c04:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f004 fa34 	bl	800a078 <USB_ReadInterrupts>
 8005c10:	4603      	mov	r3, r0
 8005c12:	f003 0308 	and.w	r3, r3, #8
 8005c16:	2b08      	cmp	r3, #8
 8005c18:	d10a      	bne.n	8005c30 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f009 fcc9 	bl	800f5b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	695a      	ldr	r2, [r3, #20]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f002 0208 	and.w	r2, r2, #8
 8005c2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4618      	mov	r0, r3
 8005c36:	f004 fa1f 	bl	800a078 <USB_ReadInterrupts>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c40:	2b80      	cmp	r3, #128	; 0x80
 8005c42:	d122      	bne.n	8005c8a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c50:	2301      	movs	r3, #1
 8005c52:	627b      	str	r3, [r7, #36]	; 0x24
 8005c54:	e014      	b.n	8005c80 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005c56:	6879      	ldr	r1, [r7, #4]
 8005c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	00db      	lsls	r3, r3, #3
 8005c5e:	4413      	add	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	440b      	add	r3, r1
 8005c64:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d105      	bne.n	8005c7a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	4619      	mov	r1, r3
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fb27 	bl	80062c8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d3e5      	bcc.n	8005c56 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f004 f9f2 	bl	800a078 <USB_ReadInterrupts>
 8005c94:	4603      	mov	r3, r0
 8005c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c9e:	d13b      	bne.n	8005d18 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca4:	e02b      	b.n	8005cfe <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005cb6:	6879      	ldr	r1, [r7, #4]
 8005cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cba:	4613      	mov	r3, r2
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	4413      	add	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	440b      	add	r3, r1
 8005cc4:	3340      	adds	r3, #64	; 0x40
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d115      	bne.n	8005cf8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005ccc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	da12      	bge.n	8005cf8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005cd2:	6879      	ldr	r1, [r7, #4]
 8005cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	4413      	add	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	440b      	add	r3, r1
 8005ce0:	333f      	adds	r3, #63	; 0x3f
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fae8 	bl	80062c8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d3ce      	bcc.n	8005ca6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	695a      	ldr	r2, [r3, #20]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005d16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f004 f9ab 	bl	800a078 <USB_ReadInterrupts>
 8005d22:	4603      	mov	r3, r0
 8005d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d2c:	d155      	bne.n	8005dda <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d2e:	2301      	movs	r3, #1
 8005d30:	627b      	str	r3, [r7, #36]	; 0x24
 8005d32:	e045      	b.n	8005dc0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	015a      	lsls	r2, r3, #5
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d44:	6879      	ldr	r1, [r7, #4]
 8005d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d48:	4613      	mov	r3, r2
 8005d4a:	00db      	lsls	r3, r3, #3
 8005d4c:	4413      	add	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	440b      	add	r3, r1
 8005d52:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d12e      	bne.n	8005dba <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005d5c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	da2b      	bge.n	8005dba <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005d6e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d121      	bne.n	8005dba <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005d76:	6879      	ldr	r1, [r7, #4]
 8005d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	00db      	lsls	r3, r3, #3
 8005d7e:	4413      	add	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	440b      	add	r3, r1
 8005d84:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005d88:	2201      	movs	r2, #1
 8005d8a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005d8c:	6a3b      	ldr	r3, [r7, #32]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005d94:	6a3b      	ldr	r3, [r7, #32]
 8005d96:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	695b      	ldr	r3, [r3, #20]
 8005d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10a      	bne.n	8005dba <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	69fa      	ldr	r2, [r7, #28]
 8005dae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005db2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005db6:	6053      	str	r3, [r2, #4]
            break;
 8005db8:	e007      	b.n	8005dca <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d3b4      	bcc.n	8005d34 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	695a      	ldr	r2, [r3, #20]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005dd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f004 f94a 	bl	800a078 <USB_ReadInterrupts>
 8005de4:	4603      	mov	r3, r0
 8005de6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dee:	d10a      	bne.n	8005e06 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f009 fc63 	bl	800f6bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	695a      	ldr	r2, [r3, #20]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005e04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f004 f934 	bl	800a078 <USB_ReadInterrupts>
 8005e10:	4603      	mov	r3, r0
 8005e12:	f003 0304 	and.w	r3, r3, #4
 8005e16:	2b04      	cmp	r3, #4
 8005e18:	d115      	bne.n	8005e46 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	f003 0304 	and.w	r3, r3, #4
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d002      	beq.n	8005e32 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f009 fc53 	bl	800f6d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6859      	ldr	r1, [r3, #4]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	605a      	str	r2, [r3, #4]
 8005e42:	e000      	b.n	8005e46 <HAL_PCD_IRQHandler+0x938>
      return;
 8005e44:	bf00      	nop
    }
  }
}
 8005e46:	3734      	adds	r7, #52	; 0x34
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd90      	pop	{r4, r7, pc}

08005e4c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	460b      	mov	r3, r1
 8005e56:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d101      	bne.n	8005e66 <HAL_PCD_SetAddress+0x1a>
 8005e62:	2302      	movs	r3, #2
 8005e64:	e013      	b.n	8005e8e <HAL_PCD_SetAddress+0x42>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	78fa      	ldrb	r2, [r7, #3]
 8005e72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	78fa      	ldrb	r2, [r7, #3]
 8005e7c:	4611      	mov	r1, r2
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f004 f892 	bl	8009fa8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3708      	adds	r7, #8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b084      	sub	sp, #16
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
 8005e9e:	4608      	mov	r0, r1
 8005ea0:	4611      	mov	r1, r2
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	70fb      	strb	r3, [r7, #3]
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	803b      	strh	r3, [r7, #0]
 8005eac:	4613      	mov	r3, r2
 8005eae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005eb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	da0f      	bge.n	8005edc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ebc:	78fb      	ldrb	r3, [r7, #3]
 8005ebe:	f003 020f 	and.w	r2, r3, #15
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	00db      	lsls	r3, r3, #3
 8005ec6:	4413      	add	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	3338      	adds	r3, #56	; 0x38
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	4413      	add	r3, r2
 8005ed0:	3304      	adds	r3, #4
 8005ed2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	705a      	strb	r2, [r3, #1]
 8005eda:	e00f      	b.n	8005efc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005edc:	78fb      	ldrb	r3, [r7, #3]
 8005ede:	f003 020f 	and.w	r2, r3, #15
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	4413      	add	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	3304      	adds	r3, #4
 8005ef4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005efc:	78fb      	ldrb	r3, [r7, #3]
 8005efe:	f003 030f 	and.w	r3, r3, #15
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005f08:	883a      	ldrh	r2, [r7, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	78ba      	ldrb	r2, [r7, #2]
 8005f12:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	785b      	ldrb	r3, [r3, #1]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d004      	beq.n	8005f26 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005f26:	78bb      	ldrb	r3, [r7, #2]
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d102      	bne.n	8005f32 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d101      	bne.n	8005f40 <HAL_PCD_EP_Open+0xaa>
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	e00e      	b.n	8005f5e <HAL_PCD_EP_Open+0xc8>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68f9      	ldr	r1, [r7, #12]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f003 f912 	bl	8009178 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005f5c:	7afb      	ldrb	r3, [r7, #11]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b084      	sub	sp, #16
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
 8005f6e:	460b      	mov	r3, r1
 8005f70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	da0f      	bge.n	8005f9a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f7a:	78fb      	ldrb	r3, [r7, #3]
 8005f7c:	f003 020f 	and.w	r2, r3, #15
 8005f80:	4613      	mov	r3, r2
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	4413      	add	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	3338      	adds	r3, #56	; 0x38
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	3304      	adds	r3, #4
 8005f90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2201      	movs	r2, #1
 8005f96:	705a      	strb	r2, [r3, #1]
 8005f98:	e00f      	b.n	8005fba <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f9a:	78fb      	ldrb	r3, [r7, #3]
 8005f9c:	f003 020f 	and.w	r2, r3, #15
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	00db      	lsls	r3, r3, #3
 8005fa4:	4413      	add	r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	4413      	add	r3, r2
 8005fb0:	3304      	adds	r3, #4
 8005fb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005fba:	78fb      	ldrb	r3, [r7, #3]
 8005fbc:	f003 030f 	and.w	r3, r3, #15
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d101      	bne.n	8005fd4 <HAL_PCD_EP_Close+0x6e>
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	e00e      	b.n	8005ff2 <HAL_PCD_EP_Close+0x8c>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68f9      	ldr	r1, [r7, #12]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f003 f950 	bl	8009288 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b086      	sub	sp, #24
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	60f8      	str	r0, [r7, #12]
 8006002:	607a      	str	r2, [r7, #4]
 8006004:	603b      	str	r3, [r7, #0]
 8006006:	460b      	mov	r3, r1
 8006008:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800600a:	7afb      	ldrb	r3, [r7, #11]
 800600c:	f003 020f 	and.w	r2, r3, #15
 8006010:	4613      	mov	r3, r2
 8006012:	00db      	lsls	r3, r3, #3
 8006014:	4413      	add	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	4413      	add	r3, r2
 8006020:	3304      	adds	r3, #4
 8006022:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	683a      	ldr	r2, [r7, #0]
 800602e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	2200      	movs	r2, #0
 8006034:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	2200      	movs	r2, #0
 800603a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800603c:	7afb      	ldrb	r3, [r7, #11]
 800603e:	f003 030f 	and.w	r3, r3, #15
 8006042:	b2da      	uxtb	r2, r3
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d102      	bne.n	8006056 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006056:	7afb      	ldrb	r3, [r7, #11]
 8006058:	f003 030f 	and.w	r3, r3, #15
 800605c:	2b00      	cmp	r3, #0
 800605e:	d109      	bne.n	8006074 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6818      	ldr	r0, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	b2db      	uxtb	r3, r3
 800606a:	461a      	mov	r2, r3
 800606c:	6979      	ldr	r1, [r7, #20]
 800606e:	f003 fc2f 	bl	80098d0 <USB_EP0StartXfer>
 8006072:	e008      	b.n	8006086 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6818      	ldr	r0, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	b2db      	uxtb	r3, r3
 800607e:	461a      	mov	r2, r3
 8006080:	6979      	ldr	r1, [r7, #20]
 8006082:	f003 f9dd 	bl	8009440 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3718      	adds	r7, #24
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	460b      	mov	r3, r1
 800609a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800609c:	78fb      	ldrb	r3, [r7, #3]
 800609e:	f003 020f 	and.w	r2, r3, #15
 80060a2:	6879      	ldr	r1, [r7, #4]
 80060a4:	4613      	mov	r3, r2
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	4413      	add	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	440b      	add	r3, r1
 80060ae:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80060b2:	681b      	ldr	r3, [r3, #0]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	607a      	str	r2, [r7, #4]
 80060ca:	603b      	str	r3, [r7, #0]
 80060cc:	460b      	mov	r3, r1
 80060ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060d0:	7afb      	ldrb	r3, [r7, #11]
 80060d2:	f003 020f 	and.w	r2, r3, #15
 80060d6:	4613      	mov	r3, r2
 80060d8:	00db      	lsls	r3, r3, #3
 80060da:	4413      	add	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	3338      	adds	r3, #56	; 0x38
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	4413      	add	r3, r2
 80060e4:	3304      	adds	r3, #4
 80060e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	2200      	movs	r2, #0
 80060f8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2201      	movs	r2, #1
 80060fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006100:	7afb      	ldrb	r3, [r7, #11]
 8006102:	f003 030f 	and.w	r3, r3, #15
 8006106:	b2da      	uxtb	r2, r3
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d102      	bne.n	800611a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800611a:	7afb      	ldrb	r3, [r7, #11]
 800611c:	f003 030f 	and.w	r3, r3, #15
 8006120:	2b00      	cmp	r3, #0
 8006122:	d109      	bne.n	8006138 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6818      	ldr	r0, [r3, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	b2db      	uxtb	r3, r3
 800612e:	461a      	mov	r2, r3
 8006130:	6979      	ldr	r1, [r7, #20]
 8006132:	f003 fbcd 	bl	80098d0 <USB_EP0StartXfer>
 8006136:	e008      	b.n	800614a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6818      	ldr	r0, [r3, #0]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	b2db      	uxtb	r3, r3
 8006142:	461a      	mov	r2, r3
 8006144:	6979      	ldr	r1, [r7, #20]
 8006146:	f003 f97b 	bl	8009440 <USB_EPStartXfer>
  }

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3718      	adds	r7, #24
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	460b      	mov	r3, r1
 800615e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006160:	78fb      	ldrb	r3, [r7, #3]
 8006162:	f003 020f 	and.w	r2, r3, #15
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	429a      	cmp	r2, r3
 800616c:	d901      	bls.n	8006172 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e050      	b.n	8006214 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006172:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006176:	2b00      	cmp	r3, #0
 8006178:	da0f      	bge.n	800619a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800617a:	78fb      	ldrb	r3, [r7, #3]
 800617c:	f003 020f 	and.w	r2, r3, #15
 8006180:	4613      	mov	r3, r2
 8006182:	00db      	lsls	r3, r3, #3
 8006184:	4413      	add	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	3338      	adds	r3, #56	; 0x38
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	4413      	add	r3, r2
 800618e:	3304      	adds	r3, #4
 8006190:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2201      	movs	r2, #1
 8006196:	705a      	strb	r2, [r3, #1]
 8006198:	e00d      	b.n	80061b6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800619a:	78fa      	ldrb	r2, [r7, #3]
 800619c:	4613      	mov	r3, r2
 800619e:	00db      	lsls	r3, r3, #3
 80061a0:	4413      	add	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	4413      	add	r3, r2
 80061ac:	3304      	adds	r3, #4
 80061ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2201      	movs	r2, #1
 80061ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061bc:	78fb      	ldrb	r3, [r7, #3]
 80061be:	f003 030f 	and.w	r3, r3, #15
 80061c2:	b2da      	uxtb	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d101      	bne.n	80061d6 <HAL_PCD_EP_SetStall+0x82>
 80061d2:	2302      	movs	r3, #2
 80061d4:	e01e      	b.n	8006214 <HAL_PCD_EP_SetStall+0xc0>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68f9      	ldr	r1, [r7, #12]
 80061e4:	4618      	mov	r0, r3
 80061e6:	f003 fe0b 	bl	8009e00 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80061ea:	78fb      	ldrb	r3, [r7, #3]
 80061ec:	f003 030f 	and.w	r3, r3, #15
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10a      	bne.n	800620a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6818      	ldr	r0, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	b2d9      	uxtb	r1, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006204:	461a      	mov	r2, r3
 8006206:	f003 fffb 	bl	800a200 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	460b      	mov	r3, r1
 8006226:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006228:	78fb      	ldrb	r3, [r7, #3]
 800622a:	f003 020f 	and.w	r2, r3, #15
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	429a      	cmp	r2, r3
 8006234:	d901      	bls.n	800623a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e042      	b.n	80062c0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800623a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800623e:	2b00      	cmp	r3, #0
 8006240:	da0f      	bge.n	8006262 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006242:	78fb      	ldrb	r3, [r7, #3]
 8006244:	f003 020f 	and.w	r2, r3, #15
 8006248:	4613      	mov	r3, r2
 800624a:	00db      	lsls	r3, r3, #3
 800624c:	4413      	add	r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	3338      	adds	r3, #56	; 0x38
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	4413      	add	r3, r2
 8006256:	3304      	adds	r3, #4
 8006258:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2201      	movs	r2, #1
 800625e:	705a      	strb	r2, [r3, #1]
 8006260:	e00f      	b.n	8006282 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006262:	78fb      	ldrb	r3, [r7, #3]
 8006264:	f003 020f 	and.w	r2, r3, #15
 8006268:	4613      	mov	r3, r2
 800626a:	00db      	lsls	r3, r3, #3
 800626c:	4413      	add	r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	4413      	add	r3, r2
 8006278:	3304      	adds	r3, #4
 800627a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006288:	78fb      	ldrb	r3, [r7, #3]
 800628a:	f003 030f 	and.w	r3, r3, #15
 800628e:	b2da      	uxtb	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800629a:	2b01      	cmp	r3, #1
 800629c:	d101      	bne.n	80062a2 <HAL_PCD_EP_ClrStall+0x86>
 800629e:	2302      	movs	r3, #2
 80062a0:	e00e      	b.n	80062c0 <HAL_PCD_EP_ClrStall+0xa4>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68f9      	ldr	r1, [r7, #12]
 80062b0:	4618      	mov	r0, r3
 80062b2:	f003 fe13 	bl	8009edc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	460b      	mov	r3, r1
 80062d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80062d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	da0c      	bge.n	80062f6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062dc:	78fb      	ldrb	r3, [r7, #3]
 80062de:	f003 020f 	and.w	r2, r3, #15
 80062e2:	4613      	mov	r3, r2
 80062e4:	00db      	lsls	r3, r3, #3
 80062e6:	4413      	add	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	3338      	adds	r3, #56	; 0x38
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	4413      	add	r3, r2
 80062f0:	3304      	adds	r3, #4
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	e00c      	b.n	8006310 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062f6:	78fb      	ldrb	r3, [r7, #3]
 80062f8:	f003 020f 	and.w	r2, r3, #15
 80062fc:	4613      	mov	r3, r2
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	4413      	add	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	4413      	add	r3, r2
 800630c:	3304      	adds	r3, #4
 800630e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68f9      	ldr	r1, [r7, #12]
 8006316:	4618      	mov	r0, r3
 8006318:	f003 fc32 	bl	8009b80 <USB_EPStopXfer>
 800631c:	4603      	mov	r3, r0
 800631e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006320:	7afb      	ldrb	r3, [r7, #11]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b08a      	sub	sp, #40	; 0x28
 800632e:	af02      	add	r7, sp, #8
 8006330:	6078      	str	r0, [r7, #4]
 8006332:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	4613      	mov	r3, r2
 8006342:	00db      	lsls	r3, r3, #3
 8006344:	4413      	add	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	3338      	adds	r3, #56	; 0x38
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	4413      	add	r3, r2
 800634e:	3304      	adds	r3, #4
 8006350:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6a1a      	ldr	r2, [r3, #32]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	429a      	cmp	r2, r3
 800635c:	d901      	bls.n	8006362 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e06c      	b.n	800643c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	699a      	ldr	r2, [r3, #24]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	69fa      	ldr	r2, [r7, #28]
 8006374:	429a      	cmp	r2, r3
 8006376:	d902      	bls.n	800637e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	3303      	adds	r3, #3
 8006382:	089b      	lsrs	r3, r3, #2
 8006384:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006386:	e02b      	b.n	80063e0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	699a      	ldr	r2, [r3, #24]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6a1b      	ldr	r3, [r3, #32]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	69fa      	ldr	r2, [r7, #28]
 800639a:	429a      	cmp	r2, r3
 800639c:	d902      	bls.n	80063a4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	3303      	adds	r3, #3
 80063a8:	089b      	lsrs	r3, r3, #2
 80063aa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6919      	ldr	r1, [r3, #16]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	b2da      	uxtb	r2, r3
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	4603      	mov	r3, r0
 80063c2:	6978      	ldr	r0, [r7, #20]
 80063c4:	f003 fc86 	bl	8009cd4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	691a      	ldr	r2, [r3, #16]
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	441a      	add	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6a1a      	ldr	r2, [r3, #32]
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	441a      	add	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	69ba      	ldr	r2, [r7, #24]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d809      	bhi.n	800640a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6a1a      	ldr	r2, [r3, #32]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063fe:	429a      	cmp	r2, r3
 8006400:	d203      	bcs.n	800640a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1be      	bne.n	8006388 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	699a      	ldr	r2, [r3, #24]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	429a      	cmp	r2, r3
 8006414:	d811      	bhi.n	800643a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	f003 030f 	and.w	r3, r3, #15
 800641c:	2201      	movs	r2, #1
 800641e:	fa02 f303 	lsl.w	r3, r2, r3
 8006422:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800642a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	43db      	mvns	r3, r3
 8006430:	6939      	ldr	r1, [r7, #16]
 8006432:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006436:	4013      	ands	r3, r2
 8006438:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3720      	adds	r7, #32
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b088      	sub	sp, #32
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	333c      	adds	r3, #60	; 0x3c
 800645c:	3304      	adds	r3, #4
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	4413      	add	r3, r2
 800646a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d17b      	bne.n	8006572 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	f003 0308 	and.w	r3, r3, #8
 8006480:	2b00      	cmp	r3, #0
 8006482:	d015      	beq.n	80064b0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	4a61      	ldr	r2, [pc, #388]	; (800660c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006488:	4293      	cmp	r3, r2
 800648a:	f240 80b9 	bls.w	8006600 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 80b3 	beq.w	8006600 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a6:	461a      	mov	r2, r3
 80064a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ac:	6093      	str	r3, [r2, #8]
 80064ae:	e0a7      	b.n	8006600 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	f003 0320 	and.w	r3, r3, #32
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d009      	beq.n	80064ce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c6:	461a      	mov	r2, r3
 80064c8:	2320      	movs	r3, #32
 80064ca:	6093      	str	r3, [r2, #8]
 80064cc:	e098      	b.n	8006600 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f040 8093 	bne.w	8006600 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	4a4b      	ldr	r2, [pc, #300]	; (800660c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d90f      	bls.n	8006502 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00a      	beq.n	8006502 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f8:	461a      	mov	r2, r3
 80064fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064fe:	6093      	str	r3, [r2, #8]
 8006500:	e07e      	b.n	8006600 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	4613      	mov	r3, r2
 8006506:	00db      	lsls	r3, r3, #3
 8006508:	4413      	add	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	4413      	add	r3, r2
 8006514:	3304      	adds	r3, #4
 8006516:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	69da      	ldr	r2, [r3, #28]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	0159      	lsls	r1, r3, #5
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	440b      	add	r3, r1
 8006524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800652e:	1ad2      	subs	r2, r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d114      	bne.n	8006564 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d109      	bne.n	8006556 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6818      	ldr	r0, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800654c:	461a      	mov	r2, r3
 800654e:	2101      	movs	r1, #1
 8006550:	f003 fe56 	bl	800a200 <USB_EP0_OutStart>
 8006554:	e006      	b.n	8006564 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	691a      	ldr	r2, [r3, #16]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	441a      	add	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	b2db      	uxtb	r3, r3
 8006568:	4619      	mov	r1, r3
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f008 ffec 	bl	800f548 <HAL_PCD_DataOutStageCallback>
 8006570:	e046      	b.n	8006600 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	4a26      	ldr	r2, [pc, #152]	; (8006610 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d124      	bne.n	80065c4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00a      	beq.n	800659a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	4413      	add	r3, r2
 800658c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006590:	461a      	mov	r2, r3
 8006592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006596:	6093      	str	r3, [r2, #8]
 8006598:	e032      	b.n	8006600 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f003 0320 	and.w	r3, r3, #32
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d008      	beq.n	80065b6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	015a      	lsls	r2, r3, #5
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b0:	461a      	mov	r2, r3
 80065b2:	2320      	movs	r3, #32
 80065b4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	4619      	mov	r1, r3
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f008 ffc3 	bl	800f548 <HAL_PCD_DataOutStageCallback>
 80065c2:	e01d      	b.n	8006600 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d114      	bne.n	80065f4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80065ca:	6879      	ldr	r1, [r7, #4]
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	4613      	mov	r3, r2
 80065d0:	00db      	lsls	r3, r3, #3
 80065d2:	4413      	add	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	440b      	add	r3, r1
 80065d8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d108      	bne.n	80065f4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6818      	ldr	r0, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80065ec:	461a      	mov	r2, r3
 80065ee:	2100      	movs	r1, #0
 80065f0:	f003 fe06 	bl	800a200 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	4619      	mov	r1, r3
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f008 ffa4 	bl	800f548 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3720      	adds	r7, #32
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	4f54300a 	.word	0x4f54300a
 8006610:	4f54310a 	.word	0x4f54310a

08006614 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	333c      	adds	r3, #60	; 0x3c
 800662c:	3304      	adds	r3, #4
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	015a      	lsls	r2, r3, #5
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	4413      	add	r3, r2
 800663a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	4a15      	ldr	r2, [pc, #84]	; (800669c <PCD_EP_OutSetupPacket_int+0x88>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d90e      	bls.n	8006668 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006650:	2b00      	cmp	r3, #0
 8006652:	d009      	beq.n	8006668 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	015a      	lsls	r2, r3, #5
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	4413      	add	r3, r2
 800665c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006660:	461a      	mov	r2, r3
 8006662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006666:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f008 ff5b 	bl	800f524 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	4a0a      	ldr	r2, [pc, #40]	; (800669c <PCD_EP_OutSetupPacket_int+0x88>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d90c      	bls.n	8006690 <PCD_EP_OutSetupPacket_int+0x7c>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d108      	bne.n	8006690 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6818      	ldr	r0, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006688:	461a      	mov	r2, r3
 800668a:	2101      	movs	r1, #1
 800668c:	f003 fdb8 	bl	800a200 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3718      	adds	r7, #24
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	4f54300a 	.word	0x4f54300a

080066a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	460b      	mov	r3, r1
 80066aa:	70fb      	strb	r3, [r7, #3]
 80066ac:	4613      	mov	r3, r2
 80066ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80066b8:	78fb      	ldrb	r3, [r7, #3]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d107      	bne.n	80066ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80066be:	883b      	ldrh	r3, [r7, #0]
 80066c0:	0419      	lsls	r1, r3, #16
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	430a      	orrs	r2, r1
 80066ca:	629a      	str	r2, [r3, #40]	; 0x28
 80066cc:	e028      	b.n	8006720 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d4:	0c1b      	lsrs	r3, r3, #16
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	4413      	add	r3, r2
 80066da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80066dc:	2300      	movs	r3, #0
 80066de:	73fb      	strb	r3, [r7, #15]
 80066e0:	e00d      	b.n	80066fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	7bfb      	ldrb	r3, [r7, #15]
 80066e8:	3340      	adds	r3, #64	; 0x40
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	0c1b      	lsrs	r3, r3, #16
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	4413      	add	r3, r2
 80066f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80066f8:	7bfb      	ldrb	r3, [r7, #15]
 80066fa:	3301      	adds	r3, #1
 80066fc:	73fb      	strb	r3, [r7, #15]
 80066fe:	7bfa      	ldrb	r2, [r7, #15]
 8006700:	78fb      	ldrb	r3, [r7, #3]
 8006702:	3b01      	subs	r3, #1
 8006704:	429a      	cmp	r2, r3
 8006706:	d3ec      	bcc.n	80066e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006708:	883b      	ldrh	r3, [r7, #0]
 800670a:	0418      	lsls	r0, r3, #16
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6819      	ldr	r1, [r3, #0]
 8006710:	78fb      	ldrb	r3, [r7, #3]
 8006712:	3b01      	subs	r3, #1
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	4302      	orrs	r2, r0
 8006718:	3340      	adds	r3, #64	; 0x40
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	440b      	add	r3, r1
 800671e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800672e:	b480      	push	{r7}
 8006730:	b083      	sub	sp, #12
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	460b      	mov	r3, r1
 8006738:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	887a      	ldrh	r2, [r7, #2]
 8006740:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	460b      	mov	r3, r1
 800675a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d101      	bne.n	800677a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e267      	b.n	8006c4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b00      	cmp	r3, #0
 8006784:	d075      	beq.n	8006872 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006786:	4b88      	ldr	r3, [pc, #544]	; (80069a8 <HAL_RCC_OscConfig+0x240>)
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f003 030c 	and.w	r3, r3, #12
 800678e:	2b04      	cmp	r3, #4
 8006790:	d00c      	beq.n	80067ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006792:	4b85      	ldr	r3, [pc, #532]	; (80069a8 <HAL_RCC_OscConfig+0x240>)
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800679a:	2b08      	cmp	r3, #8
 800679c:	d112      	bne.n	80067c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800679e:	4b82      	ldr	r3, [pc, #520]	; (80069a8 <HAL_RCC_OscConfig+0x240>)
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067aa:	d10b      	bne.n	80067c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067ac:	4b7e      	ldr	r3, [pc, #504]	; (80069a8 <HAL_RCC_OscConfig+0x240>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d05b      	beq.n	8006870 <HAL_RCC_OscConfig+0x108>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d157      	bne.n	8006870 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e242      	b.n	8006c4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067cc:	d106      	bne.n	80067dc <HAL_RCC_OscConfig+0x74>
 80067ce:	4b76      	ldr	r3, [pc, #472]	; (80069a8 <HAL_RCC_OscConfig+0x240>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a75      	ldr	r2, [pc, #468]	; (80069a8 <HAL_RCC_OscConfig+0x240>)
 80067d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067d8:	6013      	str	r3, [r2, #0]
 80067da:	e01d      	b.n	8006818 <HAL_RCC_OscConfig+0xb0>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067e4:	d10c      	bne.n	8006800 <HAL_RCC_OscConfig+0x98>
 80067e6:	4b70      	ldr	r3, [pc, #448]	; (80069a8 <HAL_RCC_OscConfig+0x240>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a6f      	ldr	r2, [pc, #444]	; (80069a8 <HAL_RCC_OscConfig+0x240>)
 80067ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067f0:	6013      	str	r3, [r2, #0]
 80067f2:	4b6d      	ldr	r3, [pc, #436]	; (80069a8 <HAL_RCC_OscConfig+0x240>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a6c      	ldr	r2, [pc, #432]	; (80069a8 <HAL_RCC_OscConfig+0x240>)
 80067f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067fc:	6013      	str	r3, [r2, #0]
 80067fe:	e00b      	b.n	8006818 <HAL_RCC_OscConfig+0xb0>
 8006800:	4b69      	ldr	r3, [pc, #420]	; (80069a8 <HAL_RCC_OscConfig+0x240>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a68      	ldr	r2, [pc, #416]	; (80069a8 <HAL_RCC_OscConfig+0x240>)
 8006806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800680a:	6013      	str	r3, [r2, #0]
 800680c:	4b66      	ldr	r3, [pc, #408]	; (80069a8 <HAL_RCC_OscConfig+0x240>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a65      	ldr	r2, [pc, #404]	; (80069a8 <HAL_RCC_OscConfig+0x240>)
 8006812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d013      	beq.n	8006848 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006820:	f7fd fa86 	bl	8003d30 <HAL_GetTick>
 8006824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006826:	e008      	b.n	800683a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006828:	f7fd fa82 	bl	8003d30 <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	2b64      	cmp	r3, #100	; 0x64
 8006834:	d901      	bls.n	800683a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e207      	b.n	8006c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800683a:	4b5b      	ldr	r3, [pc, #364]	; (80069a8 <HAL_RCC_OscConfig+0x240>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d0f0      	beq.n	8006828 <HAL_RCC_OscConfig+0xc0>
 8006846:	e014      	b.n	8006872 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006848:	f7fd fa72 	bl	8003d30 <HAL_GetTick>
 800684c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800684e:	e008      	b.n	8006862 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006850:	f7fd fa6e 	bl	8003d30 <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	2b64      	cmp	r3, #100	; 0x64
 800685c:	d901      	bls.n	8006862 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e1f3      	b.n	8006c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006862:	4b51      	ldr	r3, [pc, #324]	; (80069a8 <HAL_RCC_OscConfig+0x240>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1f0      	bne.n	8006850 <HAL_RCC_OscConfig+0xe8>
 800686e:	e000      	b.n	8006872 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0302 	and.w	r3, r3, #2
 800687a:	2b00      	cmp	r3, #0
 800687c:	d063      	beq.n	8006946 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800687e:	4b4a      	ldr	r3, [pc, #296]	; (80069a8 <HAL_RCC_OscConfig+0x240>)
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f003 030c 	and.w	r3, r3, #12
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00b      	beq.n	80068a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800688a:	4b47      	ldr	r3, [pc, #284]	; (80069a8 <HAL_RCC_OscConfig+0x240>)
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006892:	2b08      	cmp	r3, #8
 8006894:	d11c      	bne.n	80068d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006896:	4b44      	ldr	r3, [pc, #272]	; (80069a8 <HAL_RCC_OscConfig+0x240>)
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d116      	bne.n	80068d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068a2:	4b41      	ldr	r3, [pc, #260]	; (80069a8 <HAL_RCC_OscConfig+0x240>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0302 	and.w	r3, r3, #2
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d005      	beq.n	80068ba <HAL_RCC_OscConfig+0x152>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d001      	beq.n	80068ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e1c7      	b.n	8006c4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068ba:	4b3b      	ldr	r3, [pc, #236]	; (80069a8 <HAL_RCC_OscConfig+0x240>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	00db      	lsls	r3, r3, #3
 80068c8:	4937      	ldr	r1, [pc, #220]	; (80069a8 <HAL_RCC_OscConfig+0x240>)
 80068ca:	4313      	orrs	r3, r2
 80068cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068ce:	e03a      	b.n	8006946 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d020      	beq.n	800691a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068d8:	4b34      	ldr	r3, [pc, #208]	; (80069ac <HAL_RCC_OscConfig+0x244>)
 80068da:	2201      	movs	r2, #1
 80068dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068de:	f7fd fa27 	bl	8003d30 <HAL_GetTick>
 80068e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068e4:	e008      	b.n	80068f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068e6:	f7fd fa23 	bl	8003d30 <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d901      	bls.n	80068f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e1a8      	b.n	8006c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068f8:	4b2b      	ldr	r3, [pc, #172]	; (80069a8 <HAL_RCC_OscConfig+0x240>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0302 	and.w	r3, r3, #2
 8006900:	2b00      	cmp	r3, #0
 8006902:	d0f0      	beq.n	80068e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006904:	4b28      	ldr	r3, [pc, #160]	; (80069a8 <HAL_RCC_OscConfig+0x240>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	00db      	lsls	r3, r3, #3
 8006912:	4925      	ldr	r1, [pc, #148]	; (80069a8 <HAL_RCC_OscConfig+0x240>)
 8006914:	4313      	orrs	r3, r2
 8006916:	600b      	str	r3, [r1, #0]
 8006918:	e015      	b.n	8006946 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800691a:	4b24      	ldr	r3, [pc, #144]	; (80069ac <HAL_RCC_OscConfig+0x244>)
 800691c:	2200      	movs	r2, #0
 800691e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006920:	f7fd fa06 	bl	8003d30 <HAL_GetTick>
 8006924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006926:	e008      	b.n	800693a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006928:	f7fd fa02 	bl	8003d30 <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	2b02      	cmp	r3, #2
 8006934:	d901      	bls.n	800693a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e187      	b.n	8006c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800693a:	4b1b      	ldr	r3, [pc, #108]	; (80069a8 <HAL_RCC_OscConfig+0x240>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0302 	and.w	r3, r3, #2
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1f0      	bne.n	8006928 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0308 	and.w	r3, r3, #8
 800694e:	2b00      	cmp	r3, #0
 8006950:	d036      	beq.n	80069c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d016      	beq.n	8006988 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800695a:	4b15      	ldr	r3, [pc, #84]	; (80069b0 <HAL_RCC_OscConfig+0x248>)
 800695c:	2201      	movs	r2, #1
 800695e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006960:	f7fd f9e6 	bl	8003d30 <HAL_GetTick>
 8006964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006966:	e008      	b.n	800697a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006968:	f7fd f9e2 	bl	8003d30 <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	2b02      	cmp	r3, #2
 8006974:	d901      	bls.n	800697a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e167      	b.n	8006c4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800697a:	4b0b      	ldr	r3, [pc, #44]	; (80069a8 <HAL_RCC_OscConfig+0x240>)
 800697c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800697e:	f003 0302 	and.w	r3, r3, #2
 8006982:	2b00      	cmp	r3, #0
 8006984:	d0f0      	beq.n	8006968 <HAL_RCC_OscConfig+0x200>
 8006986:	e01b      	b.n	80069c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006988:	4b09      	ldr	r3, [pc, #36]	; (80069b0 <HAL_RCC_OscConfig+0x248>)
 800698a:	2200      	movs	r2, #0
 800698c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800698e:	f7fd f9cf 	bl	8003d30 <HAL_GetTick>
 8006992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006994:	e00e      	b.n	80069b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006996:	f7fd f9cb 	bl	8003d30 <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d907      	bls.n	80069b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e150      	b.n	8006c4a <HAL_RCC_OscConfig+0x4e2>
 80069a8:	40023800 	.word	0x40023800
 80069ac:	42470000 	.word	0x42470000
 80069b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069b4:	4b88      	ldr	r3, [pc, #544]	; (8006bd8 <HAL_RCC_OscConfig+0x470>)
 80069b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069b8:	f003 0302 	and.w	r3, r3, #2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1ea      	bne.n	8006996 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0304 	and.w	r3, r3, #4
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f000 8097 	beq.w	8006afc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069ce:	2300      	movs	r3, #0
 80069d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069d2:	4b81      	ldr	r3, [pc, #516]	; (8006bd8 <HAL_RCC_OscConfig+0x470>)
 80069d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10f      	bne.n	80069fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069de:	2300      	movs	r3, #0
 80069e0:	60bb      	str	r3, [r7, #8]
 80069e2:	4b7d      	ldr	r3, [pc, #500]	; (8006bd8 <HAL_RCC_OscConfig+0x470>)
 80069e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e6:	4a7c      	ldr	r2, [pc, #496]	; (8006bd8 <HAL_RCC_OscConfig+0x470>)
 80069e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069ec:	6413      	str	r3, [r2, #64]	; 0x40
 80069ee:	4b7a      	ldr	r3, [pc, #488]	; (8006bd8 <HAL_RCC_OscConfig+0x470>)
 80069f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069f6:	60bb      	str	r3, [r7, #8]
 80069f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069fa:	2301      	movs	r3, #1
 80069fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069fe:	4b77      	ldr	r3, [pc, #476]	; (8006bdc <HAL_RCC_OscConfig+0x474>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d118      	bne.n	8006a3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a0a:	4b74      	ldr	r3, [pc, #464]	; (8006bdc <HAL_RCC_OscConfig+0x474>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a73      	ldr	r2, [pc, #460]	; (8006bdc <HAL_RCC_OscConfig+0x474>)
 8006a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a16:	f7fd f98b 	bl	8003d30 <HAL_GetTick>
 8006a1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a1c:	e008      	b.n	8006a30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a1e:	f7fd f987 	bl	8003d30 <HAL_GetTick>
 8006a22:	4602      	mov	r2, r0
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d901      	bls.n	8006a30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e10c      	b.n	8006c4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a30:	4b6a      	ldr	r3, [pc, #424]	; (8006bdc <HAL_RCC_OscConfig+0x474>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d0f0      	beq.n	8006a1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d106      	bne.n	8006a52 <HAL_RCC_OscConfig+0x2ea>
 8006a44:	4b64      	ldr	r3, [pc, #400]	; (8006bd8 <HAL_RCC_OscConfig+0x470>)
 8006a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a48:	4a63      	ldr	r2, [pc, #396]	; (8006bd8 <HAL_RCC_OscConfig+0x470>)
 8006a4a:	f043 0301 	orr.w	r3, r3, #1
 8006a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8006a50:	e01c      	b.n	8006a8c <HAL_RCC_OscConfig+0x324>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	2b05      	cmp	r3, #5
 8006a58:	d10c      	bne.n	8006a74 <HAL_RCC_OscConfig+0x30c>
 8006a5a:	4b5f      	ldr	r3, [pc, #380]	; (8006bd8 <HAL_RCC_OscConfig+0x470>)
 8006a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a5e:	4a5e      	ldr	r2, [pc, #376]	; (8006bd8 <HAL_RCC_OscConfig+0x470>)
 8006a60:	f043 0304 	orr.w	r3, r3, #4
 8006a64:	6713      	str	r3, [r2, #112]	; 0x70
 8006a66:	4b5c      	ldr	r3, [pc, #368]	; (8006bd8 <HAL_RCC_OscConfig+0x470>)
 8006a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a6a:	4a5b      	ldr	r2, [pc, #364]	; (8006bd8 <HAL_RCC_OscConfig+0x470>)
 8006a6c:	f043 0301 	orr.w	r3, r3, #1
 8006a70:	6713      	str	r3, [r2, #112]	; 0x70
 8006a72:	e00b      	b.n	8006a8c <HAL_RCC_OscConfig+0x324>
 8006a74:	4b58      	ldr	r3, [pc, #352]	; (8006bd8 <HAL_RCC_OscConfig+0x470>)
 8006a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a78:	4a57      	ldr	r2, [pc, #348]	; (8006bd8 <HAL_RCC_OscConfig+0x470>)
 8006a7a:	f023 0301 	bic.w	r3, r3, #1
 8006a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8006a80:	4b55      	ldr	r3, [pc, #340]	; (8006bd8 <HAL_RCC_OscConfig+0x470>)
 8006a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a84:	4a54      	ldr	r2, [pc, #336]	; (8006bd8 <HAL_RCC_OscConfig+0x470>)
 8006a86:	f023 0304 	bic.w	r3, r3, #4
 8006a8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d015      	beq.n	8006ac0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a94:	f7fd f94c 	bl	8003d30 <HAL_GetTick>
 8006a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a9a:	e00a      	b.n	8006ab2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a9c:	f7fd f948 	bl	8003d30 <HAL_GetTick>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d901      	bls.n	8006ab2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e0cb      	b.n	8006c4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ab2:	4b49      	ldr	r3, [pc, #292]	; (8006bd8 <HAL_RCC_OscConfig+0x470>)
 8006ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab6:	f003 0302 	and.w	r3, r3, #2
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d0ee      	beq.n	8006a9c <HAL_RCC_OscConfig+0x334>
 8006abe:	e014      	b.n	8006aea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ac0:	f7fd f936 	bl	8003d30 <HAL_GetTick>
 8006ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ac6:	e00a      	b.n	8006ade <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ac8:	f7fd f932 	bl	8003d30 <HAL_GetTick>
 8006acc:	4602      	mov	r2, r0
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d901      	bls.n	8006ade <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e0b5      	b.n	8006c4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ade:	4b3e      	ldr	r3, [pc, #248]	; (8006bd8 <HAL_RCC_OscConfig+0x470>)
 8006ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae2:	f003 0302 	and.w	r3, r3, #2
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1ee      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006aea:	7dfb      	ldrb	r3, [r7, #23]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d105      	bne.n	8006afc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006af0:	4b39      	ldr	r3, [pc, #228]	; (8006bd8 <HAL_RCC_OscConfig+0x470>)
 8006af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af4:	4a38      	ldr	r2, [pc, #224]	; (8006bd8 <HAL_RCC_OscConfig+0x470>)
 8006af6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006afa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 80a1 	beq.w	8006c48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b06:	4b34      	ldr	r3, [pc, #208]	; (8006bd8 <HAL_RCC_OscConfig+0x470>)
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	f003 030c 	and.w	r3, r3, #12
 8006b0e:	2b08      	cmp	r3, #8
 8006b10:	d05c      	beq.n	8006bcc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d141      	bne.n	8006b9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b1a:	4b31      	ldr	r3, [pc, #196]	; (8006be0 <HAL_RCC_OscConfig+0x478>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b20:	f7fd f906 	bl	8003d30 <HAL_GetTick>
 8006b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b26:	e008      	b.n	8006b3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b28:	f7fd f902 	bl	8003d30 <HAL_GetTick>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d901      	bls.n	8006b3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e087      	b.n	8006c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b3a:	4b27      	ldr	r3, [pc, #156]	; (8006bd8 <HAL_RCC_OscConfig+0x470>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1f0      	bne.n	8006b28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	69da      	ldr	r2, [r3, #28]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b54:	019b      	lsls	r3, r3, #6
 8006b56:	431a      	orrs	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b5c:	085b      	lsrs	r3, r3, #1
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	041b      	lsls	r3, r3, #16
 8006b62:	431a      	orrs	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b68:	061b      	lsls	r3, r3, #24
 8006b6a:	491b      	ldr	r1, [pc, #108]	; (8006bd8 <HAL_RCC_OscConfig+0x470>)
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b70:	4b1b      	ldr	r3, [pc, #108]	; (8006be0 <HAL_RCC_OscConfig+0x478>)
 8006b72:	2201      	movs	r2, #1
 8006b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b76:	f7fd f8db 	bl	8003d30 <HAL_GetTick>
 8006b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b7c:	e008      	b.n	8006b90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b7e:	f7fd f8d7 	bl	8003d30 <HAL_GetTick>
 8006b82:	4602      	mov	r2, r0
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d901      	bls.n	8006b90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e05c      	b.n	8006c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b90:	4b11      	ldr	r3, [pc, #68]	; (8006bd8 <HAL_RCC_OscConfig+0x470>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d0f0      	beq.n	8006b7e <HAL_RCC_OscConfig+0x416>
 8006b9c:	e054      	b.n	8006c48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b9e:	4b10      	ldr	r3, [pc, #64]	; (8006be0 <HAL_RCC_OscConfig+0x478>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ba4:	f7fd f8c4 	bl	8003d30 <HAL_GetTick>
 8006ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006baa:	e008      	b.n	8006bbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bac:	f7fd f8c0 	bl	8003d30 <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e045      	b.n	8006c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bbe:	4b06      	ldr	r3, [pc, #24]	; (8006bd8 <HAL_RCC_OscConfig+0x470>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1f0      	bne.n	8006bac <HAL_RCC_OscConfig+0x444>
 8006bca:	e03d      	b.n	8006c48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d107      	bne.n	8006be4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e038      	b.n	8006c4a <HAL_RCC_OscConfig+0x4e2>
 8006bd8:	40023800 	.word	0x40023800
 8006bdc:	40007000 	.word	0x40007000
 8006be0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006be4:	4b1b      	ldr	r3, [pc, #108]	; (8006c54 <HAL_RCC_OscConfig+0x4ec>)
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d028      	beq.n	8006c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d121      	bne.n	8006c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d11a      	bne.n	8006c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c14:	4013      	ands	r3, r2
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d111      	bne.n	8006c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2a:	085b      	lsrs	r3, r3, #1
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d107      	bne.n	8006c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d001      	beq.n	8006c48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e000      	b.n	8006c4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3718      	adds	r7, #24
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	40023800 	.word	0x40023800

08006c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d101      	bne.n	8006c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e0cc      	b.n	8006e06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c6c:	4b68      	ldr	r3, [pc, #416]	; (8006e10 <HAL_RCC_ClockConfig+0x1b8>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0307 	and.w	r3, r3, #7
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d90c      	bls.n	8006c94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c7a:	4b65      	ldr	r3, [pc, #404]	; (8006e10 <HAL_RCC_ClockConfig+0x1b8>)
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	b2d2      	uxtb	r2, r2
 8006c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c82:	4b63      	ldr	r3, [pc, #396]	; (8006e10 <HAL_RCC_ClockConfig+0x1b8>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0307 	and.w	r3, r3, #7
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d001      	beq.n	8006c94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e0b8      	b.n	8006e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0302 	and.w	r3, r3, #2
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d020      	beq.n	8006ce2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0304 	and.w	r3, r3, #4
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d005      	beq.n	8006cb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006cac:	4b59      	ldr	r3, [pc, #356]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	4a58      	ldr	r2, [pc, #352]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006cb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0308 	and.w	r3, r3, #8
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d005      	beq.n	8006cd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cc4:	4b53      	ldr	r3, [pc, #332]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	4a52      	ldr	r2, [pc, #328]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006cca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006cce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cd0:	4b50      	ldr	r3, [pc, #320]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	494d      	ldr	r1, [pc, #308]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d044      	beq.n	8006d78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d107      	bne.n	8006d06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cf6:	4b47      	ldr	r3, [pc, #284]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d119      	bne.n	8006d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e07f      	b.n	8006e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d003      	beq.n	8006d16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d12:	2b03      	cmp	r3, #3
 8006d14:	d107      	bne.n	8006d26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d16:	4b3f      	ldr	r3, [pc, #252]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d109      	bne.n	8006d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e06f      	b.n	8006e06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d26:	4b3b      	ldr	r3, [pc, #236]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e067      	b.n	8006e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d36:	4b37      	ldr	r3, [pc, #220]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f023 0203 	bic.w	r2, r3, #3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	4934      	ldr	r1, [pc, #208]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d48:	f7fc fff2 	bl	8003d30 <HAL_GetTick>
 8006d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d4e:	e00a      	b.n	8006d66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d50:	f7fc ffee 	bl	8003d30 <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d901      	bls.n	8006d66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e04f      	b.n	8006e06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d66:	4b2b      	ldr	r3, [pc, #172]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f003 020c 	and.w	r2, r3, #12
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d1eb      	bne.n	8006d50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d78:	4b25      	ldr	r3, [pc, #148]	; (8006e10 <HAL_RCC_ClockConfig+0x1b8>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0307 	and.w	r3, r3, #7
 8006d80:	683a      	ldr	r2, [r7, #0]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d20c      	bcs.n	8006da0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d86:	4b22      	ldr	r3, [pc, #136]	; (8006e10 <HAL_RCC_ClockConfig+0x1b8>)
 8006d88:	683a      	ldr	r2, [r7, #0]
 8006d8a:	b2d2      	uxtb	r2, r2
 8006d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d8e:	4b20      	ldr	r3, [pc, #128]	; (8006e10 <HAL_RCC_ClockConfig+0x1b8>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 0307 	and.w	r3, r3, #7
 8006d96:	683a      	ldr	r2, [r7, #0]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d001      	beq.n	8006da0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e032      	b.n	8006e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0304 	and.w	r3, r3, #4
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d008      	beq.n	8006dbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006dac:	4b19      	ldr	r3, [pc, #100]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	4916      	ldr	r1, [pc, #88]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0308 	and.w	r3, r3, #8
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d009      	beq.n	8006dde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006dca:	4b12      	ldr	r3, [pc, #72]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	00db      	lsls	r3, r3, #3
 8006dd8:	490e      	ldr	r1, [pc, #56]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006dde:	f000 f821 	bl	8006e24 <HAL_RCC_GetSysClockFreq>
 8006de2:	4602      	mov	r2, r0
 8006de4:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <HAL_RCC_ClockConfig+0x1bc>)
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	091b      	lsrs	r3, r3, #4
 8006dea:	f003 030f 	and.w	r3, r3, #15
 8006dee:	490a      	ldr	r1, [pc, #40]	; (8006e18 <HAL_RCC_ClockConfig+0x1c0>)
 8006df0:	5ccb      	ldrb	r3, [r1, r3]
 8006df2:	fa22 f303 	lsr.w	r3, r2, r3
 8006df6:	4a09      	ldr	r2, [pc, #36]	; (8006e1c <HAL_RCC_ClockConfig+0x1c4>)
 8006df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006dfa:	4b09      	ldr	r3, [pc, #36]	; (8006e20 <HAL_RCC_ClockConfig+0x1c8>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7fc fe40 	bl	8003a84 <HAL_InitTick>

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	40023c00 	.word	0x40023c00
 8006e14:	40023800 	.word	0x40023800
 8006e18:	08010c64 	.word	0x08010c64
 8006e1c:	20000528 	.word	0x20000528
 8006e20:	2000052c 	.word	0x2000052c

08006e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e28:	b094      	sub	sp, #80	; 0x50
 8006e2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	647b      	str	r3, [r7, #68]	; 0x44
 8006e30:	2300      	movs	r3, #0
 8006e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e34:	2300      	movs	r3, #0
 8006e36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e3c:	4b79      	ldr	r3, [pc, #484]	; (8007024 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	f003 030c 	and.w	r3, r3, #12
 8006e44:	2b08      	cmp	r3, #8
 8006e46:	d00d      	beq.n	8006e64 <HAL_RCC_GetSysClockFreq+0x40>
 8006e48:	2b08      	cmp	r3, #8
 8006e4a:	f200 80e1 	bhi.w	8007010 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d002      	beq.n	8006e58 <HAL_RCC_GetSysClockFreq+0x34>
 8006e52:	2b04      	cmp	r3, #4
 8006e54:	d003      	beq.n	8006e5e <HAL_RCC_GetSysClockFreq+0x3a>
 8006e56:	e0db      	b.n	8007010 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e58:	4b73      	ldr	r3, [pc, #460]	; (8007028 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006e5c:	e0db      	b.n	8007016 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e5e:	4b72      	ldr	r3, [pc, #456]	; (8007028 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e62:	e0d8      	b.n	8007016 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e64:	4b6f      	ldr	r3, [pc, #444]	; (8007024 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e6e:	4b6d      	ldr	r3, [pc, #436]	; (8007024 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d063      	beq.n	8006f42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e7a:	4b6a      	ldr	r3, [pc, #424]	; (8007024 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	099b      	lsrs	r3, r3, #6
 8006e80:	2200      	movs	r2, #0
 8006e82:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e8c:	633b      	str	r3, [r7, #48]	; 0x30
 8006e8e:	2300      	movs	r3, #0
 8006e90:	637b      	str	r3, [r7, #52]	; 0x34
 8006e92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006e96:	4622      	mov	r2, r4
 8006e98:	462b      	mov	r3, r5
 8006e9a:	f04f 0000 	mov.w	r0, #0
 8006e9e:	f04f 0100 	mov.w	r1, #0
 8006ea2:	0159      	lsls	r1, r3, #5
 8006ea4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ea8:	0150      	lsls	r0, r2, #5
 8006eaa:	4602      	mov	r2, r0
 8006eac:	460b      	mov	r3, r1
 8006eae:	4621      	mov	r1, r4
 8006eb0:	1a51      	subs	r1, r2, r1
 8006eb2:	6139      	str	r1, [r7, #16]
 8006eb4:	4629      	mov	r1, r5
 8006eb6:	eb63 0301 	sbc.w	r3, r3, r1
 8006eba:	617b      	str	r3, [r7, #20]
 8006ebc:	f04f 0200 	mov.w	r2, #0
 8006ec0:	f04f 0300 	mov.w	r3, #0
 8006ec4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ec8:	4659      	mov	r1, fp
 8006eca:	018b      	lsls	r3, r1, #6
 8006ecc:	4651      	mov	r1, sl
 8006ece:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ed2:	4651      	mov	r1, sl
 8006ed4:	018a      	lsls	r2, r1, #6
 8006ed6:	4651      	mov	r1, sl
 8006ed8:	ebb2 0801 	subs.w	r8, r2, r1
 8006edc:	4659      	mov	r1, fp
 8006ede:	eb63 0901 	sbc.w	r9, r3, r1
 8006ee2:	f04f 0200 	mov.w	r2, #0
 8006ee6:	f04f 0300 	mov.w	r3, #0
 8006eea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006eee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ef2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ef6:	4690      	mov	r8, r2
 8006ef8:	4699      	mov	r9, r3
 8006efa:	4623      	mov	r3, r4
 8006efc:	eb18 0303 	adds.w	r3, r8, r3
 8006f00:	60bb      	str	r3, [r7, #8]
 8006f02:	462b      	mov	r3, r5
 8006f04:	eb49 0303 	adc.w	r3, r9, r3
 8006f08:	60fb      	str	r3, [r7, #12]
 8006f0a:	f04f 0200 	mov.w	r2, #0
 8006f0e:	f04f 0300 	mov.w	r3, #0
 8006f12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006f16:	4629      	mov	r1, r5
 8006f18:	028b      	lsls	r3, r1, #10
 8006f1a:	4621      	mov	r1, r4
 8006f1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f20:	4621      	mov	r1, r4
 8006f22:	028a      	lsls	r2, r1, #10
 8006f24:	4610      	mov	r0, r2
 8006f26:	4619      	mov	r1, r3
 8006f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f34:	f7f9 fcb2 	bl	800089c <__aeabi_uldivmod>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f40:	e058      	b.n	8006ff4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f42:	4b38      	ldr	r3, [pc, #224]	; (8007024 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	099b      	lsrs	r3, r3, #6
 8006f48:	2200      	movs	r2, #0
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	4611      	mov	r1, r2
 8006f4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006f52:	623b      	str	r3, [r7, #32]
 8006f54:	2300      	movs	r3, #0
 8006f56:	627b      	str	r3, [r7, #36]	; 0x24
 8006f58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006f5c:	4642      	mov	r2, r8
 8006f5e:	464b      	mov	r3, r9
 8006f60:	f04f 0000 	mov.w	r0, #0
 8006f64:	f04f 0100 	mov.w	r1, #0
 8006f68:	0159      	lsls	r1, r3, #5
 8006f6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f6e:	0150      	lsls	r0, r2, #5
 8006f70:	4602      	mov	r2, r0
 8006f72:	460b      	mov	r3, r1
 8006f74:	4641      	mov	r1, r8
 8006f76:	ebb2 0a01 	subs.w	sl, r2, r1
 8006f7a:	4649      	mov	r1, r9
 8006f7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006f80:	f04f 0200 	mov.w	r2, #0
 8006f84:	f04f 0300 	mov.w	r3, #0
 8006f88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006f8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006f90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006f94:	ebb2 040a 	subs.w	r4, r2, sl
 8006f98:	eb63 050b 	sbc.w	r5, r3, fp
 8006f9c:	f04f 0200 	mov.w	r2, #0
 8006fa0:	f04f 0300 	mov.w	r3, #0
 8006fa4:	00eb      	lsls	r3, r5, #3
 8006fa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006faa:	00e2      	lsls	r2, r4, #3
 8006fac:	4614      	mov	r4, r2
 8006fae:	461d      	mov	r5, r3
 8006fb0:	4643      	mov	r3, r8
 8006fb2:	18e3      	adds	r3, r4, r3
 8006fb4:	603b      	str	r3, [r7, #0]
 8006fb6:	464b      	mov	r3, r9
 8006fb8:	eb45 0303 	adc.w	r3, r5, r3
 8006fbc:	607b      	str	r3, [r7, #4]
 8006fbe:	f04f 0200 	mov.w	r2, #0
 8006fc2:	f04f 0300 	mov.w	r3, #0
 8006fc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006fca:	4629      	mov	r1, r5
 8006fcc:	028b      	lsls	r3, r1, #10
 8006fce:	4621      	mov	r1, r4
 8006fd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006fd4:	4621      	mov	r1, r4
 8006fd6:	028a      	lsls	r2, r1, #10
 8006fd8:	4610      	mov	r0, r2
 8006fda:	4619      	mov	r1, r3
 8006fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fde:	2200      	movs	r2, #0
 8006fe0:	61bb      	str	r3, [r7, #24]
 8006fe2:	61fa      	str	r2, [r7, #28]
 8006fe4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fe8:	f7f9 fc58 	bl	800089c <__aeabi_uldivmod>
 8006fec:	4602      	mov	r2, r0
 8006fee:	460b      	mov	r3, r1
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ff4:	4b0b      	ldr	r3, [pc, #44]	; (8007024 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	0c1b      	lsrs	r3, r3, #16
 8006ffa:	f003 0303 	and.w	r3, r3, #3
 8006ffe:	3301      	adds	r3, #1
 8007000:	005b      	lsls	r3, r3, #1
 8007002:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007004:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007008:	fbb2 f3f3 	udiv	r3, r2, r3
 800700c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800700e:	e002      	b.n	8007016 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007010:	4b05      	ldr	r3, [pc, #20]	; (8007028 <HAL_RCC_GetSysClockFreq+0x204>)
 8007012:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007014:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007018:	4618      	mov	r0, r3
 800701a:	3750      	adds	r7, #80	; 0x50
 800701c:	46bd      	mov	sp, r7
 800701e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007022:	bf00      	nop
 8007024:	40023800 	.word	0x40023800
 8007028:	00f42400 	.word	0x00f42400

0800702c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800702c:	b480      	push	{r7}
 800702e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007030:	4b03      	ldr	r3, [pc, #12]	; (8007040 <HAL_RCC_GetHCLKFreq+0x14>)
 8007032:	681b      	ldr	r3, [r3, #0]
}
 8007034:	4618      	mov	r0, r3
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	20000528 	.word	0x20000528

08007044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007048:	f7ff fff0 	bl	800702c <HAL_RCC_GetHCLKFreq>
 800704c:	4602      	mov	r2, r0
 800704e:	4b05      	ldr	r3, [pc, #20]	; (8007064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	0a9b      	lsrs	r3, r3, #10
 8007054:	f003 0307 	and.w	r3, r3, #7
 8007058:	4903      	ldr	r1, [pc, #12]	; (8007068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800705a:	5ccb      	ldrb	r3, [r1, r3]
 800705c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007060:	4618      	mov	r0, r3
 8007062:	bd80      	pop	{r7, pc}
 8007064:	40023800 	.word	0x40023800
 8007068:	08010c74 	.word	0x08010c74

0800706c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	220f      	movs	r2, #15
 800707a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800707c:	4b12      	ldr	r3, [pc, #72]	; (80070c8 <HAL_RCC_GetClockConfig+0x5c>)
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	f003 0203 	and.w	r2, r3, #3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007088:	4b0f      	ldr	r3, [pc, #60]	; (80070c8 <HAL_RCC_GetClockConfig+0x5c>)
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007094:	4b0c      	ldr	r3, [pc, #48]	; (80070c8 <HAL_RCC_GetClockConfig+0x5c>)
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80070a0:	4b09      	ldr	r3, [pc, #36]	; (80070c8 <HAL_RCC_GetClockConfig+0x5c>)
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	08db      	lsrs	r3, r3, #3
 80070a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80070ae:	4b07      	ldr	r3, [pc, #28]	; (80070cc <HAL_RCC_GetClockConfig+0x60>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 0207 	and.w	r2, r3, #7
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	601a      	str	r2, [r3, #0]
}
 80070ba:	bf00      	nop
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	40023800 	.word	0x40023800
 80070cc:	40023c00 	.word	0x40023c00

080070d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d101      	bne.n	80070e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e07b      	b.n	80071da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d108      	bne.n	80070fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070f2:	d009      	beq.n	8007108 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	61da      	str	r2, [r3, #28]
 80070fa:	e005      	b.n	8007108 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d106      	bne.n	8007128 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f7fc fbc2 	bl	80038ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2202      	movs	r2, #2
 800712c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800713e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007150:	431a      	orrs	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800715a:	431a      	orrs	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	f003 0302 	and.w	r3, r3, #2
 8007164:	431a      	orrs	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	f003 0301 	and.w	r3, r3, #1
 800716e:	431a      	orrs	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007178:	431a      	orrs	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007182:	431a      	orrs	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a1b      	ldr	r3, [r3, #32]
 8007188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800718c:	ea42 0103 	orr.w	r1, r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007194:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	430a      	orrs	r2, r1
 800719e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	699b      	ldr	r3, [r3, #24]
 80071a4:	0c1b      	lsrs	r3, r3, #16
 80071a6:	f003 0104 	and.w	r1, r3, #4
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ae:	f003 0210 	and.w	r2, r3, #16
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	430a      	orrs	r2, r1
 80071b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	69da      	ldr	r2, [r3, #28]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b088      	sub	sp, #32
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	60f8      	str	r0, [r7, #12]
 80071ea:	60b9      	str	r1, [r7, #8]
 80071ec:	603b      	str	r3, [r7, #0]
 80071ee:	4613      	mov	r3, r2
 80071f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80071f2:	2300      	movs	r3, #0
 80071f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d101      	bne.n	8007204 <HAL_SPI_Transmit+0x22>
 8007200:	2302      	movs	r3, #2
 8007202:	e126      	b.n	8007452 <HAL_SPI_Transmit+0x270>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800720c:	f7fc fd90 	bl	8003d30 <HAL_GetTick>
 8007210:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007212:	88fb      	ldrh	r3, [r7, #6]
 8007214:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2b01      	cmp	r3, #1
 8007220:	d002      	beq.n	8007228 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007222:	2302      	movs	r3, #2
 8007224:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007226:	e10b      	b.n	8007440 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d002      	beq.n	8007234 <HAL_SPI_Transmit+0x52>
 800722e:	88fb      	ldrh	r3, [r7, #6]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d102      	bne.n	800723a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007238:	e102      	b.n	8007440 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2203      	movs	r2, #3
 800723e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	88fa      	ldrh	r2, [r7, #6]
 8007252:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	88fa      	ldrh	r2, [r7, #6]
 8007258:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007280:	d10f      	bne.n	80072a2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007290:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ac:	2b40      	cmp	r3, #64	; 0x40
 80072ae:	d007      	beq.n	80072c0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072c8:	d14b      	bne.n	8007362 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d002      	beq.n	80072d8 <HAL_SPI_Transmit+0xf6>
 80072d2:	8afb      	ldrh	r3, [r7, #22]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d13e      	bne.n	8007356 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072dc:	881a      	ldrh	r2, [r3, #0]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e8:	1c9a      	adds	r2, r3, #2
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	3b01      	subs	r3, #1
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80072fc:	e02b      	b.n	8007356 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f003 0302 	and.w	r3, r3, #2
 8007308:	2b02      	cmp	r3, #2
 800730a:	d112      	bne.n	8007332 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007310:	881a      	ldrh	r2, [r3, #0]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731c:	1c9a      	adds	r2, r3, #2
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007326:	b29b      	uxth	r3, r3
 8007328:	3b01      	subs	r3, #1
 800732a:	b29a      	uxth	r2, r3
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007330:	e011      	b.n	8007356 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007332:	f7fc fcfd 	bl	8003d30 <HAL_GetTick>
 8007336:	4602      	mov	r2, r0
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	683a      	ldr	r2, [r7, #0]
 800733e:	429a      	cmp	r2, r3
 8007340:	d803      	bhi.n	800734a <HAL_SPI_Transmit+0x168>
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007348:	d102      	bne.n	8007350 <HAL_SPI_Transmit+0x16e>
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d102      	bne.n	8007356 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007354:	e074      	b.n	8007440 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800735a:	b29b      	uxth	r3, r3
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1ce      	bne.n	80072fe <HAL_SPI_Transmit+0x11c>
 8007360:	e04c      	b.n	80073fc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d002      	beq.n	8007370 <HAL_SPI_Transmit+0x18e>
 800736a:	8afb      	ldrh	r3, [r7, #22]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d140      	bne.n	80073f2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	330c      	adds	r3, #12
 800737a:	7812      	ldrb	r2, [r2, #0]
 800737c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007382:	1c5a      	adds	r2, r3, #1
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800738c:	b29b      	uxth	r3, r3
 800738e:	3b01      	subs	r3, #1
 8007390:	b29a      	uxth	r2, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007396:	e02c      	b.n	80073f2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	f003 0302 	and.w	r3, r3, #2
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d113      	bne.n	80073ce <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	330c      	adds	r3, #12
 80073b0:	7812      	ldrb	r2, [r2, #0]
 80073b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b8:	1c5a      	adds	r2, r3, #1
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	3b01      	subs	r3, #1
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	86da      	strh	r2, [r3, #54]	; 0x36
 80073cc:	e011      	b.n	80073f2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073ce:	f7fc fcaf 	bl	8003d30 <HAL_GetTick>
 80073d2:	4602      	mov	r2, r0
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d803      	bhi.n	80073e6 <HAL_SPI_Transmit+0x204>
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e4:	d102      	bne.n	80073ec <HAL_SPI_Transmit+0x20a>
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d102      	bne.n	80073f2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80073ec:	2303      	movs	r3, #3
 80073ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80073f0:	e026      	b.n	8007440 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1cd      	bne.n	8007398 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073fc:	69ba      	ldr	r2, [r7, #24]
 80073fe:	6839      	ldr	r1, [r7, #0]
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f000 fa55 	bl	80078b0 <SPI_EndRxTxTransaction>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d002      	beq.n	8007412 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2220      	movs	r2, #32
 8007410:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10a      	bne.n	8007430 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800741a:	2300      	movs	r3, #0
 800741c:	613b      	str	r3, [r7, #16]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	613b      	str	r3, [r7, #16]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	613b      	str	r3, [r7, #16]
 800742e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007434:	2b00      	cmp	r3, #0
 8007436:	d002      	beq.n	800743e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	77fb      	strb	r3, [r7, #31]
 800743c:	e000      	b.n	8007440 <HAL_SPI_Transmit+0x25e>
  }

error:
 800743e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007450:	7ffb      	ldrb	r3, [r7, #31]
}
 8007452:	4618      	mov	r0, r3
 8007454:	3720      	adds	r7, #32
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b08c      	sub	sp, #48	; 0x30
 800745e:	af00      	add	r7, sp, #0
 8007460:	60f8      	str	r0, [r7, #12]
 8007462:	60b9      	str	r1, [r7, #8]
 8007464:	607a      	str	r2, [r7, #4]
 8007466:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007468:	2301      	movs	r3, #1
 800746a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800746c:	2300      	movs	r3, #0
 800746e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007478:	2b01      	cmp	r3, #1
 800747a:	d101      	bne.n	8007480 <HAL_SPI_TransmitReceive+0x26>
 800747c:	2302      	movs	r3, #2
 800747e:	e18a      	b.n	8007796 <HAL_SPI_TransmitReceive+0x33c>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007488:	f7fc fc52 	bl	8003d30 <HAL_GetTick>
 800748c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007494:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800749e:	887b      	ldrh	r3, [r7, #2]
 80074a0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80074a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d00f      	beq.n	80074ca <HAL_SPI_TransmitReceive+0x70>
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074b0:	d107      	bne.n	80074c2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d103      	bne.n	80074c2 <HAL_SPI_TransmitReceive+0x68>
 80074ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074be:	2b04      	cmp	r3, #4
 80074c0:	d003      	beq.n	80074ca <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80074c2:	2302      	movs	r3, #2
 80074c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80074c8:	e15b      	b.n	8007782 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d005      	beq.n	80074dc <HAL_SPI_TransmitReceive+0x82>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d002      	beq.n	80074dc <HAL_SPI_TransmitReceive+0x82>
 80074d6:	887b      	ldrh	r3, [r7, #2]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d103      	bne.n	80074e4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80074e2:	e14e      	b.n	8007782 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	2b04      	cmp	r3, #4
 80074ee:	d003      	beq.n	80074f8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2205      	movs	r2, #5
 80074f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	887a      	ldrh	r2, [r7, #2]
 8007508:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	887a      	ldrh	r2, [r7, #2]
 800750e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	887a      	ldrh	r2, [r7, #2]
 800751a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	887a      	ldrh	r2, [r7, #2]
 8007520:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007538:	2b40      	cmp	r3, #64	; 0x40
 800753a:	d007      	beq.n	800754c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800754a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007554:	d178      	bne.n	8007648 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d002      	beq.n	8007564 <HAL_SPI_TransmitReceive+0x10a>
 800755e:	8b7b      	ldrh	r3, [r7, #26]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d166      	bne.n	8007632 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007568:	881a      	ldrh	r2, [r3, #0]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007574:	1c9a      	adds	r2, r3, #2
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800757e:	b29b      	uxth	r3, r3
 8007580:	3b01      	subs	r3, #1
 8007582:	b29a      	uxth	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007588:	e053      	b.n	8007632 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	f003 0302 	and.w	r3, r3, #2
 8007594:	2b02      	cmp	r3, #2
 8007596:	d11b      	bne.n	80075d0 <HAL_SPI_TransmitReceive+0x176>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800759c:	b29b      	uxth	r3, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d016      	beq.n	80075d0 <HAL_SPI_TransmitReceive+0x176>
 80075a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d113      	bne.n	80075d0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ac:	881a      	ldrh	r2, [r3, #0]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b8:	1c9a      	adds	r2, r3, #2
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	3b01      	subs	r3, #1
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075cc:	2300      	movs	r3, #0
 80075ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d119      	bne.n	8007612 <HAL_SPI_TransmitReceive+0x1b8>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d014      	beq.n	8007612 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68da      	ldr	r2, [r3, #12]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f2:	b292      	uxth	r2, r2
 80075f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fa:	1c9a      	adds	r2, r3, #2
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007604:	b29b      	uxth	r3, r3
 8007606:	3b01      	subs	r3, #1
 8007608:	b29a      	uxth	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800760e:	2301      	movs	r3, #1
 8007610:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007612:	f7fc fb8d 	bl	8003d30 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800761e:	429a      	cmp	r2, r3
 8007620:	d807      	bhi.n	8007632 <HAL_SPI_TransmitReceive+0x1d8>
 8007622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007628:	d003      	beq.n	8007632 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007630:	e0a7      	b.n	8007782 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007636:	b29b      	uxth	r3, r3
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1a6      	bne.n	800758a <HAL_SPI_TransmitReceive+0x130>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007640:	b29b      	uxth	r3, r3
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1a1      	bne.n	800758a <HAL_SPI_TransmitReceive+0x130>
 8007646:	e07c      	b.n	8007742 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d002      	beq.n	8007656 <HAL_SPI_TransmitReceive+0x1fc>
 8007650:	8b7b      	ldrh	r3, [r7, #26]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d16b      	bne.n	800772e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	330c      	adds	r3, #12
 8007660:	7812      	ldrb	r2, [r2, #0]
 8007662:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007668:	1c5a      	adds	r2, r3, #1
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007672:	b29b      	uxth	r3, r3
 8007674:	3b01      	subs	r3, #1
 8007676:	b29a      	uxth	r2, r3
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800767c:	e057      	b.n	800772e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	f003 0302 	and.w	r3, r3, #2
 8007688:	2b02      	cmp	r3, #2
 800768a:	d11c      	bne.n	80076c6 <HAL_SPI_TransmitReceive+0x26c>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007690:	b29b      	uxth	r3, r3
 8007692:	2b00      	cmp	r3, #0
 8007694:	d017      	beq.n	80076c6 <HAL_SPI_TransmitReceive+0x26c>
 8007696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007698:	2b01      	cmp	r3, #1
 800769a:	d114      	bne.n	80076c6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	330c      	adds	r3, #12
 80076a6:	7812      	ldrb	r2, [r2, #0]
 80076a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ae:	1c5a      	adds	r2, r3, #1
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	3b01      	subs	r3, #1
 80076bc:	b29a      	uxth	r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076c2:	2300      	movs	r3, #0
 80076c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d119      	bne.n	8007708 <HAL_SPI_TransmitReceive+0x2ae>
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076d8:	b29b      	uxth	r3, r3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d014      	beq.n	8007708 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68da      	ldr	r2, [r3, #12]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e8:	b2d2      	uxtb	r2, r2
 80076ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f0:	1c5a      	adds	r2, r3, #1
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	3b01      	subs	r3, #1
 80076fe:	b29a      	uxth	r2, r3
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007704:	2301      	movs	r3, #1
 8007706:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007708:	f7fc fb12 	bl	8003d30 <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007714:	429a      	cmp	r2, r3
 8007716:	d803      	bhi.n	8007720 <HAL_SPI_TransmitReceive+0x2c6>
 8007718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771e:	d102      	bne.n	8007726 <HAL_SPI_TransmitReceive+0x2cc>
 8007720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007722:	2b00      	cmp	r3, #0
 8007724:	d103      	bne.n	800772e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800772c:	e029      	b.n	8007782 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007732:	b29b      	uxth	r3, r3
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1a2      	bne.n	800767e <HAL_SPI_TransmitReceive+0x224>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800773c:	b29b      	uxth	r3, r3
 800773e:	2b00      	cmp	r3, #0
 8007740:	d19d      	bne.n	800767e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007744:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f000 f8b2 	bl	80078b0 <SPI_EndRxTxTransaction>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d006      	beq.n	8007760 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2220      	movs	r2, #32
 800775c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800775e:	e010      	b.n	8007782 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10b      	bne.n	8007780 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007768:	2300      	movs	r3, #0
 800776a:	617b      	str	r3, [r7, #20]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	617b      	str	r3, [r7, #20]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	617b      	str	r3, [r7, #20]
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	e000      	b.n	8007782 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007780:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007792:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007796:	4618      	mov	r0, r3
 8007798:	3730      	adds	r7, #48	; 0x30
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
	...

080077a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b088      	sub	sp, #32
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	603b      	str	r3, [r7, #0]
 80077ac:	4613      	mov	r3, r2
 80077ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80077b0:	f7fc fabe 	bl	8003d30 <HAL_GetTick>
 80077b4:	4602      	mov	r2, r0
 80077b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b8:	1a9b      	subs	r3, r3, r2
 80077ba:	683a      	ldr	r2, [r7, #0]
 80077bc:	4413      	add	r3, r2
 80077be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80077c0:	f7fc fab6 	bl	8003d30 <HAL_GetTick>
 80077c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80077c6:	4b39      	ldr	r3, [pc, #228]	; (80078ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	015b      	lsls	r3, r3, #5
 80077cc:	0d1b      	lsrs	r3, r3, #20
 80077ce:	69fa      	ldr	r2, [r7, #28]
 80077d0:	fb02 f303 	mul.w	r3, r2, r3
 80077d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077d6:	e054      	b.n	8007882 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077de:	d050      	beq.n	8007882 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80077e0:	f7fc faa6 	bl	8003d30 <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	69fa      	ldr	r2, [r7, #28]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d902      	bls.n	80077f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d13d      	bne.n	8007872 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	685a      	ldr	r2, [r3, #4]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007804:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800780e:	d111      	bne.n	8007834 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007818:	d004      	beq.n	8007824 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007822:	d107      	bne.n	8007834 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007832:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800783c:	d10f      	bne.n	800785e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800784c:	601a      	str	r2, [r3, #0]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800785c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2201      	movs	r2, #1
 8007862:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e017      	b.n	80078a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d101      	bne.n	800787c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007878:	2300      	movs	r3, #0
 800787a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	3b01      	subs	r3, #1
 8007880:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	689a      	ldr	r2, [r3, #8]
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	4013      	ands	r3, r2
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	429a      	cmp	r2, r3
 8007890:	bf0c      	ite	eq
 8007892:	2301      	moveq	r3, #1
 8007894:	2300      	movne	r3, #0
 8007896:	b2db      	uxtb	r3, r3
 8007898:	461a      	mov	r2, r3
 800789a:	79fb      	ldrb	r3, [r7, #7]
 800789c:	429a      	cmp	r2, r3
 800789e:	d19b      	bne.n	80077d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3720      	adds	r7, #32
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	20000528 	.word	0x20000528

080078b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b088      	sub	sp, #32
 80078b4:	af02      	add	r7, sp, #8
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80078bc:	4b1b      	ldr	r3, [pc, #108]	; (800792c <SPI_EndRxTxTransaction+0x7c>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a1b      	ldr	r2, [pc, #108]	; (8007930 <SPI_EndRxTxTransaction+0x80>)
 80078c2:	fba2 2303 	umull	r2, r3, r2, r3
 80078c6:	0d5b      	lsrs	r3, r3, #21
 80078c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80078cc:	fb02 f303 	mul.w	r3, r2, r3
 80078d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078da:	d112      	bne.n	8007902 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	2200      	movs	r2, #0
 80078e4:	2180      	movs	r1, #128	; 0x80
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f7ff ff5a 	bl	80077a0 <SPI_WaitFlagStateUntilTimeout>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d016      	beq.n	8007920 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f6:	f043 0220 	orr.w	r2, r3, #32
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80078fe:	2303      	movs	r3, #3
 8007900:	e00f      	b.n	8007922 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d00a      	beq.n	800791e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	3b01      	subs	r3, #1
 800790c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007918:	2b80      	cmp	r3, #128	; 0x80
 800791a:	d0f2      	beq.n	8007902 <SPI_EndRxTxTransaction+0x52>
 800791c:	e000      	b.n	8007920 <SPI_EndRxTxTransaction+0x70>
        break;
 800791e:	bf00      	nop
  }

  return HAL_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3718      	adds	r7, #24
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	20000528 	.word	0x20000528
 8007930:	165e9f81 	.word	0x165e9f81

08007934 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d101      	bne.n	8007946 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e041      	b.n	80079ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d106      	bne.n	8007960 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7fc f824 	bl	80039a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2202      	movs	r2, #2
 8007964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	3304      	adds	r3, #4
 8007970:	4619      	mov	r1, r3
 8007972:	4610      	mov	r0, r2
 8007974:	f000 fd3a 	bl	80083ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3708      	adds	r7, #8
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
	...

080079d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d001      	beq.n	80079ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e03c      	b.n	8007a66 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2202      	movs	r2, #2
 80079f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a1e      	ldr	r2, [pc, #120]	; (8007a74 <HAL_TIM_Base_Start+0xa0>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d018      	beq.n	8007a30 <HAL_TIM_Base_Start+0x5c>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a06:	d013      	beq.n	8007a30 <HAL_TIM_Base_Start+0x5c>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a1a      	ldr	r2, [pc, #104]	; (8007a78 <HAL_TIM_Base_Start+0xa4>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d00e      	beq.n	8007a30 <HAL_TIM_Base_Start+0x5c>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a19      	ldr	r2, [pc, #100]	; (8007a7c <HAL_TIM_Base_Start+0xa8>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d009      	beq.n	8007a30 <HAL_TIM_Base_Start+0x5c>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a17      	ldr	r2, [pc, #92]	; (8007a80 <HAL_TIM_Base_Start+0xac>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d004      	beq.n	8007a30 <HAL_TIM_Base_Start+0x5c>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a16      	ldr	r2, [pc, #88]	; (8007a84 <HAL_TIM_Base_Start+0xb0>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d111      	bne.n	8007a54 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	f003 0307 	and.w	r3, r3, #7
 8007a3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2b06      	cmp	r3, #6
 8007a40:	d010      	beq.n	8007a64 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f042 0201 	orr.w	r2, r2, #1
 8007a50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a52:	e007      	b.n	8007a64 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f042 0201 	orr.w	r2, r2, #1
 8007a62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3714      	adds	r7, #20
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	40010000 	.word	0x40010000
 8007a78:	40000400 	.word	0x40000400
 8007a7c:	40000800 	.word	0x40000800
 8007a80:	40000c00 	.word	0x40000c00
 8007a84:	40014000 	.word	0x40014000

08007a88 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6a1a      	ldr	r2, [r3, #32]
 8007a96:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10f      	bne.n	8007ac0 <HAL_TIM_Base_Stop+0x38>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6a1a      	ldr	r2, [r3, #32]
 8007aa6:	f240 4344 	movw	r3, #1092	; 0x444
 8007aaa:	4013      	ands	r3, r2
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d107      	bne.n	8007ac0 <HAL_TIM_Base_Stop+0x38>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f022 0201 	bic.w	r2, r2, #1
 8007abe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	370c      	adds	r7, #12
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
	...

08007ad8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d001      	beq.n	8007af0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e044      	b.n	8007b7a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2202      	movs	r2, #2
 8007af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68da      	ldr	r2, [r3, #12]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f042 0201 	orr.w	r2, r2, #1
 8007b06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a1e      	ldr	r2, [pc, #120]	; (8007b88 <HAL_TIM_Base_Start_IT+0xb0>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d018      	beq.n	8007b44 <HAL_TIM_Base_Start_IT+0x6c>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b1a:	d013      	beq.n	8007b44 <HAL_TIM_Base_Start_IT+0x6c>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a1a      	ldr	r2, [pc, #104]	; (8007b8c <HAL_TIM_Base_Start_IT+0xb4>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d00e      	beq.n	8007b44 <HAL_TIM_Base_Start_IT+0x6c>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a19      	ldr	r2, [pc, #100]	; (8007b90 <HAL_TIM_Base_Start_IT+0xb8>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d009      	beq.n	8007b44 <HAL_TIM_Base_Start_IT+0x6c>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a17      	ldr	r2, [pc, #92]	; (8007b94 <HAL_TIM_Base_Start_IT+0xbc>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d004      	beq.n	8007b44 <HAL_TIM_Base_Start_IT+0x6c>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a16      	ldr	r2, [pc, #88]	; (8007b98 <HAL_TIM_Base_Start_IT+0xc0>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d111      	bne.n	8007b68 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f003 0307 	and.w	r3, r3, #7
 8007b4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2b06      	cmp	r3, #6
 8007b54:	d010      	beq.n	8007b78 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f042 0201 	orr.w	r2, r2, #1
 8007b64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b66:	e007      	b.n	8007b78 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f042 0201 	orr.w	r2, r2, #1
 8007b76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3714      	adds	r7, #20
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	40010000 	.word	0x40010000
 8007b8c:	40000400 	.word	0x40000400
 8007b90:	40000800 	.word	0x40000800
 8007b94:	40000c00 	.word	0x40000c00
 8007b98:	40014000 	.word	0x40014000

08007b9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d101      	bne.n	8007bae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e041      	b.n	8007c32 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d106      	bne.n	8007bc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f839 	bl	8007c3a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2202      	movs	r2, #2
 8007bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	3304      	adds	r3, #4
 8007bd8:	4619      	mov	r1, r3
 8007bda:	4610      	mov	r0, r2
 8007bdc:	f000 fc06 	bl	80083ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3708      	adds	r7, #8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b083      	sub	sp, #12
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007c42:	bf00      	nop
 8007c44:	370c      	adds	r7, #12
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr
	...

08007c50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d109      	bne.n	8007c74 <HAL_TIM_PWM_Start+0x24>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	bf14      	ite	ne
 8007c6c:	2301      	movne	r3, #1
 8007c6e:	2300      	moveq	r3, #0
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	e022      	b.n	8007cba <HAL_TIM_PWM_Start+0x6a>
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	2b04      	cmp	r3, #4
 8007c78:	d109      	bne.n	8007c8e <HAL_TIM_PWM_Start+0x3e>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	bf14      	ite	ne
 8007c86:	2301      	movne	r3, #1
 8007c88:	2300      	moveq	r3, #0
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	e015      	b.n	8007cba <HAL_TIM_PWM_Start+0x6a>
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	2b08      	cmp	r3, #8
 8007c92:	d109      	bne.n	8007ca8 <HAL_TIM_PWM_Start+0x58>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	bf14      	ite	ne
 8007ca0:	2301      	movne	r3, #1
 8007ca2:	2300      	moveq	r3, #0
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	e008      	b.n	8007cba <HAL_TIM_PWM_Start+0x6a>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	bf14      	ite	ne
 8007cb4:	2301      	movne	r3, #1
 8007cb6:	2300      	moveq	r3, #0
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d001      	beq.n	8007cc2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e068      	b.n	8007d94 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d104      	bne.n	8007cd2 <HAL_TIM_PWM_Start+0x82>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2202      	movs	r2, #2
 8007ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cd0:	e013      	b.n	8007cfa <HAL_TIM_PWM_Start+0xaa>
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2b04      	cmp	r3, #4
 8007cd6:	d104      	bne.n	8007ce2 <HAL_TIM_PWM_Start+0x92>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2202      	movs	r2, #2
 8007cdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ce0:	e00b      	b.n	8007cfa <HAL_TIM_PWM_Start+0xaa>
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	2b08      	cmp	r3, #8
 8007ce6:	d104      	bne.n	8007cf2 <HAL_TIM_PWM_Start+0xa2>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2202      	movs	r2, #2
 8007cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cf0:	e003      	b.n	8007cfa <HAL_TIM_PWM_Start+0xaa>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2202      	movs	r2, #2
 8007cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	6839      	ldr	r1, [r7, #0]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f000 fe18 	bl	8008938 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a23      	ldr	r2, [pc, #140]	; (8007d9c <HAL_TIM_PWM_Start+0x14c>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d107      	bne.n	8007d22 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a1d      	ldr	r2, [pc, #116]	; (8007d9c <HAL_TIM_PWM_Start+0x14c>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d018      	beq.n	8007d5e <HAL_TIM_PWM_Start+0x10e>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d34:	d013      	beq.n	8007d5e <HAL_TIM_PWM_Start+0x10e>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a19      	ldr	r2, [pc, #100]	; (8007da0 <HAL_TIM_PWM_Start+0x150>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d00e      	beq.n	8007d5e <HAL_TIM_PWM_Start+0x10e>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a17      	ldr	r2, [pc, #92]	; (8007da4 <HAL_TIM_PWM_Start+0x154>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d009      	beq.n	8007d5e <HAL_TIM_PWM_Start+0x10e>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a16      	ldr	r2, [pc, #88]	; (8007da8 <HAL_TIM_PWM_Start+0x158>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d004      	beq.n	8007d5e <HAL_TIM_PWM_Start+0x10e>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a14      	ldr	r2, [pc, #80]	; (8007dac <HAL_TIM_PWM_Start+0x15c>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d111      	bne.n	8007d82 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	f003 0307 	and.w	r3, r3, #7
 8007d68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2b06      	cmp	r3, #6
 8007d6e:	d010      	beq.n	8007d92 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f042 0201 	orr.w	r2, r2, #1
 8007d7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d80:	e007      	b.n	8007d92 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f042 0201 	orr.w	r2, r2, #1
 8007d90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	40010000 	.word	0x40010000
 8007da0:	40000400 	.word	0x40000400
 8007da4:	40000800 	.word	0x40000800
 8007da8:	40000c00 	.word	0x40000c00
 8007dac:	40014000 	.word	0x40014000

08007db0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	6839      	ldr	r1, [r7, #0]
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f000 fdb8 	bl	8008938 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a29      	ldr	r2, [pc, #164]	; (8007e74 <HAL_TIM_PWM_Stop+0xc4>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d117      	bne.n	8007e02 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	6a1a      	ldr	r2, [r3, #32]
 8007dd8:	f241 1311 	movw	r3, #4369	; 0x1111
 8007ddc:	4013      	ands	r3, r2
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d10f      	bne.n	8007e02 <HAL_TIM_PWM_Stop+0x52>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	6a1a      	ldr	r2, [r3, #32]
 8007de8:	f240 4344 	movw	r3, #1092	; 0x444
 8007dec:	4013      	ands	r3, r2
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d107      	bne.n	8007e02 <HAL_TIM_PWM_Stop+0x52>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	6a1a      	ldr	r2, [r3, #32]
 8007e08:	f241 1311 	movw	r3, #4369	; 0x1111
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10f      	bne.n	8007e32 <HAL_TIM_PWM_Stop+0x82>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	6a1a      	ldr	r2, [r3, #32]
 8007e18:	f240 4344 	movw	r3, #1092	; 0x444
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d107      	bne.n	8007e32 <HAL_TIM_PWM_Stop+0x82>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f022 0201 	bic.w	r2, r2, #1
 8007e30:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d104      	bne.n	8007e42 <HAL_TIM_PWM_Stop+0x92>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e40:	e013      	b.n	8007e6a <HAL_TIM_PWM_Stop+0xba>
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	2b04      	cmp	r3, #4
 8007e46:	d104      	bne.n	8007e52 <HAL_TIM_PWM_Stop+0xa2>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e50:	e00b      	b.n	8007e6a <HAL_TIM_PWM_Stop+0xba>
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	2b08      	cmp	r3, #8
 8007e56:	d104      	bne.n	8007e62 <HAL_TIM_PWM_Stop+0xb2>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e60:	e003      	b.n	8007e6a <HAL_TIM_PWM_Stop+0xba>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	40010000 	.word	0x40010000

08007e78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	f003 0302 	and.w	r3, r3, #2
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d122      	bne.n	8007ed4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	f003 0302 	and.w	r3, r3, #2
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d11b      	bne.n	8007ed4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f06f 0202 	mvn.w	r2, #2
 8007ea4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	699b      	ldr	r3, [r3, #24]
 8007eb2:	f003 0303 	and.w	r3, r3, #3
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d003      	beq.n	8007ec2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fa77 	bl	80083ae <HAL_TIM_IC_CaptureCallback>
 8007ec0:	e005      	b.n	8007ece <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 fa69 	bl	800839a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 fa7a 	bl	80083c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	f003 0304 	and.w	r3, r3, #4
 8007ede:	2b04      	cmp	r3, #4
 8007ee0:	d122      	bne.n	8007f28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	f003 0304 	and.w	r3, r3, #4
 8007eec:	2b04      	cmp	r3, #4
 8007eee:	d11b      	bne.n	8007f28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f06f 0204 	mvn.w	r2, #4
 8007ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2202      	movs	r2, #2
 8007efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d003      	beq.n	8007f16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 fa4d 	bl	80083ae <HAL_TIM_IC_CaptureCallback>
 8007f14:	e005      	b.n	8007f22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 fa3f 	bl	800839a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fa50 	bl	80083c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	f003 0308 	and.w	r3, r3, #8
 8007f32:	2b08      	cmp	r3, #8
 8007f34:	d122      	bne.n	8007f7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	f003 0308 	and.w	r3, r3, #8
 8007f40:	2b08      	cmp	r3, #8
 8007f42:	d11b      	bne.n	8007f7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f06f 0208 	mvn.w	r2, #8
 8007f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2204      	movs	r2, #4
 8007f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	69db      	ldr	r3, [r3, #28]
 8007f5a:	f003 0303 	and.w	r3, r3, #3
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d003      	beq.n	8007f6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fa23 	bl	80083ae <HAL_TIM_IC_CaptureCallback>
 8007f68:	e005      	b.n	8007f76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 fa15 	bl	800839a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fa26 	bl	80083c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	f003 0310 	and.w	r3, r3, #16
 8007f86:	2b10      	cmp	r3, #16
 8007f88:	d122      	bne.n	8007fd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	f003 0310 	and.w	r3, r3, #16
 8007f94:	2b10      	cmp	r3, #16
 8007f96:	d11b      	bne.n	8007fd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f06f 0210 	mvn.w	r2, #16
 8007fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2208      	movs	r2, #8
 8007fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	69db      	ldr	r3, [r3, #28]
 8007fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d003      	beq.n	8007fbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f9f9 	bl	80083ae <HAL_TIM_IC_CaptureCallback>
 8007fbc:	e005      	b.n	8007fca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f9eb 	bl	800839a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 f9fc 	bl	80083c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	f003 0301 	and.w	r3, r3, #1
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d10e      	bne.n	8007ffc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	f003 0301 	and.w	r3, r3, #1
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d107      	bne.n	8007ffc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f06f 0201 	mvn.w	r2, #1
 8007ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f7fb f8a2 	bl	8003140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008006:	2b80      	cmp	r3, #128	; 0x80
 8008008:	d10e      	bne.n	8008028 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008014:	2b80      	cmp	r3, #128	; 0x80
 8008016:	d107      	bne.n	8008028 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 fd26 	bl	8008a74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008032:	2b40      	cmp	r3, #64	; 0x40
 8008034:	d10e      	bne.n	8008054 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008040:	2b40      	cmp	r3, #64	; 0x40
 8008042:	d107      	bne.n	8008054 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800804c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 f9c1 	bl	80083d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	f003 0320 	and.w	r3, r3, #32
 800805e:	2b20      	cmp	r3, #32
 8008060:	d10e      	bne.n	8008080 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	f003 0320 	and.w	r3, r3, #32
 800806c:	2b20      	cmp	r3, #32
 800806e:	d107      	bne.n	8008080 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f06f 0220 	mvn.w	r2, #32
 8008078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 fcf0 	bl	8008a60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008080:	bf00      	nop
 8008082:	3708      	adds	r7, #8
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008094:	2300      	movs	r3, #0
 8008096:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d101      	bne.n	80080a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80080a2:	2302      	movs	r3, #2
 80080a4:	e0ae      	b.n	8008204 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2b0c      	cmp	r3, #12
 80080b2:	f200 809f 	bhi.w	80081f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80080b6:	a201      	add	r2, pc, #4	; (adr r2, 80080bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80080b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080bc:	080080f1 	.word	0x080080f1
 80080c0:	080081f5 	.word	0x080081f5
 80080c4:	080081f5 	.word	0x080081f5
 80080c8:	080081f5 	.word	0x080081f5
 80080cc:	08008131 	.word	0x08008131
 80080d0:	080081f5 	.word	0x080081f5
 80080d4:	080081f5 	.word	0x080081f5
 80080d8:	080081f5 	.word	0x080081f5
 80080dc:	08008173 	.word	0x08008173
 80080e0:	080081f5 	.word	0x080081f5
 80080e4:	080081f5 	.word	0x080081f5
 80080e8:	080081f5 	.word	0x080081f5
 80080ec:	080081b3 	.word	0x080081b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68b9      	ldr	r1, [r7, #8]
 80080f6:	4618      	mov	r0, r3
 80080f8:	f000 f9f8 	bl	80084ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	699a      	ldr	r2, [r3, #24]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f042 0208 	orr.w	r2, r2, #8
 800810a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	699a      	ldr	r2, [r3, #24]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f022 0204 	bic.w	r2, r2, #4
 800811a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	6999      	ldr	r1, [r3, #24]
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	691a      	ldr	r2, [r3, #16]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	430a      	orrs	r2, r1
 800812c:	619a      	str	r2, [r3, #24]
      break;
 800812e:	e064      	b.n	80081fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	68b9      	ldr	r1, [r7, #8]
 8008136:	4618      	mov	r0, r3
 8008138:	f000 fa3e 	bl	80085b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	699a      	ldr	r2, [r3, #24]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800814a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	699a      	ldr	r2, [r3, #24]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800815a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	6999      	ldr	r1, [r3, #24]
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	021a      	lsls	r2, r3, #8
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	430a      	orrs	r2, r1
 800816e:	619a      	str	r2, [r3, #24]
      break;
 8008170:	e043      	b.n	80081fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68b9      	ldr	r1, [r7, #8]
 8008178:	4618      	mov	r0, r3
 800817a:	f000 fa89 	bl	8008690 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	69da      	ldr	r2, [r3, #28]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f042 0208 	orr.w	r2, r2, #8
 800818c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	69da      	ldr	r2, [r3, #28]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f022 0204 	bic.w	r2, r2, #4
 800819c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	69d9      	ldr	r1, [r3, #28]
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	691a      	ldr	r2, [r3, #16]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	430a      	orrs	r2, r1
 80081ae:	61da      	str	r2, [r3, #28]
      break;
 80081b0:	e023      	b.n	80081fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68b9      	ldr	r1, [r7, #8]
 80081b8:	4618      	mov	r0, r3
 80081ba:	f000 fad3 	bl	8008764 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	69da      	ldr	r2, [r3, #28]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	69da      	ldr	r2, [r3, #28]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	69d9      	ldr	r1, [r3, #28]
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	021a      	lsls	r2, r3, #8
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	430a      	orrs	r2, r1
 80081f0:	61da      	str	r2, [r3, #28]
      break;
 80081f2:	e002      	b.n	80081fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	75fb      	strb	r3, [r7, #23]
      break;
 80081f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008202:	7dfb      	ldrb	r3, [r7, #23]
}
 8008204:	4618      	mov	r0, r3
 8008206:	3718      	adds	r7, #24
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008216:	2300      	movs	r3, #0
 8008218:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008220:	2b01      	cmp	r3, #1
 8008222:	d101      	bne.n	8008228 <HAL_TIM_ConfigClockSource+0x1c>
 8008224:	2302      	movs	r3, #2
 8008226:	e0b4      	b.n	8008392 <HAL_TIM_ConfigClockSource+0x186>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2202      	movs	r2, #2
 8008234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008246:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800824e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68ba      	ldr	r2, [r7, #8]
 8008256:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008260:	d03e      	beq.n	80082e0 <HAL_TIM_ConfigClockSource+0xd4>
 8008262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008266:	f200 8087 	bhi.w	8008378 <HAL_TIM_ConfigClockSource+0x16c>
 800826a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800826e:	f000 8086 	beq.w	800837e <HAL_TIM_ConfigClockSource+0x172>
 8008272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008276:	d87f      	bhi.n	8008378 <HAL_TIM_ConfigClockSource+0x16c>
 8008278:	2b70      	cmp	r3, #112	; 0x70
 800827a:	d01a      	beq.n	80082b2 <HAL_TIM_ConfigClockSource+0xa6>
 800827c:	2b70      	cmp	r3, #112	; 0x70
 800827e:	d87b      	bhi.n	8008378 <HAL_TIM_ConfigClockSource+0x16c>
 8008280:	2b60      	cmp	r3, #96	; 0x60
 8008282:	d050      	beq.n	8008326 <HAL_TIM_ConfigClockSource+0x11a>
 8008284:	2b60      	cmp	r3, #96	; 0x60
 8008286:	d877      	bhi.n	8008378 <HAL_TIM_ConfigClockSource+0x16c>
 8008288:	2b50      	cmp	r3, #80	; 0x50
 800828a:	d03c      	beq.n	8008306 <HAL_TIM_ConfigClockSource+0xfa>
 800828c:	2b50      	cmp	r3, #80	; 0x50
 800828e:	d873      	bhi.n	8008378 <HAL_TIM_ConfigClockSource+0x16c>
 8008290:	2b40      	cmp	r3, #64	; 0x40
 8008292:	d058      	beq.n	8008346 <HAL_TIM_ConfigClockSource+0x13a>
 8008294:	2b40      	cmp	r3, #64	; 0x40
 8008296:	d86f      	bhi.n	8008378 <HAL_TIM_ConfigClockSource+0x16c>
 8008298:	2b30      	cmp	r3, #48	; 0x30
 800829a:	d064      	beq.n	8008366 <HAL_TIM_ConfigClockSource+0x15a>
 800829c:	2b30      	cmp	r3, #48	; 0x30
 800829e:	d86b      	bhi.n	8008378 <HAL_TIM_ConfigClockSource+0x16c>
 80082a0:	2b20      	cmp	r3, #32
 80082a2:	d060      	beq.n	8008366 <HAL_TIM_ConfigClockSource+0x15a>
 80082a4:	2b20      	cmp	r3, #32
 80082a6:	d867      	bhi.n	8008378 <HAL_TIM_ConfigClockSource+0x16c>
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d05c      	beq.n	8008366 <HAL_TIM_ConfigClockSource+0x15a>
 80082ac:	2b10      	cmp	r3, #16
 80082ae:	d05a      	beq.n	8008366 <HAL_TIM_ConfigClockSource+0x15a>
 80082b0:	e062      	b.n	8008378 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6818      	ldr	r0, [r3, #0]
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	6899      	ldr	r1, [r3, #8]
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	685a      	ldr	r2, [r3, #4]
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	f000 fb19 	bl	80088f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80082d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	609a      	str	r2, [r3, #8]
      break;
 80082de:	e04f      	b.n	8008380 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6818      	ldr	r0, [r3, #0]
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	6899      	ldr	r1, [r3, #8]
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	685a      	ldr	r2, [r3, #4]
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	f000 fb02 	bl	80088f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	689a      	ldr	r2, [r3, #8]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008302:	609a      	str	r2, [r3, #8]
      break;
 8008304:	e03c      	b.n	8008380 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6818      	ldr	r0, [r3, #0]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	6859      	ldr	r1, [r3, #4]
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	461a      	mov	r2, r3
 8008314:	f000 fa76 	bl	8008804 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2150      	movs	r1, #80	; 0x50
 800831e:	4618      	mov	r0, r3
 8008320:	f000 facf 	bl	80088c2 <TIM_ITRx_SetConfig>
      break;
 8008324:	e02c      	b.n	8008380 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6818      	ldr	r0, [r3, #0]
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	6859      	ldr	r1, [r3, #4]
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	461a      	mov	r2, r3
 8008334:	f000 fa95 	bl	8008862 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	2160      	movs	r1, #96	; 0x60
 800833e:	4618      	mov	r0, r3
 8008340:	f000 fabf 	bl	80088c2 <TIM_ITRx_SetConfig>
      break;
 8008344:	e01c      	b.n	8008380 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6818      	ldr	r0, [r3, #0]
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	6859      	ldr	r1, [r3, #4]
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	461a      	mov	r2, r3
 8008354:	f000 fa56 	bl	8008804 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2140      	movs	r1, #64	; 0x40
 800835e:	4618      	mov	r0, r3
 8008360:	f000 faaf 	bl	80088c2 <TIM_ITRx_SetConfig>
      break;
 8008364:	e00c      	b.n	8008380 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4619      	mov	r1, r3
 8008370:	4610      	mov	r0, r2
 8008372:	f000 faa6 	bl	80088c2 <TIM_ITRx_SetConfig>
      break;
 8008376:	e003      	b.n	8008380 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	73fb      	strb	r3, [r7, #15]
      break;
 800837c:	e000      	b.n	8008380 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800837e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008390:	7bfb      	ldrb	r3, [r7, #15]
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800839a:	b480      	push	{r7}
 800839c:	b083      	sub	sp, #12
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083a2:	bf00      	nop
 80083a4:	370c      	adds	r7, #12
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80083ae:	b480      	push	{r7}
 80083b0:	b083      	sub	sp, #12
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80083b6:	bf00      	nop
 80083b8:	370c      	adds	r7, #12
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr

080083c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80083c2:	b480      	push	{r7}
 80083c4:	b083      	sub	sp, #12
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80083ca:	bf00      	nop
 80083cc:	370c      	adds	r7, #12
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr

080083d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083d6:	b480      	push	{r7}
 80083d8:	b083      	sub	sp, #12
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083de:	bf00      	nop
 80083e0:	370c      	adds	r7, #12
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
	...

080083ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a34      	ldr	r2, [pc, #208]	; (80084d0 <TIM_Base_SetConfig+0xe4>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d00f      	beq.n	8008424 <TIM_Base_SetConfig+0x38>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800840a:	d00b      	beq.n	8008424 <TIM_Base_SetConfig+0x38>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a31      	ldr	r2, [pc, #196]	; (80084d4 <TIM_Base_SetConfig+0xe8>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d007      	beq.n	8008424 <TIM_Base_SetConfig+0x38>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a30      	ldr	r2, [pc, #192]	; (80084d8 <TIM_Base_SetConfig+0xec>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d003      	beq.n	8008424 <TIM_Base_SetConfig+0x38>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a2f      	ldr	r2, [pc, #188]	; (80084dc <TIM_Base_SetConfig+0xf0>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d108      	bne.n	8008436 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800842a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	4313      	orrs	r3, r2
 8008434:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a25      	ldr	r2, [pc, #148]	; (80084d0 <TIM_Base_SetConfig+0xe4>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d01b      	beq.n	8008476 <TIM_Base_SetConfig+0x8a>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008444:	d017      	beq.n	8008476 <TIM_Base_SetConfig+0x8a>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a22      	ldr	r2, [pc, #136]	; (80084d4 <TIM_Base_SetConfig+0xe8>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d013      	beq.n	8008476 <TIM_Base_SetConfig+0x8a>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a21      	ldr	r2, [pc, #132]	; (80084d8 <TIM_Base_SetConfig+0xec>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d00f      	beq.n	8008476 <TIM_Base_SetConfig+0x8a>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a20      	ldr	r2, [pc, #128]	; (80084dc <TIM_Base_SetConfig+0xf0>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d00b      	beq.n	8008476 <TIM_Base_SetConfig+0x8a>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a1f      	ldr	r2, [pc, #124]	; (80084e0 <TIM_Base_SetConfig+0xf4>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d007      	beq.n	8008476 <TIM_Base_SetConfig+0x8a>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a1e      	ldr	r2, [pc, #120]	; (80084e4 <TIM_Base_SetConfig+0xf8>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d003      	beq.n	8008476 <TIM_Base_SetConfig+0x8a>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a1d      	ldr	r2, [pc, #116]	; (80084e8 <TIM_Base_SetConfig+0xfc>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d108      	bne.n	8008488 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800847c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	4313      	orrs	r3, r2
 8008486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	4313      	orrs	r3, r2
 8008494:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	689a      	ldr	r2, [r3, #8]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a08      	ldr	r2, [pc, #32]	; (80084d0 <TIM_Base_SetConfig+0xe4>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d103      	bne.n	80084bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	691a      	ldr	r2, [r3, #16]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	615a      	str	r2, [r3, #20]
}
 80084c2:	bf00      	nop
 80084c4:	3714      	adds	r7, #20
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop
 80084d0:	40010000 	.word	0x40010000
 80084d4:	40000400 	.word	0x40000400
 80084d8:	40000800 	.word	0x40000800
 80084dc:	40000c00 	.word	0x40000c00
 80084e0:	40014000 	.word	0x40014000
 80084e4:	40014400 	.word	0x40014400
 80084e8:	40014800 	.word	0x40014800

080084ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b087      	sub	sp, #28
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a1b      	ldr	r3, [r3, #32]
 80084fa:	f023 0201 	bic.w	r2, r3, #1
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a1b      	ldr	r3, [r3, #32]
 8008506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	699b      	ldr	r3, [r3, #24]
 8008512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800851a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f023 0303 	bic.w	r3, r3, #3
 8008522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	4313      	orrs	r3, r2
 800852c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	f023 0302 	bic.w	r3, r3, #2
 8008534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	4313      	orrs	r3, r2
 800853e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a1c      	ldr	r2, [pc, #112]	; (80085b4 <TIM_OC1_SetConfig+0xc8>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d10c      	bne.n	8008562 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	f023 0308 	bic.w	r3, r3, #8
 800854e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	697a      	ldr	r2, [r7, #20]
 8008556:	4313      	orrs	r3, r2
 8008558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	f023 0304 	bic.w	r3, r3, #4
 8008560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a13      	ldr	r2, [pc, #76]	; (80085b4 <TIM_OC1_SetConfig+0xc8>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d111      	bne.n	800858e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008570:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008578:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	695b      	ldr	r3, [r3, #20]
 800857e:	693a      	ldr	r2, [r7, #16]
 8008580:	4313      	orrs	r3, r2
 8008582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	699b      	ldr	r3, [r3, #24]
 8008588:	693a      	ldr	r2, [r7, #16]
 800858a:	4313      	orrs	r3, r2
 800858c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	693a      	ldr	r2, [r7, #16]
 8008592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	685a      	ldr	r2, [r3, #4]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	697a      	ldr	r2, [r7, #20]
 80085a6:	621a      	str	r2, [r3, #32]
}
 80085a8:	bf00      	nop
 80085aa:	371c      	adds	r7, #28
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr
 80085b4:	40010000 	.word	0x40010000

080085b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b087      	sub	sp, #28
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a1b      	ldr	r3, [r3, #32]
 80085c6:	f023 0210 	bic.w	r2, r3, #16
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	021b      	lsls	r3, r3, #8
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	f023 0320 	bic.w	r3, r3, #32
 8008602:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	011b      	lsls	r3, r3, #4
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	4313      	orrs	r3, r2
 800860e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a1e      	ldr	r2, [pc, #120]	; (800868c <TIM_OC2_SetConfig+0xd4>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d10d      	bne.n	8008634 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800861e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	011b      	lsls	r3, r3, #4
 8008626:	697a      	ldr	r2, [r7, #20]
 8008628:	4313      	orrs	r3, r2
 800862a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008632:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	4a15      	ldr	r2, [pc, #84]	; (800868c <TIM_OC2_SetConfig+0xd4>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d113      	bne.n	8008664 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008642:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800864a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	695b      	ldr	r3, [r3, #20]
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	693a      	ldr	r2, [r7, #16]
 8008654:	4313      	orrs	r3, r2
 8008656:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	699b      	ldr	r3, [r3, #24]
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	693a      	ldr	r2, [r7, #16]
 8008660:	4313      	orrs	r3, r2
 8008662:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	693a      	ldr	r2, [r7, #16]
 8008668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	685a      	ldr	r2, [r3, #4]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	697a      	ldr	r2, [r7, #20]
 800867c:	621a      	str	r2, [r3, #32]
}
 800867e:	bf00      	nop
 8008680:	371c      	adds	r7, #28
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	40010000 	.word	0x40010000

08008690 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008690:	b480      	push	{r7}
 8008692:	b087      	sub	sp, #28
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a1b      	ldr	r3, [r3, #32]
 800869e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a1b      	ldr	r3, [r3, #32]
 80086aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	69db      	ldr	r3, [r3, #28]
 80086b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f023 0303 	bic.w	r3, r3, #3
 80086c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	021b      	lsls	r3, r3, #8
 80086e0:	697a      	ldr	r2, [r7, #20]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4a1d      	ldr	r2, [pc, #116]	; (8008760 <TIM_OC3_SetConfig+0xd0>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d10d      	bne.n	800870a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	021b      	lsls	r3, r3, #8
 80086fc:	697a      	ldr	r2, [r7, #20]
 80086fe:	4313      	orrs	r3, r2
 8008700:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008708:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a14      	ldr	r2, [pc, #80]	; (8008760 <TIM_OC3_SetConfig+0xd0>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d113      	bne.n	800873a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	011b      	lsls	r3, r3, #4
 8008728:	693a      	ldr	r2, [r7, #16]
 800872a:	4313      	orrs	r3, r2
 800872c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	011b      	lsls	r3, r3, #4
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	4313      	orrs	r3, r2
 8008738:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	693a      	ldr	r2, [r7, #16]
 800873e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	685a      	ldr	r2, [r3, #4]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	697a      	ldr	r2, [r7, #20]
 8008752:	621a      	str	r2, [r3, #32]
}
 8008754:	bf00      	nop
 8008756:	371c      	adds	r7, #28
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr
 8008760:	40010000 	.word	0x40010000

08008764 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008764:	b480      	push	{r7}
 8008766:	b087      	sub	sp, #28
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a1b      	ldr	r3, [r3, #32]
 8008772:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a1b      	ldr	r3, [r3, #32]
 800877e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	69db      	ldr	r3, [r3, #28]
 800878a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800879a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	021b      	lsls	r3, r3, #8
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	031b      	lsls	r3, r3, #12
 80087b6:	693a      	ldr	r2, [r7, #16]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a10      	ldr	r2, [pc, #64]	; (8008800 <TIM_OC4_SetConfig+0x9c>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d109      	bne.n	80087d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	695b      	ldr	r3, [r3, #20]
 80087d0:	019b      	lsls	r3, r3, #6
 80087d2:	697a      	ldr	r2, [r7, #20]
 80087d4:	4313      	orrs	r3, r2
 80087d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	697a      	ldr	r2, [r7, #20]
 80087dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	685a      	ldr	r2, [r3, #4]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	693a      	ldr	r2, [r7, #16]
 80087f0:	621a      	str	r2, [r3, #32]
}
 80087f2:	bf00      	nop
 80087f4:	371c      	adds	r7, #28
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop
 8008800:	40010000 	.word	0x40010000

08008804 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008804:	b480      	push	{r7}
 8008806:	b087      	sub	sp, #28
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6a1b      	ldr	r3, [r3, #32]
 8008814:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	f023 0201 	bic.w	r2, r3, #1
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	699b      	ldr	r3, [r3, #24]
 8008826:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800882e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	011b      	lsls	r3, r3, #4
 8008834:	693a      	ldr	r2, [r7, #16]
 8008836:	4313      	orrs	r3, r2
 8008838:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	f023 030a 	bic.w	r3, r3, #10
 8008840:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008842:	697a      	ldr	r2, [r7, #20]
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	4313      	orrs	r3, r2
 8008848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	693a      	ldr	r2, [r7, #16]
 800884e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	697a      	ldr	r2, [r7, #20]
 8008854:	621a      	str	r2, [r3, #32]
}
 8008856:	bf00      	nop
 8008858:	371c      	adds	r7, #28
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008862:	b480      	push	{r7}
 8008864:	b087      	sub	sp, #28
 8008866:	af00      	add	r7, sp, #0
 8008868:	60f8      	str	r0, [r7, #12]
 800886a:	60b9      	str	r1, [r7, #8]
 800886c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	f023 0210 	bic.w	r2, r3, #16
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	699b      	ldr	r3, [r3, #24]
 800887e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6a1b      	ldr	r3, [r3, #32]
 8008884:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800888c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	031b      	lsls	r3, r3, #12
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	4313      	orrs	r3, r2
 8008896:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800889e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	011b      	lsls	r3, r3, #4
 80088a4:	693a      	ldr	r2, [r7, #16]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	697a      	ldr	r2, [r7, #20]
 80088ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	621a      	str	r2, [r3, #32]
}
 80088b6:	bf00      	nop
 80088b8:	371c      	adds	r7, #28
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr

080088c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80088c2:	b480      	push	{r7}
 80088c4:	b085      	sub	sp, #20
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
 80088ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80088da:	683a      	ldr	r2, [r7, #0]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	4313      	orrs	r3, r2
 80088e0:	f043 0307 	orr.w	r3, r3, #7
 80088e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	609a      	str	r2, [r3, #8]
}
 80088ec:	bf00      	nop
 80088ee:	3714      	adds	r7, #20
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b087      	sub	sp, #28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	607a      	str	r2, [r7, #4]
 8008904:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008912:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	021a      	lsls	r2, r3, #8
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	431a      	orrs	r2, r3
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	4313      	orrs	r3, r2
 8008920:	697a      	ldr	r2, [r7, #20]
 8008922:	4313      	orrs	r3, r2
 8008924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	697a      	ldr	r2, [r7, #20]
 800892a:	609a      	str	r2, [r3, #8]
}
 800892c:	bf00      	nop
 800892e:	371c      	adds	r7, #28
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008938:	b480      	push	{r7}
 800893a:	b087      	sub	sp, #28
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	f003 031f 	and.w	r3, r3, #31
 800894a:	2201      	movs	r2, #1
 800894c:	fa02 f303 	lsl.w	r3, r2, r3
 8008950:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6a1a      	ldr	r2, [r3, #32]
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	43db      	mvns	r3, r3
 800895a:	401a      	ands	r2, r3
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6a1a      	ldr	r2, [r3, #32]
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	f003 031f 	and.w	r3, r3, #31
 800896a:	6879      	ldr	r1, [r7, #4]
 800896c:	fa01 f303 	lsl.w	r3, r1, r3
 8008970:	431a      	orrs	r2, r3
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	621a      	str	r2, [r3, #32]
}
 8008976:	bf00      	nop
 8008978:	371c      	adds	r7, #28
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr
	...

08008984 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008994:	2b01      	cmp	r3, #1
 8008996:	d101      	bne.n	800899c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008998:	2302      	movs	r3, #2
 800899a:	e050      	b.n	8008a3e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2202      	movs	r2, #2
 80089a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	68fa      	ldr	r2, [r7, #12]
 80089d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a1c      	ldr	r2, [pc, #112]	; (8008a4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d018      	beq.n	8008a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089e8:	d013      	beq.n	8008a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a18      	ldr	r2, [pc, #96]	; (8008a50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d00e      	beq.n	8008a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a16      	ldr	r2, [pc, #88]	; (8008a54 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d009      	beq.n	8008a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a15      	ldr	r2, [pc, #84]	; (8008a58 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d004      	beq.n	8008a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a13      	ldr	r2, [pc, #76]	; (8008a5c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d10c      	bne.n	8008a2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	68ba      	ldr	r2, [r7, #8]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68ba      	ldr	r2, [r7, #8]
 8008a2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3714      	adds	r7, #20
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop
 8008a4c:	40010000 	.word	0x40010000
 8008a50:	40000400 	.word	0x40000400
 8008a54:	40000800 	.word	0x40000800
 8008a58:	40000c00 	.word	0x40000c00
 8008a5c:	40014000 	.word	0x40014000

08008a60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a68:	bf00      	nop
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a7c:	bf00      	nop
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a88:	b084      	sub	sp, #16
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b084      	sub	sp, #16
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
 8008a92:	f107 001c 	add.w	r0, r7, #28
 8008a96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d122      	bne.n	8008ae6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008ab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d105      	bne.n	8008ada <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f001 fbee 	bl	800a2bc <USB_CoreReset>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	73fb      	strb	r3, [r7, #15]
 8008ae4:	e01a      	b.n	8008b1c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f001 fbe2 	bl	800a2bc <USB_CoreReset>
 8008af8:	4603      	mov	r3, r0
 8008afa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d106      	bne.n	8008b10 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	639a      	str	r2, [r3, #56]	; 0x38
 8008b0e:	e005      	b.n	8008b1c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d10b      	bne.n	8008b3a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	f043 0206 	orr.w	r2, r3, #6
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	f043 0220 	orr.w	r2, r3, #32
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b46:	b004      	add	sp, #16
 8008b48:	4770      	bx	lr
	...

08008b4c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b087      	sub	sp, #28
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	4613      	mov	r3, r2
 8008b58:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008b5a:	79fb      	ldrb	r3, [r7, #7]
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d165      	bne.n	8008c2c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	4a41      	ldr	r2, [pc, #260]	; (8008c68 <USB_SetTurnaroundTime+0x11c>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d906      	bls.n	8008b76 <USB_SetTurnaroundTime+0x2a>
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	4a40      	ldr	r2, [pc, #256]	; (8008c6c <USB_SetTurnaroundTime+0x120>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d202      	bcs.n	8008b76 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008b70:	230f      	movs	r3, #15
 8008b72:	617b      	str	r3, [r7, #20]
 8008b74:	e062      	b.n	8008c3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	4a3c      	ldr	r2, [pc, #240]	; (8008c6c <USB_SetTurnaroundTime+0x120>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d306      	bcc.n	8008b8c <USB_SetTurnaroundTime+0x40>
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	4a3b      	ldr	r2, [pc, #236]	; (8008c70 <USB_SetTurnaroundTime+0x124>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d202      	bcs.n	8008b8c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008b86:	230e      	movs	r3, #14
 8008b88:	617b      	str	r3, [r7, #20]
 8008b8a:	e057      	b.n	8008c3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	4a38      	ldr	r2, [pc, #224]	; (8008c70 <USB_SetTurnaroundTime+0x124>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d306      	bcc.n	8008ba2 <USB_SetTurnaroundTime+0x56>
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	4a37      	ldr	r2, [pc, #220]	; (8008c74 <USB_SetTurnaroundTime+0x128>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d202      	bcs.n	8008ba2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008b9c:	230d      	movs	r3, #13
 8008b9e:	617b      	str	r3, [r7, #20]
 8008ba0:	e04c      	b.n	8008c3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	4a33      	ldr	r2, [pc, #204]	; (8008c74 <USB_SetTurnaroundTime+0x128>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d306      	bcc.n	8008bb8 <USB_SetTurnaroundTime+0x6c>
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	4a32      	ldr	r2, [pc, #200]	; (8008c78 <USB_SetTurnaroundTime+0x12c>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d802      	bhi.n	8008bb8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008bb2:	230c      	movs	r3, #12
 8008bb4:	617b      	str	r3, [r7, #20]
 8008bb6:	e041      	b.n	8008c3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	4a2f      	ldr	r2, [pc, #188]	; (8008c78 <USB_SetTurnaroundTime+0x12c>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d906      	bls.n	8008bce <USB_SetTurnaroundTime+0x82>
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	4a2e      	ldr	r2, [pc, #184]	; (8008c7c <USB_SetTurnaroundTime+0x130>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d802      	bhi.n	8008bce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008bc8:	230b      	movs	r3, #11
 8008bca:	617b      	str	r3, [r7, #20]
 8008bcc:	e036      	b.n	8008c3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	4a2a      	ldr	r2, [pc, #168]	; (8008c7c <USB_SetTurnaroundTime+0x130>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d906      	bls.n	8008be4 <USB_SetTurnaroundTime+0x98>
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	4a29      	ldr	r2, [pc, #164]	; (8008c80 <USB_SetTurnaroundTime+0x134>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d802      	bhi.n	8008be4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008bde:	230a      	movs	r3, #10
 8008be0:	617b      	str	r3, [r7, #20]
 8008be2:	e02b      	b.n	8008c3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	4a26      	ldr	r2, [pc, #152]	; (8008c80 <USB_SetTurnaroundTime+0x134>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d906      	bls.n	8008bfa <USB_SetTurnaroundTime+0xae>
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	4a25      	ldr	r2, [pc, #148]	; (8008c84 <USB_SetTurnaroundTime+0x138>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d202      	bcs.n	8008bfa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008bf4:	2309      	movs	r3, #9
 8008bf6:	617b      	str	r3, [r7, #20]
 8008bf8:	e020      	b.n	8008c3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	4a21      	ldr	r2, [pc, #132]	; (8008c84 <USB_SetTurnaroundTime+0x138>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d306      	bcc.n	8008c10 <USB_SetTurnaroundTime+0xc4>
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	4a20      	ldr	r2, [pc, #128]	; (8008c88 <USB_SetTurnaroundTime+0x13c>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d802      	bhi.n	8008c10 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008c0a:	2308      	movs	r3, #8
 8008c0c:	617b      	str	r3, [r7, #20]
 8008c0e:	e015      	b.n	8008c3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	4a1d      	ldr	r2, [pc, #116]	; (8008c88 <USB_SetTurnaroundTime+0x13c>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d906      	bls.n	8008c26 <USB_SetTurnaroundTime+0xda>
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	4a1c      	ldr	r2, [pc, #112]	; (8008c8c <USB_SetTurnaroundTime+0x140>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d202      	bcs.n	8008c26 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008c20:	2307      	movs	r3, #7
 8008c22:	617b      	str	r3, [r7, #20]
 8008c24:	e00a      	b.n	8008c3c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008c26:	2306      	movs	r3, #6
 8008c28:	617b      	str	r3, [r7, #20]
 8008c2a:	e007      	b.n	8008c3c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008c2c:	79fb      	ldrb	r3, [r7, #7]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d102      	bne.n	8008c38 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008c32:	2309      	movs	r3, #9
 8008c34:	617b      	str	r3, [r7, #20]
 8008c36:	e001      	b.n	8008c3c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008c38:	2309      	movs	r3, #9
 8008c3a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	68da      	ldr	r2, [r3, #12]
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	029b      	lsls	r3, r3, #10
 8008c50:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008c54:	431a      	orrs	r2, r3
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	371c      	adds	r7, #28
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr
 8008c68:	00d8acbf 	.word	0x00d8acbf
 8008c6c:	00e4e1c0 	.word	0x00e4e1c0
 8008c70:	00f42400 	.word	0x00f42400
 8008c74:	01067380 	.word	0x01067380
 8008c78:	011a499f 	.word	0x011a499f
 8008c7c:	01312cff 	.word	0x01312cff
 8008c80:	014ca43f 	.word	0x014ca43f
 8008c84:	016e3600 	.word	0x016e3600
 8008c88:	01a6ab1f 	.word	0x01a6ab1f
 8008c8c:	01e84800 	.word	0x01e84800

08008c90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	f043 0201 	orr.w	r2, r3, #1
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	370c      	adds	r7, #12
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr

08008cb2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008cb2:	b480      	push	{r7}
 8008cb4:	b083      	sub	sp, #12
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	f023 0201 	bic.w	r2, r3, #1
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	460b      	mov	r3, r1
 8008cde:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008cf0:	78fb      	ldrb	r3, [r7, #3]
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d115      	bne.n	8008d22 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008d02:	2001      	movs	r0, #1
 8008d04:	f7fb f820 	bl	8003d48 <HAL_Delay>
      ms++;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f001 fa45 	bl	800a19e <USB_GetMode>
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d01e      	beq.n	8008d58 <USB_SetCurrentMode+0x84>
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2b31      	cmp	r3, #49	; 0x31
 8008d1e:	d9f0      	bls.n	8008d02 <USB_SetCurrentMode+0x2e>
 8008d20:	e01a      	b.n	8008d58 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008d22:	78fb      	ldrb	r3, [r7, #3]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d115      	bne.n	8008d54 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008d34:	2001      	movs	r0, #1
 8008d36:	f7fb f807 	bl	8003d48 <HAL_Delay>
      ms++;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f001 fa2c 	bl	800a19e <USB_GetMode>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d005      	beq.n	8008d58 <USB_SetCurrentMode+0x84>
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2b31      	cmp	r3, #49	; 0x31
 8008d50:	d9f0      	bls.n	8008d34 <USB_SetCurrentMode+0x60>
 8008d52:	e001      	b.n	8008d58 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008d54:	2301      	movs	r3, #1
 8008d56:	e005      	b.n	8008d64 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2b32      	cmp	r3, #50	; 0x32
 8008d5c:	d101      	bne.n	8008d62 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e000      	b.n	8008d64 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d6c:	b084      	sub	sp, #16
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b086      	sub	sp, #24
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008d7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008d86:	2300      	movs	r3, #0
 8008d88:	613b      	str	r3, [r7, #16]
 8008d8a:	e009      	b.n	8008da0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	3340      	adds	r3, #64	; 0x40
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4413      	add	r3, r2
 8008d96:	2200      	movs	r2, #0
 8008d98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	613b      	str	r3, [r7, #16]
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	2b0e      	cmp	r3, #14
 8008da4:	d9f2      	bls.n	8008d8c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d11c      	bne.n	8008de6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	68fa      	ldr	r2, [r7, #12]
 8008db6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dba:	f043 0302 	orr.w	r3, r3, #2
 8008dbe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ddc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	639a      	str	r2, [r3, #56]	; 0x38
 8008de4:	e00b      	b.n	8008dfe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e04:	461a      	mov	r2, r3
 8008e06:	2300      	movs	r3, #0
 8008e08:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e10:	4619      	mov	r1, r3
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e18:	461a      	mov	r2, r3
 8008e1a:	680b      	ldr	r3, [r1, #0]
 8008e1c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d10c      	bne.n	8008e3e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d104      	bne.n	8008e34 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008e2a:	2100      	movs	r1, #0
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 f965 	bl	80090fc <USB_SetDevSpeed>
 8008e32:	e008      	b.n	8008e46 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008e34:	2101      	movs	r1, #1
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 f960 	bl	80090fc <USB_SetDevSpeed>
 8008e3c:	e003      	b.n	8008e46 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008e3e:	2103      	movs	r1, #3
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 f95b 	bl	80090fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008e46:	2110      	movs	r1, #16
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 f8f3 	bl	8009034 <USB_FlushTxFifo>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d001      	beq.n	8008e58 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 f91f 	bl	800909c <USB_FlushRxFifo>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d001      	beq.n	8008e68 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008e64:	2301      	movs	r3, #1
 8008e66:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e6e:	461a      	mov	r2, r3
 8008e70:	2300      	movs	r3, #0
 8008e72:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e86:	461a      	mov	r2, r3
 8008e88:	2300      	movs	r3, #0
 8008e8a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	613b      	str	r3, [r7, #16]
 8008e90:	e043      	b.n	8008f1a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	015a      	lsls	r2, r3, #5
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	4413      	add	r3, r2
 8008e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ea4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ea8:	d118      	bne.n	8008edc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10a      	bne.n	8008ec6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	015a      	lsls	r2, r3, #5
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ec2:	6013      	str	r3, [r2, #0]
 8008ec4:	e013      	b.n	8008eee <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	015a      	lsls	r2, r3, #5
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	4413      	add	r3, r2
 8008ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008ed8:	6013      	str	r3, [r2, #0]
 8008eda:	e008      	b.n	8008eee <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	015a      	lsls	r2, r3, #5
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee8:	461a      	mov	r2, r3
 8008eea:	2300      	movs	r3, #0
 8008eec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	015a      	lsls	r2, r3, #5
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008efa:	461a      	mov	r2, r3
 8008efc:	2300      	movs	r3, #0
 8008efe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	015a      	lsls	r2, r3, #5
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	4413      	add	r3, r2
 8008f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	3301      	adds	r3, #1
 8008f18:	613b      	str	r3, [r7, #16]
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1c:	693a      	ldr	r2, [r7, #16]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d3b7      	bcc.n	8008e92 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f22:	2300      	movs	r3, #0
 8008f24:	613b      	str	r3, [r7, #16]
 8008f26:	e043      	b.n	8008fb0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	015a      	lsls	r2, r3, #5
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	4413      	add	r3, r2
 8008f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f3e:	d118      	bne.n	8008f72 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d10a      	bne.n	8008f5c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	015a      	lsls	r2, r3, #5
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f52:	461a      	mov	r2, r3
 8008f54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008f58:	6013      	str	r3, [r2, #0]
 8008f5a:	e013      	b.n	8008f84 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	015a      	lsls	r2, r3, #5
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	4413      	add	r3, r2
 8008f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f68:	461a      	mov	r2, r3
 8008f6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008f6e:	6013      	str	r3, [r2, #0]
 8008f70:	e008      	b.n	8008f84 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	015a      	lsls	r2, r3, #5
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	4413      	add	r3, r2
 8008f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f7e:	461a      	mov	r2, r3
 8008f80:	2300      	movs	r3, #0
 8008f82:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	015a      	lsls	r2, r3, #5
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f90:	461a      	mov	r2, r3
 8008f92:	2300      	movs	r3, #0
 8008f94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	015a      	lsls	r2, r3, #5
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008fa8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	3301      	adds	r3, #1
 8008fae:	613b      	str	r3, [r7, #16]
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb2:	693a      	ldr	r2, [r7, #16]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d3b7      	bcc.n	8008f28 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fbe:	691b      	ldr	r3, [r3, #16]
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008fd8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d105      	bne.n	8008fec <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	699b      	ldr	r3, [r3, #24]
 8008fe4:	f043 0210 	orr.w	r2, r3, #16
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	699a      	ldr	r2, [r3, #24]
 8008ff0:	4b0f      	ldr	r3, [pc, #60]	; (8009030 <USB_DevInit+0x2c4>)
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d005      	beq.n	800900a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	f043 0208 	orr.w	r2, r3, #8
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800900a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800900c:	2b01      	cmp	r3, #1
 800900e:	d107      	bne.n	8009020 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	699b      	ldr	r3, [r3, #24]
 8009014:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009018:	f043 0304 	orr.w	r3, r3, #4
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009020:	7dfb      	ldrb	r3, [r7, #23]
}
 8009022:	4618      	mov	r0, r3
 8009024:	3718      	adds	r7, #24
 8009026:	46bd      	mov	sp, r7
 8009028:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800902c:	b004      	add	sp, #16
 800902e:	4770      	bx	lr
 8009030:	803c3800 	.word	0x803c3800

08009034 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009034:	b480      	push	{r7}
 8009036:	b085      	sub	sp, #20
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800903e:	2300      	movs	r3, #0
 8009040:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	3301      	adds	r3, #1
 8009046:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	4a13      	ldr	r2, [pc, #76]	; (8009098 <USB_FlushTxFifo+0x64>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d901      	bls.n	8009054 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009050:	2303      	movs	r3, #3
 8009052:	e01b      	b.n	800908c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	691b      	ldr	r3, [r3, #16]
 8009058:	2b00      	cmp	r3, #0
 800905a:	daf2      	bge.n	8009042 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800905c:	2300      	movs	r3, #0
 800905e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	019b      	lsls	r3, r3, #6
 8009064:	f043 0220 	orr.w	r2, r3, #32
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	3301      	adds	r3, #1
 8009070:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	4a08      	ldr	r2, [pc, #32]	; (8009098 <USB_FlushTxFifo+0x64>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d901      	bls.n	800907e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800907a:	2303      	movs	r3, #3
 800907c:	e006      	b.n	800908c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	691b      	ldr	r3, [r3, #16]
 8009082:	f003 0320 	and.w	r3, r3, #32
 8009086:	2b20      	cmp	r3, #32
 8009088:	d0f0      	beq.n	800906c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	3714      	adds	r7, #20
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr
 8009098:	00030d40 	.word	0x00030d40

0800909c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80090a4:	2300      	movs	r3, #0
 80090a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	3301      	adds	r3, #1
 80090ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	4a11      	ldr	r2, [pc, #68]	; (80090f8 <USB_FlushRxFifo+0x5c>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d901      	bls.n	80090ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80090b6:	2303      	movs	r3, #3
 80090b8:	e018      	b.n	80090ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	daf2      	bge.n	80090a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80090c2:	2300      	movs	r3, #0
 80090c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2210      	movs	r2, #16
 80090ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	3301      	adds	r3, #1
 80090d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	4a08      	ldr	r2, [pc, #32]	; (80090f8 <USB_FlushRxFifo+0x5c>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d901      	bls.n	80090de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80090da:	2303      	movs	r3, #3
 80090dc:	e006      	b.n	80090ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	691b      	ldr	r3, [r3, #16]
 80090e2:	f003 0310 	and.w	r3, r3, #16
 80090e6:	2b10      	cmp	r3, #16
 80090e8:	d0f0      	beq.n	80090cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80090ea:	2300      	movs	r3, #0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3714      	adds	r7, #20
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr
 80090f8:	00030d40 	.word	0x00030d40

080090fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	460b      	mov	r3, r1
 8009106:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	78fb      	ldrb	r3, [r7, #3]
 8009116:	68f9      	ldr	r1, [r7, #12]
 8009118:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800911c:	4313      	orrs	r3, r2
 800911e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009120:	2300      	movs	r3, #0
}
 8009122:	4618      	mov	r0, r3
 8009124:	3714      	adds	r7, #20
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr

0800912e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800912e:	b480      	push	{r7}
 8009130:	b087      	sub	sp, #28
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	f003 0306 	and.w	r3, r3, #6
 8009146:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d102      	bne.n	8009154 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800914e:	2300      	movs	r3, #0
 8009150:	75fb      	strb	r3, [r7, #23]
 8009152:	e00a      	b.n	800916a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2b02      	cmp	r3, #2
 8009158:	d002      	beq.n	8009160 <USB_GetDevSpeed+0x32>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2b06      	cmp	r3, #6
 800915e:	d102      	bne.n	8009166 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009160:	2302      	movs	r3, #2
 8009162:	75fb      	strb	r3, [r7, #23]
 8009164:	e001      	b.n	800916a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009166:	230f      	movs	r3, #15
 8009168:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800916a:	7dfb      	ldrb	r3, [r7, #23]
}
 800916c:	4618      	mov	r0, r3
 800916e:	371c      	adds	r7, #28
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	785b      	ldrb	r3, [r3, #1]
 8009190:	2b01      	cmp	r3, #1
 8009192:	d13a      	bne.n	800920a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800919a:	69da      	ldr	r2, [r3, #28]
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	f003 030f 	and.w	r3, r3, #15
 80091a4:	2101      	movs	r1, #1
 80091a6:	fa01 f303 	lsl.w	r3, r1, r3
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	68f9      	ldr	r1, [r7, #12]
 80091ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091b2:	4313      	orrs	r3, r2
 80091b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	015a      	lsls	r2, r3, #5
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	4413      	add	r3, r2
 80091be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d155      	bne.n	8009278 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	015a      	lsls	r2, r3, #5
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	4413      	add	r3, r2
 80091d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	791b      	ldrb	r3, [r3, #4]
 80091e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80091e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	059b      	lsls	r3, r3, #22
 80091ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80091f0:	4313      	orrs	r3, r2
 80091f2:	68ba      	ldr	r2, [r7, #8]
 80091f4:	0151      	lsls	r1, r2, #5
 80091f6:	68fa      	ldr	r2, [r7, #12]
 80091f8:	440a      	add	r2, r1
 80091fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009206:	6013      	str	r3, [r2, #0]
 8009208:	e036      	b.n	8009278 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009210:	69da      	ldr	r2, [r3, #28]
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	f003 030f 	and.w	r3, r3, #15
 800921a:	2101      	movs	r1, #1
 800921c:	fa01 f303 	lsl.w	r3, r1, r3
 8009220:	041b      	lsls	r3, r3, #16
 8009222:	68f9      	ldr	r1, [r7, #12]
 8009224:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009228:	4313      	orrs	r3, r2
 800922a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	015a      	lsls	r2, r3, #5
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	4413      	add	r3, r2
 8009234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800923e:	2b00      	cmp	r3, #0
 8009240:	d11a      	bne.n	8009278 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	015a      	lsls	r2, r3, #5
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	4413      	add	r3, r2
 800924a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	791b      	ldrb	r3, [r3, #4]
 800925c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800925e:	430b      	orrs	r3, r1
 8009260:	4313      	orrs	r3, r2
 8009262:	68ba      	ldr	r2, [r7, #8]
 8009264:	0151      	lsls	r1, r2, #5
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	440a      	add	r2, r1
 800926a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800926e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009276:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3714      	adds	r7, #20
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr
	...

08009288 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	785b      	ldrb	r3, [r3, #1]
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d161      	bne.n	8009368 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	015a      	lsls	r2, r3, #5
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	4413      	add	r3, r2
 80092ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092ba:	d11f      	bne.n	80092fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	015a      	lsls	r2, r3, #5
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	4413      	add	r3, r2
 80092c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	68ba      	ldr	r2, [r7, #8]
 80092cc:	0151      	lsls	r1, r2, #5
 80092ce:	68fa      	ldr	r2, [r7, #12]
 80092d0:	440a      	add	r2, r1
 80092d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80092da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	015a      	lsls	r2, r3, #5
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	4413      	add	r3, r2
 80092e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	68ba      	ldr	r2, [r7, #8]
 80092ec:	0151      	lsls	r1, r2, #5
 80092ee:	68fa      	ldr	r2, [r7, #12]
 80092f0:	440a      	add	r2, r1
 80092f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009302:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	f003 030f 	and.w	r3, r3, #15
 800930c:	2101      	movs	r1, #1
 800930e:	fa01 f303 	lsl.w	r3, r1, r3
 8009312:	b29b      	uxth	r3, r3
 8009314:	43db      	mvns	r3, r3
 8009316:	68f9      	ldr	r1, [r7, #12]
 8009318:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800931c:	4013      	ands	r3, r2
 800931e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009326:	69da      	ldr	r2, [r3, #28]
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	f003 030f 	and.w	r3, r3, #15
 8009330:	2101      	movs	r1, #1
 8009332:	fa01 f303 	lsl.w	r3, r1, r3
 8009336:	b29b      	uxth	r3, r3
 8009338:	43db      	mvns	r3, r3
 800933a:	68f9      	ldr	r1, [r7, #12]
 800933c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009340:	4013      	ands	r3, r2
 8009342:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	015a      	lsls	r2, r3, #5
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	4413      	add	r3, r2
 800934c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	0159      	lsls	r1, r3, #5
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	440b      	add	r3, r1
 800935a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800935e:	4619      	mov	r1, r3
 8009360:	4b35      	ldr	r3, [pc, #212]	; (8009438 <USB_DeactivateEndpoint+0x1b0>)
 8009362:	4013      	ands	r3, r2
 8009364:	600b      	str	r3, [r1, #0]
 8009366:	e060      	b.n	800942a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	015a      	lsls	r2, r3, #5
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	4413      	add	r3, r2
 8009370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800937a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800937e:	d11f      	bne.n	80093c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	015a      	lsls	r2, r3, #5
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	4413      	add	r3, r2
 8009388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	0151      	lsls	r1, r2, #5
 8009392:	68fa      	ldr	r2, [r7, #12]
 8009394:	440a      	add	r2, r1
 8009396:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800939a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800939e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	015a      	lsls	r2, r3, #5
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	4413      	add	r3, r2
 80093a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	68ba      	ldr	r2, [r7, #8]
 80093b0:	0151      	lsls	r1, r2, #5
 80093b2:	68fa      	ldr	r2, [r7, #12]
 80093b4:	440a      	add	r2, r1
 80093b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80093be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	f003 030f 	and.w	r3, r3, #15
 80093d0:	2101      	movs	r1, #1
 80093d2:	fa01 f303 	lsl.w	r3, r1, r3
 80093d6:	041b      	lsls	r3, r3, #16
 80093d8:	43db      	mvns	r3, r3
 80093da:	68f9      	ldr	r1, [r7, #12]
 80093dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093e0:	4013      	ands	r3, r2
 80093e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093ea:	69da      	ldr	r2, [r3, #28]
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	f003 030f 	and.w	r3, r3, #15
 80093f4:	2101      	movs	r1, #1
 80093f6:	fa01 f303 	lsl.w	r3, r1, r3
 80093fa:	041b      	lsls	r3, r3, #16
 80093fc:	43db      	mvns	r3, r3
 80093fe:	68f9      	ldr	r1, [r7, #12]
 8009400:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009404:	4013      	ands	r3, r2
 8009406:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	015a      	lsls	r2, r3, #5
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	4413      	add	r3, r2
 8009410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	0159      	lsls	r1, r3, #5
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	440b      	add	r3, r1
 800941e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009422:	4619      	mov	r1, r3
 8009424:	4b05      	ldr	r3, [pc, #20]	; (800943c <USB_DeactivateEndpoint+0x1b4>)
 8009426:	4013      	ands	r3, r2
 8009428:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800942a:	2300      	movs	r3, #0
}
 800942c:	4618      	mov	r0, r3
 800942e:	3714      	adds	r7, #20
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr
 8009438:	ec337800 	.word	0xec337800
 800943c:	eff37800 	.word	0xeff37800

08009440 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b08a      	sub	sp, #40	; 0x28
 8009444:	af02      	add	r7, sp, #8
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	60b9      	str	r1, [r7, #8]
 800944a:	4613      	mov	r3, r2
 800944c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	785b      	ldrb	r3, [r3, #1]
 800945c:	2b01      	cmp	r3, #1
 800945e:	f040 815c 	bne.w	800971a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	699b      	ldr	r3, [r3, #24]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d132      	bne.n	80094d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	015a      	lsls	r2, r3, #5
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	4413      	add	r3, r2
 8009472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009476:	691b      	ldr	r3, [r3, #16]
 8009478:	69ba      	ldr	r2, [r7, #24]
 800947a:	0151      	lsls	r1, r2, #5
 800947c:	69fa      	ldr	r2, [r7, #28]
 800947e:	440a      	add	r2, r1
 8009480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009484:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009488:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800948c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	015a      	lsls	r2, r3, #5
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	4413      	add	r3, r2
 8009496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800949a:	691b      	ldr	r3, [r3, #16]
 800949c:	69ba      	ldr	r2, [r7, #24]
 800949e:	0151      	lsls	r1, r2, #5
 80094a0:	69fa      	ldr	r2, [r7, #28]
 80094a2:	440a      	add	r2, r1
 80094a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80094ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	015a      	lsls	r2, r3, #5
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	4413      	add	r3, r2
 80094b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ba:	691b      	ldr	r3, [r3, #16]
 80094bc:	69ba      	ldr	r2, [r7, #24]
 80094be:	0151      	lsls	r1, r2, #5
 80094c0:	69fa      	ldr	r2, [r7, #28]
 80094c2:	440a      	add	r2, r1
 80094c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094c8:	0cdb      	lsrs	r3, r3, #19
 80094ca:	04db      	lsls	r3, r3, #19
 80094cc:	6113      	str	r3, [r2, #16]
 80094ce:	e074      	b.n	80095ba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80094d0:	69bb      	ldr	r3, [r7, #24]
 80094d2:	015a      	lsls	r2, r3, #5
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	4413      	add	r3, r2
 80094d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094dc:	691b      	ldr	r3, [r3, #16]
 80094de:	69ba      	ldr	r2, [r7, #24]
 80094e0:	0151      	lsls	r1, r2, #5
 80094e2:	69fa      	ldr	r2, [r7, #28]
 80094e4:	440a      	add	r2, r1
 80094e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094ea:	0cdb      	lsrs	r3, r3, #19
 80094ec:	04db      	lsls	r3, r3, #19
 80094ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	015a      	lsls	r2, r3, #5
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	4413      	add	r3, r2
 80094f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	69ba      	ldr	r2, [r7, #24]
 8009500:	0151      	lsls	r1, r2, #5
 8009502:	69fa      	ldr	r2, [r7, #28]
 8009504:	440a      	add	r2, r1
 8009506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800950a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800950e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009512:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	015a      	lsls	r2, r3, #5
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	4413      	add	r3, r2
 800951c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009520:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	6999      	ldr	r1, [r3, #24]
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	440b      	add	r3, r1
 800952c:	1e59      	subs	r1, r3, #1
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	fbb1 f3f3 	udiv	r3, r1, r3
 8009536:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009538:	4b9d      	ldr	r3, [pc, #628]	; (80097b0 <USB_EPStartXfer+0x370>)
 800953a:	400b      	ands	r3, r1
 800953c:	69b9      	ldr	r1, [r7, #24]
 800953e:	0148      	lsls	r0, r1, #5
 8009540:	69f9      	ldr	r1, [r7, #28]
 8009542:	4401      	add	r1, r0
 8009544:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009548:	4313      	orrs	r3, r2
 800954a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	015a      	lsls	r2, r3, #5
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	4413      	add	r3, r2
 8009554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009558:	691a      	ldr	r2, [r3, #16]
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	699b      	ldr	r3, [r3, #24]
 800955e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009562:	69b9      	ldr	r1, [r7, #24]
 8009564:	0148      	lsls	r0, r1, #5
 8009566:	69f9      	ldr	r1, [r7, #28]
 8009568:	4401      	add	r1, r0
 800956a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800956e:	4313      	orrs	r3, r2
 8009570:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	791b      	ldrb	r3, [r3, #4]
 8009576:	2b01      	cmp	r3, #1
 8009578:	d11f      	bne.n	80095ba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	015a      	lsls	r2, r3, #5
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	4413      	add	r3, r2
 8009582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	69ba      	ldr	r2, [r7, #24]
 800958a:	0151      	lsls	r1, r2, #5
 800958c:	69fa      	ldr	r2, [r7, #28]
 800958e:	440a      	add	r2, r1
 8009590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009594:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009598:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	015a      	lsls	r2, r3, #5
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	4413      	add	r3, r2
 80095a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	69ba      	ldr	r2, [r7, #24]
 80095aa:	0151      	lsls	r1, r2, #5
 80095ac:	69fa      	ldr	r2, [r7, #28]
 80095ae:	440a      	add	r2, r1
 80095b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80095b8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80095ba:	79fb      	ldrb	r3, [r7, #7]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d14b      	bne.n	8009658 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	695b      	ldr	r3, [r3, #20]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d009      	beq.n	80095dc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80095c8:	69bb      	ldr	r3, [r7, #24]
 80095ca:	015a      	lsls	r2, r3, #5
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	4413      	add	r3, r2
 80095d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095d4:	461a      	mov	r2, r3
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	695b      	ldr	r3, [r3, #20]
 80095da:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	791b      	ldrb	r3, [r3, #4]
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d128      	bne.n	8009636 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d110      	bne.n	8009616 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80095f4:	69bb      	ldr	r3, [r7, #24]
 80095f6:	015a      	lsls	r2, r3, #5
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	4413      	add	r3, r2
 80095fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	69ba      	ldr	r2, [r7, #24]
 8009604:	0151      	lsls	r1, r2, #5
 8009606:	69fa      	ldr	r2, [r7, #28]
 8009608:	440a      	add	r2, r1
 800960a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800960e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009612:	6013      	str	r3, [r2, #0]
 8009614:	e00f      	b.n	8009636 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	015a      	lsls	r2, r3, #5
 800961a:	69fb      	ldr	r3, [r7, #28]
 800961c:	4413      	add	r3, r2
 800961e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	69ba      	ldr	r2, [r7, #24]
 8009626:	0151      	lsls	r1, r2, #5
 8009628:	69fa      	ldr	r2, [r7, #28]
 800962a:	440a      	add	r2, r1
 800962c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009634:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	015a      	lsls	r2, r3, #5
 800963a:	69fb      	ldr	r3, [r7, #28]
 800963c:	4413      	add	r3, r2
 800963e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	69ba      	ldr	r2, [r7, #24]
 8009646:	0151      	lsls	r1, r2, #5
 8009648:	69fa      	ldr	r2, [r7, #28]
 800964a:	440a      	add	r2, r1
 800964c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009650:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009654:	6013      	str	r3, [r2, #0]
 8009656:	e133      	b.n	80098c0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009658:	69bb      	ldr	r3, [r7, #24]
 800965a:	015a      	lsls	r2, r3, #5
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	4413      	add	r3, r2
 8009660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	69ba      	ldr	r2, [r7, #24]
 8009668:	0151      	lsls	r1, r2, #5
 800966a:	69fa      	ldr	r2, [r7, #28]
 800966c:	440a      	add	r2, r1
 800966e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009672:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009676:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	791b      	ldrb	r3, [r3, #4]
 800967c:	2b01      	cmp	r3, #1
 800967e:	d015      	beq.n	80096ac <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	699b      	ldr	r3, [r3, #24]
 8009684:	2b00      	cmp	r3, #0
 8009686:	f000 811b 	beq.w	80098c0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	f003 030f 	and.w	r3, r3, #15
 800969a:	2101      	movs	r1, #1
 800969c:	fa01 f303 	lsl.w	r3, r1, r3
 80096a0:	69f9      	ldr	r1, [r7, #28]
 80096a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096a6:	4313      	orrs	r3, r2
 80096a8:	634b      	str	r3, [r1, #52]	; 0x34
 80096aa:	e109      	b.n	80098c0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80096ac:	69fb      	ldr	r3, [r7, #28]
 80096ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d110      	bne.n	80096de <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	015a      	lsls	r2, r3, #5
 80096c0:	69fb      	ldr	r3, [r7, #28]
 80096c2:	4413      	add	r3, r2
 80096c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	69ba      	ldr	r2, [r7, #24]
 80096cc:	0151      	lsls	r1, r2, #5
 80096ce:	69fa      	ldr	r2, [r7, #28]
 80096d0:	440a      	add	r2, r1
 80096d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80096da:	6013      	str	r3, [r2, #0]
 80096dc:	e00f      	b.n	80096fe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	015a      	lsls	r2, r3, #5
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	4413      	add	r3, r2
 80096e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	69ba      	ldr	r2, [r7, #24]
 80096ee:	0151      	lsls	r1, r2, #5
 80096f0:	69fa      	ldr	r2, [r7, #28]
 80096f2:	440a      	add	r2, r1
 80096f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096fc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	6919      	ldr	r1, [r3, #16]
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	781a      	ldrb	r2, [r3, #0]
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	699b      	ldr	r3, [r3, #24]
 800970a:	b298      	uxth	r0, r3
 800970c:	79fb      	ldrb	r3, [r7, #7]
 800970e:	9300      	str	r3, [sp, #0]
 8009710:	4603      	mov	r3, r0
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f000 fade 	bl	8009cd4 <USB_WritePacket>
 8009718:	e0d2      	b.n	80098c0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	015a      	lsls	r2, r3, #5
 800971e:	69fb      	ldr	r3, [r7, #28]
 8009720:	4413      	add	r3, r2
 8009722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	69ba      	ldr	r2, [r7, #24]
 800972a:	0151      	lsls	r1, r2, #5
 800972c:	69fa      	ldr	r2, [r7, #28]
 800972e:	440a      	add	r2, r1
 8009730:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009734:	0cdb      	lsrs	r3, r3, #19
 8009736:	04db      	lsls	r3, r3, #19
 8009738:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	015a      	lsls	r2, r3, #5
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	4413      	add	r3, r2
 8009742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009746:	691b      	ldr	r3, [r3, #16]
 8009748:	69ba      	ldr	r2, [r7, #24]
 800974a:	0151      	lsls	r1, r2, #5
 800974c:	69fa      	ldr	r2, [r7, #28]
 800974e:	440a      	add	r2, r1
 8009750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009754:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009758:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800975c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	699b      	ldr	r3, [r3, #24]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d126      	bne.n	80097b4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	015a      	lsls	r2, r3, #5
 800976a:	69fb      	ldr	r3, [r7, #28]
 800976c:	4413      	add	r3, r2
 800976e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009772:	691a      	ldr	r2, [r3, #16]
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800977c:	69b9      	ldr	r1, [r7, #24]
 800977e:	0148      	lsls	r0, r1, #5
 8009780:	69f9      	ldr	r1, [r7, #28]
 8009782:	4401      	add	r1, r0
 8009784:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009788:	4313      	orrs	r3, r2
 800978a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	015a      	lsls	r2, r3, #5
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	4413      	add	r3, r2
 8009794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	69ba      	ldr	r2, [r7, #24]
 800979c:	0151      	lsls	r1, r2, #5
 800979e:	69fa      	ldr	r2, [r7, #28]
 80097a0:	440a      	add	r2, r1
 80097a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80097aa:	6113      	str	r3, [r2, #16]
 80097ac:	e03a      	b.n	8009824 <USB_EPStartXfer+0x3e4>
 80097ae:	bf00      	nop
 80097b0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	699a      	ldr	r2, [r3, #24]
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	4413      	add	r3, r2
 80097be:	1e5a      	subs	r2, r3, #1
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80097c8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	8afa      	ldrh	r2, [r7, #22]
 80097d0:	fb03 f202 	mul.w	r2, r3, r2
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80097d8:	69bb      	ldr	r3, [r7, #24]
 80097da:	015a      	lsls	r2, r3, #5
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	4413      	add	r3, r2
 80097e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097e4:	691a      	ldr	r2, [r3, #16]
 80097e6:	8afb      	ldrh	r3, [r7, #22]
 80097e8:	04d9      	lsls	r1, r3, #19
 80097ea:	4b38      	ldr	r3, [pc, #224]	; (80098cc <USB_EPStartXfer+0x48c>)
 80097ec:	400b      	ands	r3, r1
 80097ee:	69b9      	ldr	r1, [r7, #24]
 80097f0:	0148      	lsls	r0, r1, #5
 80097f2:	69f9      	ldr	r1, [r7, #28]
 80097f4:	4401      	add	r1, r0
 80097f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80097fa:	4313      	orrs	r3, r2
 80097fc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	015a      	lsls	r2, r3, #5
 8009802:	69fb      	ldr	r3, [r7, #28]
 8009804:	4413      	add	r3, r2
 8009806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800980a:	691a      	ldr	r2, [r3, #16]
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	69db      	ldr	r3, [r3, #28]
 8009810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009814:	69b9      	ldr	r1, [r7, #24]
 8009816:	0148      	lsls	r0, r1, #5
 8009818:	69f9      	ldr	r1, [r7, #28]
 800981a:	4401      	add	r1, r0
 800981c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009820:	4313      	orrs	r3, r2
 8009822:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009824:	79fb      	ldrb	r3, [r7, #7]
 8009826:	2b01      	cmp	r3, #1
 8009828:	d10d      	bne.n	8009846 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	691b      	ldr	r3, [r3, #16]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d009      	beq.n	8009846 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	6919      	ldr	r1, [r3, #16]
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	015a      	lsls	r2, r3, #5
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	4413      	add	r3, r2
 800983e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009842:	460a      	mov	r2, r1
 8009844:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	791b      	ldrb	r3, [r3, #4]
 800984a:	2b01      	cmp	r3, #1
 800984c:	d128      	bne.n	80098a0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800984e:	69fb      	ldr	r3, [r7, #28]
 8009850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800985a:	2b00      	cmp	r3, #0
 800985c:	d110      	bne.n	8009880 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	015a      	lsls	r2, r3, #5
 8009862:	69fb      	ldr	r3, [r7, #28]
 8009864:	4413      	add	r3, r2
 8009866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	69ba      	ldr	r2, [r7, #24]
 800986e:	0151      	lsls	r1, r2, #5
 8009870:	69fa      	ldr	r2, [r7, #28]
 8009872:	440a      	add	r2, r1
 8009874:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009878:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800987c:	6013      	str	r3, [r2, #0]
 800987e:	e00f      	b.n	80098a0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	015a      	lsls	r2, r3, #5
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	4413      	add	r3, r2
 8009888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	69ba      	ldr	r2, [r7, #24]
 8009890:	0151      	lsls	r1, r2, #5
 8009892:	69fa      	ldr	r2, [r7, #28]
 8009894:	440a      	add	r2, r1
 8009896:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800989a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800989e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	015a      	lsls	r2, r3, #5
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	4413      	add	r3, r2
 80098a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	69ba      	ldr	r2, [r7, #24]
 80098b0:	0151      	lsls	r1, r2, #5
 80098b2:	69fa      	ldr	r2, [r7, #28]
 80098b4:	440a      	add	r2, r1
 80098b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80098be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80098c0:	2300      	movs	r3, #0
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3720      	adds	r7, #32
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	bf00      	nop
 80098cc:	1ff80000 	.word	0x1ff80000

080098d0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b087      	sub	sp, #28
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	4613      	mov	r3, r2
 80098dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	785b      	ldrb	r3, [r3, #1]
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	f040 80ce 	bne.w	8009a8e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	699b      	ldr	r3, [r3, #24]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d132      	bne.n	8009960 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	015a      	lsls	r2, r3, #5
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	4413      	add	r3, r2
 8009902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009906:	691b      	ldr	r3, [r3, #16]
 8009908:	693a      	ldr	r2, [r7, #16]
 800990a:	0151      	lsls	r1, r2, #5
 800990c:	697a      	ldr	r2, [r7, #20]
 800990e:	440a      	add	r2, r1
 8009910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009914:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009918:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800991c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	015a      	lsls	r2, r3, #5
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	4413      	add	r3, r2
 8009926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	693a      	ldr	r2, [r7, #16]
 800992e:	0151      	lsls	r1, r2, #5
 8009930:	697a      	ldr	r2, [r7, #20]
 8009932:	440a      	add	r2, r1
 8009934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009938:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800993c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	015a      	lsls	r2, r3, #5
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	4413      	add	r3, r2
 8009946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800994a:	691b      	ldr	r3, [r3, #16]
 800994c:	693a      	ldr	r2, [r7, #16]
 800994e:	0151      	lsls	r1, r2, #5
 8009950:	697a      	ldr	r2, [r7, #20]
 8009952:	440a      	add	r2, r1
 8009954:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009958:	0cdb      	lsrs	r3, r3, #19
 800995a:	04db      	lsls	r3, r3, #19
 800995c:	6113      	str	r3, [r2, #16]
 800995e:	e04e      	b.n	80099fe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	015a      	lsls	r2, r3, #5
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	4413      	add	r3, r2
 8009968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	693a      	ldr	r2, [r7, #16]
 8009970:	0151      	lsls	r1, r2, #5
 8009972:	697a      	ldr	r2, [r7, #20]
 8009974:	440a      	add	r2, r1
 8009976:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800997a:	0cdb      	lsrs	r3, r3, #19
 800997c:	04db      	lsls	r3, r3, #19
 800997e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	015a      	lsls	r2, r3, #5
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	4413      	add	r3, r2
 8009988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	693a      	ldr	r2, [r7, #16]
 8009990:	0151      	lsls	r1, r2, #5
 8009992:	697a      	ldr	r2, [r7, #20]
 8009994:	440a      	add	r2, r1
 8009996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800999a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800999e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80099a2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	699a      	ldr	r2, [r3, #24]
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d903      	bls.n	80099b8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	68da      	ldr	r2, [r3, #12]
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	015a      	lsls	r2, r3, #5
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	4413      	add	r3, r2
 80099c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099c4:	691b      	ldr	r3, [r3, #16]
 80099c6:	693a      	ldr	r2, [r7, #16]
 80099c8:	0151      	lsls	r1, r2, #5
 80099ca:	697a      	ldr	r2, [r7, #20]
 80099cc:	440a      	add	r2, r1
 80099ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80099d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	015a      	lsls	r2, r3, #5
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	4413      	add	r3, r2
 80099e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099e4:	691a      	ldr	r2, [r3, #16]
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	699b      	ldr	r3, [r3, #24]
 80099ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099ee:	6939      	ldr	r1, [r7, #16]
 80099f0:	0148      	lsls	r0, r1, #5
 80099f2:	6979      	ldr	r1, [r7, #20]
 80099f4:	4401      	add	r1, r0
 80099f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80099fa:	4313      	orrs	r3, r2
 80099fc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80099fe:	79fb      	ldrb	r3, [r7, #7]
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d11e      	bne.n	8009a42 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	695b      	ldr	r3, [r3, #20]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d009      	beq.n	8009a20 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	015a      	lsls	r2, r3, #5
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	4413      	add	r3, r2
 8009a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a18:	461a      	mov	r2, r3
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	695b      	ldr	r3, [r3, #20]
 8009a1e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	015a      	lsls	r2, r3, #5
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	4413      	add	r3, r2
 8009a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	693a      	ldr	r2, [r7, #16]
 8009a30:	0151      	lsls	r1, r2, #5
 8009a32:	697a      	ldr	r2, [r7, #20]
 8009a34:	440a      	add	r2, r1
 8009a36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a3e:	6013      	str	r3, [r2, #0]
 8009a40:	e097      	b.n	8009b72 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	015a      	lsls	r2, r3, #5
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	4413      	add	r3, r2
 8009a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	693a      	ldr	r2, [r7, #16]
 8009a52:	0151      	lsls	r1, r2, #5
 8009a54:	697a      	ldr	r2, [r7, #20]
 8009a56:	440a      	add	r2, r1
 8009a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a60:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	699b      	ldr	r3, [r3, #24]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	f000 8083 	beq.w	8009b72 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	f003 030f 	and.w	r3, r3, #15
 8009a7c:	2101      	movs	r1, #1
 8009a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8009a82:	6979      	ldr	r1, [r7, #20]
 8009a84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	634b      	str	r3, [r1, #52]	; 0x34
 8009a8c:	e071      	b.n	8009b72 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	015a      	lsls	r2, r3, #5
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	4413      	add	r3, r2
 8009a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a9a:	691b      	ldr	r3, [r3, #16]
 8009a9c:	693a      	ldr	r2, [r7, #16]
 8009a9e:	0151      	lsls	r1, r2, #5
 8009aa0:	697a      	ldr	r2, [r7, #20]
 8009aa2:	440a      	add	r2, r1
 8009aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009aa8:	0cdb      	lsrs	r3, r3, #19
 8009aaa:	04db      	lsls	r3, r3, #19
 8009aac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	015a      	lsls	r2, r3, #5
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	693a      	ldr	r2, [r7, #16]
 8009abe:	0151      	lsls	r1, r2, #5
 8009ac0:	697a      	ldr	r2, [r7, #20]
 8009ac2:	440a      	add	r2, r1
 8009ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ac8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009acc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009ad0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	699b      	ldr	r3, [r3, #24]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d003      	beq.n	8009ae2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	68da      	ldr	r2, [r3, #12]
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	68da      	ldr	r2, [r3, #12]
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	015a      	lsls	r2, r3, #5
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	4413      	add	r3, r2
 8009af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009af6:	691b      	ldr	r3, [r3, #16]
 8009af8:	693a      	ldr	r2, [r7, #16]
 8009afa:	0151      	lsls	r1, r2, #5
 8009afc:	697a      	ldr	r2, [r7, #20]
 8009afe:	440a      	add	r2, r1
 8009b00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	015a      	lsls	r2, r3, #5
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	4413      	add	r3, r2
 8009b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b16:	691a      	ldr	r2, [r3, #16]
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	69db      	ldr	r3, [r3, #28]
 8009b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b20:	6939      	ldr	r1, [r7, #16]
 8009b22:	0148      	lsls	r0, r1, #5
 8009b24:	6979      	ldr	r1, [r7, #20]
 8009b26:	4401      	add	r1, r0
 8009b28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009b30:	79fb      	ldrb	r3, [r7, #7]
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d10d      	bne.n	8009b52 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	691b      	ldr	r3, [r3, #16]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d009      	beq.n	8009b52 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	6919      	ldr	r1, [r3, #16]
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	015a      	lsls	r2, r3, #5
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	4413      	add	r3, r2
 8009b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b4e:	460a      	mov	r2, r1
 8009b50:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	015a      	lsls	r2, r3, #5
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	4413      	add	r3, r2
 8009b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	693a      	ldr	r2, [r7, #16]
 8009b62:	0151      	lsls	r1, r2, #5
 8009b64:	697a      	ldr	r2, [r7, #20]
 8009b66:	440a      	add	r2, r1
 8009b68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b70:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b72:	2300      	movs	r3, #0
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	371c      	adds	r7, #28
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b087      	sub	sp, #28
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	785b      	ldrb	r3, [r3, #1]
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d14a      	bne.n	8009c34 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	015a      	lsls	r2, r3, #5
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bb6:	f040 8086 	bne.w	8009cc6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	015a      	lsls	r2, r3, #5
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	683a      	ldr	r2, [r7, #0]
 8009bcc:	7812      	ldrb	r2, [r2, #0]
 8009bce:	0151      	lsls	r1, r2, #5
 8009bd0:	693a      	ldr	r2, [r7, #16]
 8009bd2:	440a      	add	r2, r1
 8009bd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bd8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009bdc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	015a      	lsls	r2, r3, #5
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	4413      	add	r3, r2
 8009be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	683a      	ldr	r2, [r7, #0]
 8009bf0:	7812      	ldrb	r2, [r2, #0]
 8009bf2:	0151      	lsls	r1, r2, #5
 8009bf4:	693a      	ldr	r2, [r7, #16]
 8009bf6:	440a      	add	r2, r1
 8009bf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c00:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	3301      	adds	r3, #1
 8009c06:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f242 7210 	movw	r2, #10000	; 0x2710
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d902      	bls.n	8009c18 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	75fb      	strb	r3, [r7, #23]
          break;
 8009c16:	e056      	b.n	8009cc6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	015a      	lsls	r2, r3, #5
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	4413      	add	r3, r2
 8009c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c30:	d0e7      	beq.n	8009c02 <USB_EPStopXfer+0x82>
 8009c32:	e048      	b.n	8009cc6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	015a      	lsls	r2, r3, #5
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c4c:	d13b      	bne.n	8009cc6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	015a      	lsls	r2, r3, #5
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	4413      	add	r3, r2
 8009c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	683a      	ldr	r2, [r7, #0]
 8009c60:	7812      	ldrb	r2, [r2, #0]
 8009c62:	0151      	lsls	r1, r2, #5
 8009c64:	693a      	ldr	r2, [r7, #16]
 8009c66:	440a      	add	r2, r1
 8009c68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009c70:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	015a      	lsls	r2, r3, #5
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	683a      	ldr	r2, [r7, #0]
 8009c84:	7812      	ldrb	r2, [r2, #0]
 8009c86:	0151      	lsls	r1, r2, #5
 8009c88:	693a      	ldr	r2, [r7, #16]
 8009c8a:	440a      	add	r2, r1
 8009c8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d902      	bls.n	8009cac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	75fb      	strb	r3, [r7, #23]
          break;
 8009caa:	e00c      	b.n	8009cc6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	015a      	lsls	r2, r3, #5
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009cc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009cc4:	d0e7      	beq.n	8009c96 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	371c      	adds	r7, #28
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr

08009cd4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b089      	sub	sp, #36	; 0x24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	4611      	mov	r1, r2
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	71fb      	strb	r3, [r7, #7]
 8009ce6:	4613      	mov	r3, r2
 8009ce8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009cf2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d123      	bne.n	8009d42 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009cfa:	88bb      	ldrh	r3, [r7, #4]
 8009cfc:	3303      	adds	r3, #3
 8009cfe:	089b      	lsrs	r3, r3, #2
 8009d00:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009d02:	2300      	movs	r3, #0
 8009d04:	61bb      	str	r3, [r7, #24]
 8009d06:	e018      	b.n	8009d3a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009d08:	79fb      	ldrb	r3, [r7, #7]
 8009d0a:	031a      	lsls	r2, r3, #12
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	4413      	add	r3, r2
 8009d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d14:	461a      	mov	r2, r3
 8009d16:	69fb      	ldr	r3, [r7, #28]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009d22:	69fb      	ldr	r3, [r7, #28]
 8009d24:	3301      	adds	r3, #1
 8009d26:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009d28:	69fb      	ldr	r3, [r7, #28]
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009d2e:	69fb      	ldr	r3, [r7, #28]
 8009d30:	3301      	adds	r3, #1
 8009d32:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	3301      	adds	r3, #1
 8009d38:	61bb      	str	r3, [r7, #24]
 8009d3a:	69ba      	ldr	r2, [r7, #24]
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d3e2      	bcc.n	8009d08 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009d42:	2300      	movs	r3, #0
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3724      	adds	r7, #36	; 0x24
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b08b      	sub	sp, #44	; 0x2c
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	4613      	mov	r3, r2
 8009d5c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009d66:	88fb      	ldrh	r3, [r7, #6]
 8009d68:	089b      	lsrs	r3, r3, #2
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009d6e:	88fb      	ldrh	r3, [r7, #6]
 8009d70:	f003 0303 	and.w	r3, r3, #3
 8009d74:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009d76:	2300      	movs	r3, #0
 8009d78:	623b      	str	r3, [r7, #32]
 8009d7a:	e014      	b.n	8009da6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d86:	601a      	str	r2, [r3, #0]
    pDest++;
 8009d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d90:	3301      	adds	r3, #1
 8009d92:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d96:	3301      	adds	r3, #1
 8009d98:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009da0:	6a3b      	ldr	r3, [r7, #32]
 8009da2:	3301      	adds	r3, #1
 8009da4:	623b      	str	r3, [r7, #32]
 8009da6:	6a3a      	ldr	r2, [r7, #32]
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d3e6      	bcc.n	8009d7c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009dae:	8bfb      	ldrh	r3, [r7, #30]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d01e      	beq.n	8009df2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009db4:	2300      	movs	r3, #0
 8009db6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	f107 0310 	add.w	r3, r7, #16
 8009dc4:	6812      	ldr	r2, [r2, #0]
 8009dc6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009dc8:	693a      	ldr	r2, [r7, #16]
 8009dca:	6a3b      	ldr	r3, [r7, #32]
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	00db      	lsls	r3, r3, #3
 8009dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8009dd4:	b2da      	uxtb	r2, r3
 8009dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd8:	701a      	strb	r2, [r3, #0]
      i++;
 8009dda:	6a3b      	ldr	r3, [r7, #32]
 8009ddc:	3301      	adds	r3, #1
 8009dde:	623b      	str	r3, [r7, #32]
      pDest++;
 8009de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de2:	3301      	adds	r3, #1
 8009de4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009de6:	8bfb      	ldrh	r3, [r7, #30]
 8009de8:	3b01      	subs	r3, #1
 8009dea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009dec:	8bfb      	ldrh	r3, [r7, #30]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d1ea      	bne.n	8009dc8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	372c      	adds	r7, #44	; 0x2c
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr

08009e00 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b085      	sub	sp, #20
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	785b      	ldrb	r3, [r3, #1]
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d12c      	bne.n	8009e76 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	015a      	lsls	r2, r3, #5
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	4413      	add	r3, r2
 8009e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	db12      	blt.n	8009e54 <USB_EPSetStall+0x54>
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d00f      	beq.n	8009e54 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	015a      	lsls	r2, r3, #5
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	4413      	add	r3, r2
 8009e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	68ba      	ldr	r2, [r7, #8]
 8009e44:	0151      	lsls	r1, r2, #5
 8009e46:	68fa      	ldr	r2, [r7, #12]
 8009e48:	440a      	add	r2, r1
 8009e4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009e52:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	015a      	lsls	r2, r3, #5
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	68ba      	ldr	r2, [r7, #8]
 8009e64:	0151      	lsls	r1, r2, #5
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	440a      	add	r2, r1
 8009e6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009e72:	6013      	str	r3, [r2, #0]
 8009e74:	e02b      	b.n	8009ece <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	015a      	lsls	r2, r3, #5
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	db12      	blt.n	8009eae <USB_EPSetStall+0xae>
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00f      	beq.n	8009eae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	015a      	lsls	r2, r3, #5
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	4413      	add	r3, r2
 8009e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	68ba      	ldr	r2, [r7, #8]
 8009e9e:	0151      	lsls	r1, r2, #5
 8009ea0:	68fa      	ldr	r2, [r7, #12]
 8009ea2:	440a      	add	r2, r1
 8009ea4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ea8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009eac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	015a      	lsls	r2, r3, #5
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	4413      	add	r3, r2
 8009eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	68ba      	ldr	r2, [r7, #8]
 8009ebe:	0151      	lsls	r1, r2, #5
 8009ec0:	68fa      	ldr	r2, [r7, #12]
 8009ec2:	440a      	add	r2, r1
 8009ec4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ec8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009ecc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009ece:	2300      	movs	r3, #0
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3714      	adds	r7, #20
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	785b      	ldrb	r3, [r3, #1]
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d128      	bne.n	8009f4a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	015a      	lsls	r2, r3, #5
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	4413      	add	r3, r2
 8009f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	68ba      	ldr	r2, [r7, #8]
 8009f08:	0151      	lsls	r1, r2, #5
 8009f0a:	68fa      	ldr	r2, [r7, #12]
 8009f0c:	440a      	add	r2, r1
 8009f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f16:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	791b      	ldrb	r3, [r3, #4]
 8009f1c:	2b03      	cmp	r3, #3
 8009f1e:	d003      	beq.n	8009f28 <USB_EPClearStall+0x4c>
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	791b      	ldrb	r3, [r3, #4]
 8009f24:	2b02      	cmp	r3, #2
 8009f26:	d138      	bne.n	8009f9a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	015a      	lsls	r2, r3, #5
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	4413      	add	r3, r2
 8009f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	68ba      	ldr	r2, [r7, #8]
 8009f38:	0151      	lsls	r1, r2, #5
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	440a      	add	r2, r1
 8009f3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f46:	6013      	str	r3, [r2, #0]
 8009f48:	e027      	b.n	8009f9a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	015a      	lsls	r2, r3, #5
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	4413      	add	r3, r2
 8009f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	68ba      	ldr	r2, [r7, #8]
 8009f5a:	0151      	lsls	r1, r2, #5
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	440a      	add	r2, r1
 8009f60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f68:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	791b      	ldrb	r3, [r3, #4]
 8009f6e:	2b03      	cmp	r3, #3
 8009f70:	d003      	beq.n	8009f7a <USB_EPClearStall+0x9e>
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	791b      	ldrb	r3, [r3, #4]
 8009f76:	2b02      	cmp	r3, #2
 8009f78:	d10f      	bne.n	8009f9a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	015a      	lsls	r2, r3, #5
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	4413      	add	r3, r2
 8009f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	68ba      	ldr	r2, [r7, #8]
 8009f8a:	0151      	lsls	r1, r2, #5
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	440a      	add	r2, r1
 8009f90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f98:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009f9a:	2300      	movs	r3, #0
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3714      	adds	r7, #20
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b085      	sub	sp, #20
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	68fa      	ldr	r2, [r7, #12]
 8009fc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fc6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009fca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	78fb      	ldrb	r3, [r7, #3]
 8009fd6:	011b      	lsls	r3, r3, #4
 8009fd8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009fdc:	68f9      	ldr	r1, [r7, #12]
 8009fde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009fe6:	2300      	movs	r3, #0
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3714      	adds	r7, #20
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b085      	sub	sp, #20
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	68fa      	ldr	r2, [r7, #12]
 800a00a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a00e:	f023 0303 	bic.w	r3, r3, #3
 800a012:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	68fa      	ldr	r2, [r7, #12]
 800a01e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a022:	f023 0302 	bic.w	r3, r3, #2
 800a026:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3714      	adds	r7, #20
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr

0800a036 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a036:	b480      	push	{r7}
 800a038:	b085      	sub	sp, #20
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	68fa      	ldr	r2, [r7, #12]
 800a04c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a050:	f023 0303 	bic.w	r3, r3, #3
 800a054:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	68fa      	ldr	r2, [r7, #12]
 800a060:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a064:	f043 0302 	orr.w	r3, r3, #2
 800a068:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3714      	adds	r7, #20
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr

0800a078 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a078:	b480      	push	{r7}
 800a07a:	b085      	sub	sp, #20
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	695b      	ldr	r3, [r3, #20]
 800a084:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	699b      	ldr	r3, [r3, #24]
 800a08a:	68fa      	ldr	r2, [r7, #12]
 800a08c:	4013      	ands	r3, r2
 800a08e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a090:	68fb      	ldr	r3, [r7, #12]
}
 800a092:	4618      	mov	r0, r3
 800a094:	3714      	adds	r7, #20
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr

0800a09e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a09e:	b480      	push	{r7}
 800a0a0:	b085      	sub	sp, #20
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0b0:	699b      	ldr	r3, [r3, #24]
 800a0b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ba:	69db      	ldr	r3, [r3, #28]
 800a0bc:	68ba      	ldr	r2, [r7, #8]
 800a0be:	4013      	ands	r3, r2
 800a0c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	0c1b      	lsrs	r3, r3, #16
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3714      	adds	r7, #20
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr

0800a0d2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a0d2:	b480      	push	{r7}
 800a0d4:	b085      	sub	sp, #20
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0e4:	699b      	ldr	r3, [r3, #24]
 800a0e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ee:	69db      	ldr	r3, [r3, #28]
 800a0f0:	68ba      	ldr	r2, [r7, #8]
 800a0f2:	4013      	ands	r3, r2
 800a0f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	b29b      	uxth	r3, r3
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3714      	adds	r7, #20
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr

0800a106 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a106:	b480      	push	{r7}
 800a108:	b085      	sub	sp, #20
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
 800a10e:	460b      	mov	r3, r1
 800a110:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a116:	78fb      	ldrb	r3, [r7, #3]
 800a118:	015a      	lsls	r2, r3, #5
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	4413      	add	r3, r2
 800a11e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a122:	689b      	ldr	r3, [r3, #8]
 800a124:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a12c:	695b      	ldr	r3, [r3, #20]
 800a12e:	68ba      	ldr	r2, [r7, #8]
 800a130:	4013      	ands	r3, r2
 800a132:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a134:	68bb      	ldr	r3, [r7, #8]
}
 800a136:	4618      	mov	r0, r3
 800a138:	3714      	adds	r7, #20
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr

0800a142 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a142:	b480      	push	{r7}
 800a144:	b087      	sub	sp, #28
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
 800a14a:	460b      	mov	r3, r1
 800a14c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a158:	691b      	ldr	r3, [r3, #16]
 800a15a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a164:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a166:	78fb      	ldrb	r3, [r7, #3]
 800a168:	f003 030f 	and.w	r3, r3, #15
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	fa22 f303 	lsr.w	r3, r2, r3
 800a172:	01db      	lsls	r3, r3, #7
 800a174:	b2db      	uxtb	r3, r3
 800a176:	693a      	ldr	r2, [r7, #16]
 800a178:	4313      	orrs	r3, r2
 800a17a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a17c:	78fb      	ldrb	r3, [r7, #3]
 800a17e:	015a      	lsls	r2, r3, #5
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	4413      	add	r3, r2
 800a184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a188:	689b      	ldr	r3, [r3, #8]
 800a18a:	693a      	ldr	r2, [r7, #16]
 800a18c:	4013      	ands	r3, r2
 800a18e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a190:	68bb      	ldr	r3, [r7, #8]
}
 800a192:	4618      	mov	r0, r3
 800a194:	371c      	adds	r7, #28
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr

0800a19e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a19e:	b480      	push	{r7}
 800a1a0:	b083      	sub	sp, #12
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	695b      	ldr	r3, [r3, #20]
 800a1aa:	f003 0301 	and.w	r3, r3, #1
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	370c      	adds	r7, #12
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr

0800a1ba <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a1ba:	b480      	push	{r7}
 800a1bc:	b085      	sub	sp, #20
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1d4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a1d8:	f023 0307 	bic.w	r3, r3, #7
 800a1dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	68fa      	ldr	r2, [r7, #12]
 800a1e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3714      	adds	r7, #20
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a200:	b480      	push	{r7}
 800a202:	b087      	sub	sp, #28
 800a204:	af00      	add	r7, sp, #0
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	460b      	mov	r3, r1
 800a20a:	607a      	str	r2, [r7, #4]
 800a20c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	333c      	adds	r3, #60	; 0x3c
 800a216:	3304      	adds	r3, #4
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	4a26      	ldr	r2, [pc, #152]	; (800a2b8 <USB_EP0_OutStart+0xb8>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d90a      	bls.n	800a23a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a230:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a234:	d101      	bne.n	800a23a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a236:	2300      	movs	r3, #0
 800a238:	e037      	b.n	800a2aa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a240:	461a      	mov	r2, r3
 800a242:	2300      	movs	r3, #0
 800a244:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a24c:	691b      	ldr	r3, [r3, #16]
 800a24e:	697a      	ldr	r2, [r7, #20]
 800a250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a254:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a258:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a260:	691b      	ldr	r3, [r3, #16]
 800a262:	697a      	ldr	r2, [r7, #20]
 800a264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a268:	f043 0318 	orr.w	r3, r3, #24
 800a26c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a274:	691b      	ldr	r3, [r3, #16]
 800a276:	697a      	ldr	r2, [r7, #20]
 800a278:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a27c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a280:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a282:	7afb      	ldrb	r3, [r7, #11]
 800a284:	2b01      	cmp	r3, #1
 800a286:	d10f      	bne.n	800a2a8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a28e:	461a      	mov	r2, r3
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	697a      	ldr	r2, [r7, #20]
 800a29e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2a2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a2a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a2a8:	2300      	movs	r3, #0
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	371c      	adds	r7, #28
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr
 800a2b6:	bf00      	nop
 800a2b8:	4f54300a 	.word	0x4f54300a

0800a2bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	4a13      	ldr	r2, [pc, #76]	; (800a320 <USB_CoreReset+0x64>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d901      	bls.n	800a2da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a2d6:	2303      	movs	r3, #3
 800a2d8:	e01b      	b.n	800a312 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	691b      	ldr	r3, [r3, #16]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	daf2      	bge.n	800a2c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	f043 0201 	orr.w	r2, r3, #1
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	4a09      	ldr	r2, [pc, #36]	; (800a320 <USB_CoreReset+0x64>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d901      	bls.n	800a304 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a300:	2303      	movs	r3, #3
 800a302:	e006      	b.n	800a312 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	691b      	ldr	r3, [r3, #16]
 800a308:	f003 0301 	and.w	r3, r3, #1
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d0f0      	beq.n	800a2f2 <USB_CoreReset+0x36>

  return HAL_OK;
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3714      	adds	r7, #20
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop
 800a320:	00030d40 	.word	0x00030d40

0800a324 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	460b      	mov	r3, r1
 800a32e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a330:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a334:	f005 fb68 	bl	800fa08 <USBD_static_malloc>
 800a338:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d109      	bne.n	800a354 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	32b0      	adds	r2, #176	; 0xb0
 800a34a:	2100      	movs	r1, #0
 800a34c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a350:	2302      	movs	r3, #2
 800a352:	e0d4      	b.n	800a4fe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a354:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a358:	2100      	movs	r1, #0
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	f005 fbe0 	bl	800fb20 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	32b0      	adds	r2, #176	; 0xb0
 800a36a:	68f9      	ldr	r1, [r7, #12]
 800a36c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	32b0      	adds	r2, #176	; 0xb0
 800a37a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	7c1b      	ldrb	r3, [r3, #16]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d138      	bne.n	800a3fe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a38c:	4b5e      	ldr	r3, [pc, #376]	; (800a508 <USBD_CDC_Init+0x1e4>)
 800a38e:	7819      	ldrb	r1, [r3, #0]
 800a390:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a394:	2202      	movs	r2, #2
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f005 fa13 	bl	800f7c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a39c:	4b5a      	ldr	r3, [pc, #360]	; (800a508 <USBD_CDC_Init+0x1e4>)
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	f003 020f 	and.w	r2, r3, #15
 800a3a4:	6879      	ldr	r1, [r7, #4]
 800a3a6:	4613      	mov	r3, r2
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	4413      	add	r3, r2
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	440b      	add	r3, r1
 800a3b0:	3324      	adds	r3, #36	; 0x24
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a3b6:	4b55      	ldr	r3, [pc, #340]	; (800a50c <USBD_CDC_Init+0x1e8>)
 800a3b8:	7819      	ldrb	r1, [r3, #0]
 800a3ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3be:	2202      	movs	r2, #2
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f005 f9fe 	bl	800f7c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a3c6:	4b51      	ldr	r3, [pc, #324]	; (800a50c <USBD_CDC_Init+0x1e8>)
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	f003 020f 	and.w	r2, r3, #15
 800a3ce:	6879      	ldr	r1, [r7, #4]
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	009b      	lsls	r3, r3, #2
 800a3d4:	4413      	add	r3, r2
 800a3d6:	009b      	lsls	r3, r3, #2
 800a3d8:	440b      	add	r3, r1
 800a3da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a3de:	2201      	movs	r2, #1
 800a3e0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a3e2:	4b4b      	ldr	r3, [pc, #300]	; (800a510 <USBD_CDC_Init+0x1ec>)
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	f003 020f 	and.w	r2, r3, #15
 800a3ea:	6879      	ldr	r1, [r7, #4]
 800a3ec:	4613      	mov	r3, r2
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	4413      	add	r3, r2
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	440b      	add	r3, r1
 800a3f6:	3326      	adds	r3, #38	; 0x26
 800a3f8:	2210      	movs	r2, #16
 800a3fa:	801a      	strh	r2, [r3, #0]
 800a3fc:	e035      	b.n	800a46a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a3fe:	4b42      	ldr	r3, [pc, #264]	; (800a508 <USBD_CDC_Init+0x1e4>)
 800a400:	7819      	ldrb	r1, [r3, #0]
 800a402:	2340      	movs	r3, #64	; 0x40
 800a404:	2202      	movs	r2, #2
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f005 f9db 	bl	800f7c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a40c:	4b3e      	ldr	r3, [pc, #248]	; (800a508 <USBD_CDC_Init+0x1e4>)
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	f003 020f 	and.w	r2, r3, #15
 800a414:	6879      	ldr	r1, [r7, #4]
 800a416:	4613      	mov	r3, r2
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	4413      	add	r3, r2
 800a41c:	009b      	lsls	r3, r3, #2
 800a41e:	440b      	add	r3, r1
 800a420:	3324      	adds	r3, #36	; 0x24
 800a422:	2201      	movs	r2, #1
 800a424:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a426:	4b39      	ldr	r3, [pc, #228]	; (800a50c <USBD_CDC_Init+0x1e8>)
 800a428:	7819      	ldrb	r1, [r3, #0]
 800a42a:	2340      	movs	r3, #64	; 0x40
 800a42c:	2202      	movs	r2, #2
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f005 f9c7 	bl	800f7c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a434:	4b35      	ldr	r3, [pc, #212]	; (800a50c <USBD_CDC_Init+0x1e8>)
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	f003 020f 	and.w	r2, r3, #15
 800a43c:	6879      	ldr	r1, [r7, #4]
 800a43e:	4613      	mov	r3, r2
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	4413      	add	r3, r2
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	440b      	add	r3, r1
 800a448:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a44c:	2201      	movs	r2, #1
 800a44e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a450:	4b2f      	ldr	r3, [pc, #188]	; (800a510 <USBD_CDC_Init+0x1ec>)
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	f003 020f 	and.w	r2, r3, #15
 800a458:	6879      	ldr	r1, [r7, #4]
 800a45a:	4613      	mov	r3, r2
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	4413      	add	r3, r2
 800a460:	009b      	lsls	r3, r3, #2
 800a462:	440b      	add	r3, r1
 800a464:	3326      	adds	r3, #38	; 0x26
 800a466:	2210      	movs	r2, #16
 800a468:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a46a:	4b29      	ldr	r3, [pc, #164]	; (800a510 <USBD_CDC_Init+0x1ec>)
 800a46c:	7819      	ldrb	r1, [r3, #0]
 800a46e:	2308      	movs	r3, #8
 800a470:	2203      	movs	r2, #3
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f005 f9a5 	bl	800f7c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a478:	4b25      	ldr	r3, [pc, #148]	; (800a510 <USBD_CDC_Init+0x1ec>)
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	f003 020f 	and.w	r2, r3, #15
 800a480:	6879      	ldr	r1, [r7, #4]
 800a482:	4613      	mov	r3, r2
 800a484:	009b      	lsls	r3, r3, #2
 800a486:	4413      	add	r3, r2
 800a488:	009b      	lsls	r3, r3, #2
 800a48a:	440b      	add	r3, r1
 800a48c:	3324      	adds	r3, #36	; 0x24
 800a48e:	2201      	movs	r2, #1
 800a490:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2200      	movs	r2, #0
 800a496:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	33b0      	adds	r3, #176	; 0xb0
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	4413      	add	r3, r2
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d101      	bne.n	800a4cc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a4c8:	2302      	movs	r3, #2
 800a4ca:	e018      	b.n	800a4fe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	7c1b      	ldrb	r3, [r3, #16]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d10a      	bne.n	800a4ea <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a4d4:	4b0d      	ldr	r3, [pc, #52]	; (800a50c <USBD_CDC_Init+0x1e8>)
 800a4d6:	7819      	ldrb	r1, [r3, #0]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a4de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f005 fa5c 	bl	800f9a0 <USBD_LL_PrepareReceive>
 800a4e8:	e008      	b.n	800a4fc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a4ea:	4b08      	ldr	r3, [pc, #32]	; (800a50c <USBD_CDC_Init+0x1e8>)
 800a4ec:	7819      	ldrb	r1, [r3, #0]
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a4f4:	2340      	movs	r3, #64	; 0x40
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f005 fa52 	bl	800f9a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3710      	adds	r7, #16
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	200005bb 	.word	0x200005bb
 800a50c:	200005bc 	.word	0x200005bc
 800a510:	200005bd 	.word	0x200005bd

0800a514 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	460b      	mov	r3, r1
 800a51e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a520:	4b3a      	ldr	r3, [pc, #232]	; (800a60c <USBD_CDC_DeInit+0xf8>)
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	4619      	mov	r1, r3
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f005 f971 	bl	800f80e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a52c:	4b37      	ldr	r3, [pc, #220]	; (800a60c <USBD_CDC_DeInit+0xf8>)
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	f003 020f 	and.w	r2, r3, #15
 800a534:	6879      	ldr	r1, [r7, #4]
 800a536:	4613      	mov	r3, r2
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	4413      	add	r3, r2
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	440b      	add	r3, r1
 800a540:	3324      	adds	r3, #36	; 0x24
 800a542:	2200      	movs	r2, #0
 800a544:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a546:	4b32      	ldr	r3, [pc, #200]	; (800a610 <USBD_CDC_DeInit+0xfc>)
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	4619      	mov	r1, r3
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f005 f95e 	bl	800f80e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a552:	4b2f      	ldr	r3, [pc, #188]	; (800a610 <USBD_CDC_DeInit+0xfc>)
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	f003 020f 	and.w	r2, r3, #15
 800a55a:	6879      	ldr	r1, [r7, #4]
 800a55c:	4613      	mov	r3, r2
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	4413      	add	r3, r2
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	440b      	add	r3, r1
 800a566:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a56a:	2200      	movs	r2, #0
 800a56c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a56e:	4b29      	ldr	r3, [pc, #164]	; (800a614 <USBD_CDC_DeInit+0x100>)
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	4619      	mov	r1, r3
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f005 f94a 	bl	800f80e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a57a:	4b26      	ldr	r3, [pc, #152]	; (800a614 <USBD_CDC_DeInit+0x100>)
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	f003 020f 	and.w	r2, r3, #15
 800a582:	6879      	ldr	r1, [r7, #4]
 800a584:	4613      	mov	r3, r2
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	4413      	add	r3, r2
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	440b      	add	r3, r1
 800a58e:	3324      	adds	r3, #36	; 0x24
 800a590:	2200      	movs	r2, #0
 800a592:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a594:	4b1f      	ldr	r3, [pc, #124]	; (800a614 <USBD_CDC_DeInit+0x100>)
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	f003 020f 	and.w	r2, r3, #15
 800a59c:	6879      	ldr	r1, [r7, #4]
 800a59e:	4613      	mov	r3, r2
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	4413      	add	r3, r2
 800a5a4:	009b      	lsls	r3, r3, #2
 800a5a6:	440b      	add	r3, r1
 800a5a8:	3326      	adds	r3, #38	; 0x26
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	32b0      	adds	r2, #176	; 0xb0
 800a5b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d01f      	beq.n	800a600 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	33b0      	adds	r3, #176	; 0xb0
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	4413      	add	r3, r2
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	32b0      	adds	r2, #176	; 0xb0
 800a5de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f005 fa1e 	bl	800fa24 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	32b0      	adds	r2, #176	; 0xb0
 800a5f2:	2100      	movs	r1, #0
 800a5f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a600:	2300      	movs	r3, #0
}
 800a602:	4618      	mov	r0, r3
 800a604:	3708      	adds	r7, #8
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	200005bb 	.word	0x200005bb
 800a610:	200005bc 	.word	0x200005bc
 800a614:	200005bd 	.word	0x200005bd

0800a618 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b086      	sub	sp, #24
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	32b0      	adds	r2, #176	; 0xb0
 800a62c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a630:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a632:	2300      	movs	r3, #0
 800a634:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a636:	2300      	movs	r3, #0
 800a638:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a63a:	2300      	movs	r3, #0
 800a63c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d101      	bne.n	800a648 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a644:	2303      	movs	r3, #3
 800a646:	e0bf      	b.n	800a7c8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	781b      	ldrb	r3, [r3, #0]
 800a64c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a650:	2b00      	cmp	r3, #0
 800a652:	d050      	beq.n	800a6f6 <USBD_CDC_Setup+0xde>
 800a654:	2b20      	cmp	r3, #32
 800a656:	f040 80af 	bne.w	800a7b8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	88db      	ldrh	r3, [r3, #6]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d03a      	beq.n	800a6d8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	b25b      	sxtb	r3, r3
 800a668:	2b00      	cmp	r3, #0
 800a66a:	da1b      	bge.n	800a6a4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	33b0      	adds	r3, #176	; 0xb0
 800a676:	009b      	lsls	r3, r3, #2
 800a678:	4413      	add	r3, r2
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	683a      	ldr	r2, [r7, #0]
 800a680:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a682:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a684:	683a      	ldr	r2, [r7, #0]
 800a686:	88d2      	ldrh	r2, [r2, #6]
 800a688:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	88db      	ldrh	r3, [r3, #6]
 800a68e:	2b07      	cmp	r3, #7
 800a690:	bf28      	it	cs
 800a692:	2307      	movcs	r3, #7
 800a694:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	89fa      	ldrh	r2, [r7, #14]
 800a69a:	4619      	mov	r1, r3
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f001 fd43 	bl	800c128 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a6a2:	e090      	b.n	800a7c6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	785a      	ldrb	r2, [r3, #1]
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	88db      	ldrh	r3, [r3, #6]
 800a6b2:	2b3f      	cmp	r3, #63	; 0x3f
 800a6b4:	d803      	bhi.n	800a6be <USBD_CDC_Setup+0xa6>
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	88db      	ldrh	r3, [r3, #6]
 800a6ba:	b2da      	uxtb	r2, r3
 800a6bc:	e000      	b.n	800a6c0 <USBD_CDC_Setup+0xa8>
 800a6be:	2240      	movs	r2, #64	; 0x40
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a6c6:	6939      	ldr	r1, [r7, #16]
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f001 fd55 	bl	800c180 <USBD_CtlPrepareRx>
      break;
 800a6d6:	e076      	b.n	800a7c6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	33b0      	adds	r3, #176	; 0xb0
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	4413      	add	r3, r2
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	689b      	ldr	r3, [r3, #8]
 800a6ea:	683a      	ldr	r2, [r7, #0]
 800a6ec:	7850      	ldrb	r0, [r2, #1]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	6839      	ldr	r1, [r7, #0]
 800a6f2:	4798      	blx	r3
      break;
 800a6f4:	e067      	b.n	800a7c6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	785b      	ldrb	r3, [r3, #1]
 800a6fa:	2b0b      	cmp	r3, #11
 800a6fc:	d851      	bhi.n	800a7a2 <USBD_CDC_Setup+0x18a>
 800a6fe:	a201      	add	r2, pc, #4	; (adr r2, 800a704 <USBD_CDC_Setup+0xec>)
 800a700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a704:	0800a735 	.word	0x0800a735
 800a708:	0800a7b1 	.word	0x0800a7b1
 800a70c:	0800a7a3 	.word	0x0800a7a3
 800a710:	0800a7a3 	.word	0x0800a7a3
 800a714:	0800a7a3 	.word	0x0800a7a3
 800a718:	0800a7a3 	.word	0x0800a7a3
 800a71c:	0800a7a3 	.word	0x0800a7a3
 800a720:	0800a7a3 	.word	0x0800a7a3
 800a724:	0800a7a3 	.word	0x0800a7a3
 800a728:	0800a7a3 	.word	0x0800a7a3
 800a72c:	0800a75f 	.word	0x0800a75f
 800a730:	0800a789 	.word	0x0800a789
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	2b03      	cmp	r3, #3
 800a73e:	d107      	bne.n	800a750 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a740:	f107 030a 	add.w	r3, r7, #10
 800a744:	2202      	movs	r2, #2
 800a746:	4619      	mov	r1, r3
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f001 fced 	bl	800c128 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a74e:	e032      	b.n	800a7b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a750:	6839      	ldr	r1, [r7, #0]
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f001 fc77 	bl	800c046 <USBD_CtlError>
            ret = USBD_FAIL;
 800a758:	2303      	movs	r3, #3
 800a75a:	75fb      	strb	r3, [r7, #23]
          break;
 800a75c:	e02b      	b.n	800a7b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a764:	b2db      	uxtb	r3, r3
 800a766:	2b03      	cmp	r3, #3
 800a768:	d107      	bne.n	800a77a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a76a:	f107 030d 	add.w	r3, r7, #13
 800a76e:	2201      	movs	r2, #1
 800a770:	4619      	mov	r1, r3
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f001 fcd8 	bl	800c128 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a778:	e01d      	b.n	800a7b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a77a:	6839      	ldr	r1, [r7, #0]
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f001 fc62 	bl	800c046 <USBD_CtlError>
            ret = USBD_FAIL;
 800a782:	2303      	movs	r3, #3
 800a784:	75fb      	strb	r3, [r7, #23]
          break;
 800a786:	e016      	b.n	800a7b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	2b03      	cmp	r3, #3
 800a792:	d00f      	beq.n	800a7b4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a794:	6839      	ldr	r1, [r7, #0]
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f001 fc55 	bl	800c046 <USBD_CtlError>
            ret = USBD_FAIL;
 800a79c:	2303      	movs	r3, #3
 800a79e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a7a0:	e008      	b.n	800a7b4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a7a2:	6839      	ldr	r1, [r7, #0]
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f001 fc4e 	bl	800c046 <USBD_CtlError>
          ret = USBD_FAIL;
 800a7aa:	2303      	movs	r3, #3
 800a7ac:	75fb      	strb	r3, [r7, #23]
          break;
 800a7ae:	e002      	b.n	800a7b6 <USBD_CDC_Setup+0x19e>
          break;
 800a7b0:	bf00      	nop
 800a7b2:	e008      	b.n	800a7c6 <USBD_CDC_Setup+0x1ae>
          break;
 800a7b4:	bf00      	nop
      }
      break;
 800a7b6:	e006      	b.n	800a7c6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a7b8:	6839      	ldr	r1, [r7, #0]
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f001 fc43 	bl	800c046 <USBD_CtlError>
      ret = USBD_FAIL;
 800a7c0:	2303      	movs	r3, #3
 800a7c2:	75fb      	strb	r3, [r7, #23]
      break;
 800a7c4:	bf00      	nop
  }

  return (uint8_t)ret;
 800a7c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3718      	adds	r7, #24
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	460b      	mov	r3, r1
 800a7da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a7e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	32b0      	adds	r2, #176	; 0xb0
 800a7ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d101      	bne.n	800a7fa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a7f6:	2303      	movs	r3, #3
 800a7f8:	e065      	b.n	800a8c6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	32b0      	adds	r2, #176	; 0xb0
 800a804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a808:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a80a:	78fb      	ldrb	r3, [r7, #3]
 800a80c:	f003 020f 	and.w	r2, r3, #15
 800a810:	6879      	ldr	r1, [r7, #4]
 800a812:	4613      	mov	r3, r2
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	4413      	add	r3, r2
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	440b      	add	r3, r1
 800a81c:	3318      	adds	r3, #24
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d02f      	beq.n	800a884 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a824:	78fb      	ldrb	r3, [r7, #3]
 800a826:	f003 020f 	and.w	r2, r3, #15
 800a82a:	6879      	ldr	r1, [r7, #4]
 800a82c:	4613      	mov	r3, r2
 800a82e:	009b      	lsls	r3, r3, #2
 800a830:	4413      	add	r3, r2
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	440b      	add	r3, r1
 800a836:	3318      	adds	r3, #24
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	78fb      	ldrb	r3, [r7, #3]
 800a83c:	f003 010f 	and.w	r1, r3, #15
 800a840:	68f8      	ldr	r0, [r7, #12]
 800a842:	460b      	mov	r3, r1
 800a844:	00db      	lsls	r3, r3, #3
 800a846:	440b      	add	r3, r1
 800a848:	009b      	lsls	r3, r3, #2
 800a84a:	4403      	add	r3, r0
 800a84c:	3348      	adds	r3, #72	; 0x48
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	fbb2 f1f3 	udiv	r1, r2, r3
 800a854:	fb01 f303 	mul.w	r3, r1, r3
 800a858:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d112      	bne.n	800a884 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a85e:	78fb      	ldrb	r3, [r7, #3]
 800a860:	f003 020f 	and.w	r2, r3, #15
 800a864:	6879      	ldr	r1, [r7, #4]
 800a866:	4613      	mov	r3, r2
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	4413      	add	r3, r2
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	440b      	add	r3, r1
 800a870:	3318      	adds	r3, #24
 800a872:	2200      	movs	r2, #0
 800a874:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a876:	78f9      	ldrb	r1, [r7, #3]
 800a878:	2300      	movs	r3, #0
 800a87a:	2200      	movs	r2, #0
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f005 f86e 	bl	800f95e <USBD_LL_Transmit>
 800a882:	e01f      	b.n	800a8c4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	2200      	movs	r2, #0
 800a888:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	33b0      	adds	r3, #176	; 0xb0
 800a896:	009b      	lsls	r3, r3, #2
 800a898:	4413      	add	r3, r2
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	691b      	ldr	r3, [r3, #16]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d010      	beq.n	800a8c4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	33b0      	adds	r3, #176	; 0xb0
 800a8ac:	009b      	lsls	r3, r3, #2
 800a8ae:	4413      	add	r3, r2
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	691b      	ldr	r3, [r3, #16]
 800a8b4:	68ba      	ldr	r2, [r7, #8]
 800a8b6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a8ba:	68ba      	ldr	r2, [r7, #8]
 800a8bc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a8c0:	78fa      	ldrb	r2, [r7, #3]
 800a8c2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a8ce:	b580      	push	{r7, lr}
 800a8d0:	b084      	sub	sp, #16
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	32b0      	adds	r2, #176	; 0xb0
 800a8e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	32b0      	adds	r2, #176	; 0xb0
 800a8f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d101      	bne.n	800a900 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a8fc:	2303      	movs	r3, #3
 800a8fe:	e01a      	b.n	800a936 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a900:	78fb      	ldrb	r3, [r7, #3]
 800a902:	4619      	mov	r1, r3
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f005 f86c 	bl	800f9e2 <USBD_LL_GetRxDataSize>
 800a90a:	4602      	mov	r2, r0
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a918:	687a      	ldr	r2, [r7, #4]
 800a91a:	33b0      	adds	r3, #176	; 0xb0
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	4413      	add	r3, r2
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	68fa      	ldr	r2, [r7, #12]
 800a926:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a930:	4611      	mov	r1, r2
 800a932:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	3710      	adds	r7, #16
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a93e:	b580      	push	{r7, lr}
 800a940:	b084      	sub	sp, #16
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	32b0      	adds	r2, #176	; 0xb0
 800a950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a954:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d101      	bne.n	800a960 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a95c:	2303      	movs	r3, #3
 800a95e:	e025      	b.n	800a9ac <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	33b0      	adds	r3, #176	; 0xb0
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	4413      	add	r3, r2
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d01a      	beq.n	800a9aa <USBD_CDC_EP0_RxReady+0x6c>
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a97a:	2bff      	cmp	r3, #255	; 0xff
 800a97c:	d015      	beq.n	800a9aa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	33b0      	adds	r3, #176	; 0xb0
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	4413      	add	r3, r2
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a996:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a998:	68fa      	ldr	r2, [r7, #12]
 800a99a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a99e:	b292      	uxth	r2, r2
 800a9a0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	22ff      	movs	r2, #255	; 0xff
 800a9a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a9aa:	2300      	movs	r3, #0
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3710      	adds	r7, #16
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b086      	sub	sp, #24
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a9bc:	2182      	movs	r1, #130	; 0x82
 800a9be:	4818      	ldr	r0, [pc, #96]	; (800aa20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a9c0:	f000 fd09 	bl	800b3d6 <USBD_GetEpDesc>
 800a9c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a9c6:	2101      	movs	r1, #1
 800a9c8:	4815      	ldr	r0, [pc, #84]	; (800aa20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a9ca:	f000 fd04 	bl	800b3d6 <USBD_GetEpDesc>
 800a9ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a9d0:	2181      	movs	r1, #129	; 0x81
 800a9d2:	4813      	ldr	r0, [pc, #76]	; (800aa20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a9d4:	f000 fcff 	bl	800b3d6 <USBD_GetEpDesc>
 800a9d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d002      	beq.n	800a9e6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	2210      	movs	r2, #16
 800a9e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d006      	beq.n	800a9fa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a9f4:	711a      	strb	r2, [r3, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d006      	beq.n	800aa0e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2200      	movs	r2, #0
 800aa04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa08:	711a      	strb	r2, [r3, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2243      	movs	r2, #67	; 0x43
 800aa12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aa14:	4b02      	ldr	r3, [pc, #8]	; (800aa20 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3718      	adds	r7, #24
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	20000578 	.word	0x20000578

0800aa24 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b086      	sub	sp, #24
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aa2c:	2182      	movs	r1, #130	; 0x82
 800aa2e:	4818      	ldr	r0, [pc, #96]	; (800aa90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800aa30:	f000 fcd1 	bl	800b3d6 <USBD_GetEpDesc>
 800aa34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aa36:	2101      	movs	r1, #1
 800aa38:	4815      	ldr	r0, [pc, #84]	; (800aa90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800aa3a:	f000 fccc 	bl	800b3d6 <USBD_GetEpDesc>
 800aa3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aa40:	2181      	movs	r1, #129	; 0x81
 800aa42:	4813      	ldr	r0, [pc, #76]	; (800aa90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800aa44:	f000 fcc7 	bl	800b3d6 <USBD_GetEpDesc>
 800aa48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d002      	beq.n	800aa56 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	2210      	movs	r2, #16
 800aa54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d006      	beq.n	800aa6a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	711a      	strb	r2, [r3, #4]
 800aa62:	2200      	movs	r2, #0
 800aa64:	f042 0202 	orr.w	r2, r2, #2
 800aa68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d006      	beq.n	800aa7e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2200      	movs	r2, #0
 800aa74:	711a      	strb	r2, [r3, #4]
 800aa76:	2200      	movs	r2, #0
 800aa78:	f042 0202 	orr.w	r2, r2, #2
 800aa7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2243      	movs	r2, #67	; 0x43
 800aa82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aa84:	4b02      	ldr	r3, [pc, #8]	; (800aa90 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3718      	adds	r7, #24
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	20000578 	.word	0x20000578

0800aa94 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b086      	sub	sp, #24
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aa9c:	2182      	movs	r1, #130	; 0x82
 800aa9e:	4818      	ldr	r0, [pc, #96]	; (800ab00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aaa0:	f000 fc99 	bl	800b3d6 <USBD_GetEpDesc>
 800aaa4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aaa6:	2101      	movs	r1, #1
 800aaa8:	4815      	ldr	r0, [pc, #84]	; (800ab00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aaaa:	f000 fc94 	bl	800b3d6 <USBD_GetEpDesc>
 800aaae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aab0:	2181      	movs	r1, #129	; 0x81
 800aab2:	4813      	ldr	r0, [pc, #76]	; (800ab00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aab4:	f000 fc8f 	bl	800b3d6 <USBD_GetEpDesc>
 800aab8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d002      	beq.n	800aac6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	2210      	movs	r2, #16
 800aac4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d006      	beq.n	800aada <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	2200      	movs	r2, #0
 800aad0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aad4:	711a      	strb	r2, [r3, #4]
 800aad6:	2200      	movs	r2, #0
 800aad8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d006      	beq.n	800aaee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aae8:	711a      	strb	r2, [r3, #4]
 800aaea:	2200      	movs	r2, #0
 800aaec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2243      	movs	r2, #67	; 0x43
 800aaf2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aaf4:	4b02      	ldr	r3, [pc, #8]	; (800ab00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3718      	adds	r7, #24
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}
 800aafe:	bf00      	nop
 800ab00:	20000578 	.word	0x20000578

0800ab04 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	220a      	movs	r2, #10
 800ab10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ab12:	4b03      	ldr	r3, [pc, #12]	; (800ab20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr
 800ab20:	20000534 	.word	0x20000534

0800ab24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b083      	sub	sp, #12
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d101      	bne.n	800ab38 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ab34:	2303      	movs	r3, #3
 800ab36:	e009      	b.n	800ab4c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	33b0      	adds	r3, #176	; 0xb0
 800ab42:	009b      	lsls	r3, r3, #2
 800ab44:	4413      	add	r3, r2
 800ab46:	683a      	ldr	r2, [r7, #0]
 800ab48:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ab4a:	2300      	movs	r3, #0
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b087      	sub	sp, #28
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	60f8      	str	r0, [r7, #12]
 800ab60:	60b9      	str	r1, [r7, #8]
 800ab62:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	32b0      	adds	r2, #176	; 0xb0
 800ab6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab72:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d101      	bne.n	800ab7e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ab7a:	2303      	movs	r3, #3
 800ab7c:	e008      	b.n	800ab90 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	68ba      	ldr	r2, [r7, #8]
 800ab82:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ab8e:	2300      	movs	r3, #0
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	371c      	adds	r7, #28
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr

0800ab9c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b085      	sub	sp, #20
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	32b0      	adds	r2, #176	; 0xb0
 800abb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abb4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d101      	bne.n	800abc0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800abbc:	2303      	movs	r3, #3
 800abbe:	e004      	b.n	800abca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	683a      	ldr	r2, [r7, #0]
 800abc4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800abc8:	2300      	movs	r3, #0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3714      	adds	r7, #20
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr
	...

0800abd8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	32b0      	adds	r2, #176	; 0xb0
 800abea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	32b0      	adds	r2, #176	; 0xb0
 800abfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d101      	bne.n	800ac06 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ac02:	2303      	movs	r3, #3
 800ac04:	e018      	b.n	800ac38 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	7c1b      	ldrb	r3, [r3, #16]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d10a      	bne.n	800ac24 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ac0e:	4b0c      	ldr	r3, [pc, #48]	; (800ac40 <USBD_CDC_ReceivePacket+0x68>)
 800ac10:	7819      	ldrb	r1, [r3, #0]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ac18:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f004 febf 	bl	800f9a0 <USBD_LL_PrepareReceive>
 800ac22:	e008      	b.n	800ac36 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ac24:	4b06      	ldr	r3, [pc, #24]	; (800ac40 <USBD_CDC_ReceivePacket+0x68>)
 800ac26:	7819      	ldrb	r1, [r3, #0]
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ac2e:	2340      	movs	r3, #64	; 0x40
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f004 feb5 	bl	800f9a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ac36:	2300      	movs	r3, #0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3710      	adds	r7, #16
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}
 800ac40:	200005bc 	.word	0x200005bc

0800ac44 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b086      	sub	sp, #24
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	60f8      	str	r0, [r7, #12]
 800ac4c:	60b9      	str	r1, [r7, #8]
 800ac4e:	4613      	mov	r3, r2
 800ac50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d101      	bne.n	800ac5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ac58:	2303      	movs	r3, #3
 800ac5a:	e01f      	b.n	800ac9c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2200      	movs	r2, #0
 800ac68:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d003      	beq.n	800ac82 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	68ba      	ldr	r2, [r7, #8]
 800ac7e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2201      	movs	r2, #1
 800ac86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	79fa      	ldrb	r2, [r7, #7]
 800ac8e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ac90:	68f8      	ldr	r0, [r7, #12]
 800ac92:	f004 fd2f 	bl	800f6f4 <USBD_LL_Init>
 800ac96:	4603      	mov	r3, r0
 800ac98:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ac9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3718      	adds	r7, #24
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800acae:	2300      	movs	r3, #0
 800acb0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d101      	bne.n	800acbc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800acb8:	2303      	movs	r3, #3
 800acba:	e025      	b.n	800ad08 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	683a      	ldr	r2, [r7, #0]
 800acc0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	32ae      	adds	r2, #174	; 0xae
 800acce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d00f      	beq.n	800acf8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	32ae      	adds	r2, #174	; 0xae
 800ace2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ace6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace8:	f107 020e 	add.w	r2, r7, #14
 800acec:	4610      	mov	r0, r2
 800acee:	4798      	blx	r3
 800acf0:	4602      	mov	r2, r0
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800acfe:	1c5a      	adds	r2, r3, #1
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800ad06:	2300      	movs	r3, #0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3710      	adds	r7, #16
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f004 fd37 	bl	800f78c <USBD_LL_Start>
 800ad1e:	4603      	mov	r3, r0
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3708      	adds	r7, #8
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ad30:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	370c      	adds	r7, #12
 800ad36:	46bd      	mov	sp, r7
 800ad38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3c:	4770      	bx	lr

0800ad3e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b084      	sub	sp, #16
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
 800ad46:	460b      	mov	r3, r1
 800ad48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d009      	beq.n	800ad6c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	78fa      	ldrb	r2, [r7, #3]
 800ad62:	4611      	mov	r1, r2
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	4798      	blx	r3
 800ad68:	4603      	mov	r3, r0
 800ad6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ad6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3710      	adds	r7, #16
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}

0800ad76 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad76:	b580      	push	{r7, lr}
 800ad78:	b084      	sub	sp, #16
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	6078      	str	r0, [r7, #4]
 800ad7e:	460b      	mov	r3, r1
 800ad80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad82:	2300      	movs	r3, #0
 800ad84:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	78fa      	ldrb	r2, [r7, #3]
 800ad90:	4611      	mov	r1, r2
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	4798      	blx	r3
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d001      	beq.n	800ada0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ad9c:	2303      	movs	r3, #3
 800ad9e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ada0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3710      	adds	r7, #16
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}

0800adaa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800adaa:	b580      	push	{r7, lr}
 800adac:	b084      	sub	sp, #16
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
 800adb2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800adba:	6839      	ldr	r1, [r7, #0]
 800adbc:	4618      	mov	r0, r3
 800adbe:	f001 f908 	bl	800bfd2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2201      	movs	r2, #1
 800adc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800add0:	461a      	mov	r2, r3
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800adde:	f003 031f 	and.w	r3, r3, #31
 800ade2:	2b02      	cmp	r3, #2
 800ade4:	d01a      	beq.n	800ae1c <USBD_LL_SetupStage+0x72>
 800ade6:	2b02      	cmp	r3, #2
 800ade8:	d822      	bhi.n	800ae30 <USBD_LL_SetupStage+0x86>
 800adea:	2b00      	cmp	r3, #0
 800adec:	d002      	beq.n	800adf4 <USBD_LL_SetupStage+0x4a>
 800adee:	2b01      	cmp	r3, #1
 800adf0:	d00a      	beq.n	800ae08 <USBD_LL_SetupStage+0x5e>
 800adf2:	e01d      	b.n	800ae30 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800adfa:	4619      	mov	r1, r3
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f000 fb5f 	bl	800b4c0 <USBD_StdDevReq>
 800ae02:	4603      	mov	r3, r0
 800ae04:	73fb      	strb	r3, [r7, #15]
      break;
 800ae06:	e020      	b.n	800ae4a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ae0e:	4619      	mov	r1, r3
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 fbc7 	bl	800b5a4 <USBD_StdItfReq>
 800ae16:	4603      	mov	r3, r0
 800ae18:	73fb      	strb	r3, [r7, #15]
      break;
 800ae1a:	e016      	b.n	800ae4a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ae22:	4619      	mov	r1, r3
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f000 fc29 	bl	800b67c <USBD_StdEPReq>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	73fb      	strb	r3, [r7, #15]
      break;
 800ae2e:	e00c      	b.n	800ae4a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ae36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ae3a:	b2db      	uxtb	r3, r3
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f004 fd04 	bl	800f84c <USBD_LL_StallEP>
 800ae44:	4603      	mov	r3, r0
 800ae46:	73fb      	strb	r3, [r7, #15]
      break;
 800ae48:	bf00      	nop
  }

  return ret;
 800ae4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3710      	adds	r7, #16
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b086      	sub	sp, #24
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	607a      	str	r2, [r7, #4]
 800ae60:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ae62:	2300      	movs	r3, #0
 800ae64:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ae66:	7afb      	ldrb	r3, [r7, #11]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d16e      	bne.n	800af4a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ae72:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ae7a:	2b03      	cmp	r3, #3
 800ae7c:	f040 8098 	bne.w	800afb0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	689a      	ldr	r2, [r3, #8]
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	68db      	ldr	r3, [r3, #12]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d913      	bls.n	800aeb4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	689a      	ldr	r2, [r3, #8]
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	68db      	ldr	r3, [r3, #12]
 800ae94:	1ad2      	subs	r2, r2, r3
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	68da      	ldr	r2, [r3, #12]
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	4293      	cmp	r3, r2
 800aea4:	bf28      	it	cs
 800aea6:	4613      	movcs	r3, r2
 800aea8:	461a      	mov	r2, r3
 800aeaa:	6879      	ldr	r1, [r7, #4]
 800aeac:	68f8      	ldr	r0, [r7, #12]
 800aeae:	f001 f984 	bl	800c1ba <USBD_CtlContinueRx>
 800aeb2:	e07d      	b.n	800afb0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aeba:	f003 031f 	and.w	r3, r3, #31
 800aebe:	2b02      	cmp	r3, #2
 800aec0:	d014      	beq.n	800aeec <USBD_LL_DataOutStage+0x98>
 800aec2:	2b02      	cmp	r3, #2
 800aec4:	d81d      	bhi.n	800af02 <USBD_LL_DataOutStage+0xae>
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d002      	beq.n	800aed0 <USBD_LL_DataOutStage+0x7c>
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d003      	beq.n	800aed6 <USBD_LL_DataOutStage+0x82>
 800aece:	e018      	b.n	800af02 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800aed0:	2300      	movs	r3, #0
 800aed2:	75bb      	strb	r3, [r7, #22]
            break;
 800aed4:	e018      	b.n	800af08 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800aedc:	b2db      	uxtb	r3, r3
 800aede:	4619      	mov	r1, r3
 800aee0:	68f8      	ldr	r0, [r7, #12]
 800aee2:	f000 fa5e 	bl	800b3a2 <USBD_CoreFindIF>
 800aee6:	4603      	mov	r3, r0
 800aee8:	75bb      	strb	r3, [r7, #22]
            break;
 800aeea:	e00d      	b.n	800af08 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	4619      	mov	r1, r3
 800aef6:	68f8      	ldr	r0, [r7, #12]
 800aef8:	f000 fa60 	bl	800b3bc <USBD_CoreFindEP>
 800aefc:	4603      	mov	r3, r0
 800aefe:	75bb      	strb	r3, [r7, #22]
            break;
 800af00:	e002      	b.n	800af08 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800af02:	2300      	movs	r3, #0
 800af04:	75bb      	strb	r3, [r7, #22]
            break;
 800af06:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800af08:	7dbb      	ldrb	r3, [r7, #22]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d119      	bne.n	800af42 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af14:	b2db      	uxtb	r3, r3
 800af16:	2b03      	cmp	r3, #3
 800af18:	d113      	bne.n	800af42 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800af1a:	7dba      	ldrb	r2, [r7, #22]
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	32ae      	adds	r2, #174	; 0xae
 800af20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af24:	691b      	ldr	r3, [r3, #16]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00b      	beq.n	800af42 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800af2a:	7dba      	ldrb	r2, [r7, #22]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800af32:	7dba      	ldrb	r2, [r7, #22]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	32ae      	adds	r2, #174	; 0xae
 800af38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af3c:	691b      	ldr	r3, [r3, #16]
 800af3e:	68f8      	ldr	r0, [r7, #12]
 800af40:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800af42:	68f8      	ldr	r0, [r7, #12]
 800af44:	f001 f94a 	bl	800c1dc <USBD_CtlSendStatus>
 800af48:	e032      	b.n	800afb0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800af4a:	7afb      	ldrb	r3, [r7, #11]
 800af4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af50:	b2db      	uxtb	r3, r3
 800af52:	4619      	mov	r1, r3
 800af54:	68f8      	ldr	r0, [r7, #12]
 800af56:	f000 fa31 	bl	800b3bc <USBD_CoreFindEP>
 800af5a:	4603      	mov	r3, r0
 800af5c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af5e:	7dbb      	ldrb	r3, [r7, #22]
 800af60:	2bff      	cmp	r3, #255	; 0xff
 800af62:	d025      	beq.n	800afb0 <USBD_LL_DataOutStage+0x15c>
 800af64:	7dbb      	ldrb	r3, [r7, #22]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d122      	bne.n	800afb0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af70:	b2db      	uxtb	r3, r3
 800af72:	2b03      	cmp	r3, #3
 800af74:	d117      	bne.n	800afa6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800af76:	7dba      	ldrb	r2, [r7, #22]
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	32ae      	adds	r2, #174	; 0xae
 800af7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af80:	699b      	ldr	r3, [r3, #24]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d00f      	beq.n	800afa6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800af86:	7dba      	ldrb	r2, [r7, #22]
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800af8e:	7dba      	ldrb	r2, [r7, #22]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	32ae      	adds	r2, #174	; 0xae
 800af94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af98:	699b      	ldr	r3, [r3, #24]
 800af9a:	7afa      	ldrb	r2, [r7, #11]
 800af9c:	4611      	mov	r1, r2
 800af9e:	68f8      	ldr	r0, [r7, #12]
 800afa0:	4798      	blx	r3
 800afa2:	4603      	mov	r3, r0
 800afa4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800afa6:	7dfb      	ldrb	r3, [r7, #23]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d001      	beq.n	800afb0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800afac:	7dfb      	ldrb	r3, [r7, #23]
 800afae:	e000      	b.n	800afb2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800afb0:	2300      	movs	r3, #0
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3718      	adds	r7, #24
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}

0800afba <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800afba:	b580      	push	{r7, lr}
 800afbc:	b086      	sub	sp, #24
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	60f8      	str	r0, [r7, #12]
 800afc2:	460b      	mov	r3, r1
 800afc4:	607a      	str	r2, [r7, #4]
 800afc6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800afc8:	7afb      	ldrb	r3, [r7, #11]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d16f      	bne.n	800b0ae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	3314      	adds	r3, #20
 800afd2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800afda:	2b02      	cmp	r3, #2
 800afdc:	d15a      	bne.n	800b094 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	689a      	ldr	r2, [r3, #8]
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d914      	bls.n	800b014 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	689a      	ldr	r2, [r3, #8]
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	68db      	ldr	r3, [r3, #12]
 800aff2:	1ad2      	subs	r2, r2, r3
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	461a      	mov	r2, r3
 800affe:	6879      	ldr	r1, [r7, #4]
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	f001 f8ac 	bl	800c15e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b006:	2300      	movs	r3, #0
 800b008:	2200      	movs	r2, #0
 800b00a:	2100      	movs	r1, #0
 800b00c:	68f8      	ldr	r0, [r7, #12]
 800b00e:	f004 fcc7 	bl	800f9a0 <USBD_LL_PrepareReceive>
 800b012:	e03f      	b.n	800b094 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	68da      	ldr	r2, [r3, #12]
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	689b      	ldr	r3, [r3, #8]
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d11c      	bne.n	800b05a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	685a      	ldr	r2, [r3, #4]
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b028:	429a      	cmp	r2, r3
 800b02a:	d316      	bcc.n	800b05a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	685a      	ldr	r2, [r3, #4]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b036:	429a      	cmp	r2, r3
 800b038:	d20f      	bcs.n	800b05a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b03a:	2200      	movs	r2, #0
 800b03c:	2100      	movs	r1, #0
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	f001 f88d 	bl	800c15e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2200      	movs	r2, #0
 800b048:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b04c:	2300      	movs	r3, #0
 800b04e:	2200      	movs	r2, #0
 800b050:	2100      	movs	r1, #0
 800b052:	68f8      	ldr	r0, [r7, #12]
 800b054:	f004 fca4 	bl	800f9a0 <USBD_LL_PrepareReceive>
 800b058:	e01c      	b.n	800b094 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b060:	b2db      	uxtb	r3, r3
 800b062:	2b03      	cmp	r3, #3
 800b064:	d10f      	bne.n	800b086 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b06c:	68db      	ldr	r3, [r3, #12]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d009      	beq.n	800b086 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2200      	movs	r2, #0
 800b076:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b080:	68db      	ldr	r3, [r3, #12]
 800b082:	68f8      	ldr	r0, [r7, #12]
 800b084:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b086:	2180      	movs	r1, #128	; 0x80
 800b088:	68f8      	ldr	r0, [r7, #12]
 800b08a:	f004 fbdf 	bl	800f84c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b08e:	68f8      	ldr	r0, [r7, #12]
 800b090:	f001 f8b7 	bl	800c202 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d03a      	beq.n	800b114 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b09e:	68f8      	ldr	r0, [r7, #12]
 800b0a0:	f7ff fe42 	bl	800ad28 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b0ac:	e032      	b.n	800b114 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b0ae:	7afb      	ldrb	r3, [r7, #11]
 800b0b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b0b4:	b2db      	uxtb	r3, r3
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	68f8      	ldr	r0, [r7, #12]
 800b0ba:	f000 f97f 	bl	800b3bc <USBD_CoreFindEP>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b0c2:	7dfb      	ldrb	r3, [r7, #23]
 800b0c4:	2bff      	cmp	r3, #255	; 0xff
 800b0c6:	d025      	beq.n	800b114 <USBD_LL_DataInStage+0x15a>
 800b0c8:	7dfb      	ldrb	r3, [r7, #23]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d122      	bne.n	800b114 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	2b03      	cmp	r3, #3
 800b0d8:	d11c      	bne.n	800b114 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b0da:	7dfa      	ldrb	r2, [r7, #23]
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	32ae      	adds	r2, #174	; 0xae
 800b0e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0e4:	695b      	ldr	r3, [r3, #20]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d014      	beq.n	800b114 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b0ea:	7dfa      	ldrb	r2, [r7, #23]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b0f2:	7dfa      	ldrb	r2, [r7, #23]
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	32ae      	adds	r2, #174	; 0xae
 800b0f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0fc:	695b      	ldr	r3, [r3, #20]
 800b0fe:	7afa      	ldrb	r2, [r7, #11]
 800b100:	4611      	mov	r1, r2
 800b102:	68f8      	ldr	r0, [r7, #12]
 800b104:	4798      	blx	r3
 800b106:	4603      	mov	r3, r0
 800b108:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b10a:	7dbb      	ldrb	r3, [r7, #22]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d001      	beq.n	800b114 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b110:	7dbb      	ldrb	r3, [r7, #22]
 800b112:	e000      	b.n	800b116 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b114:	2300      	movs	r3, #0
}
 800b116:	4618      	mov	r0, r3
 800b118:	3718      	adds	r7, #24
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}

0800b11e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b11e:	b580      	push	{r7, lr}
 800b120:	b084      	sub	sp, #16
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b126:	2300      	movs	r3, #0
 800b128:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2201      	movs	r2, #1
 800b12e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b156:	2b00      	cmp	r3, #0
 800b158:	d014      	beq.n	800b184 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d00e      	beq.n	800b184 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	6852      	ldr	r2, [r2, #4]
 800b172:	b2d2      	uxtb	r2, r2
 800b174:	4611      	mov	r1, r2
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	4798      	blx	r3
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d001      	beq.n	800b184 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b180:	2303      	movs	r3, #3
 800b182:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b184:	2340      	movs	r3, #64	; 0x40
 800b186:	2200      	movs	r2, #0
 800b188:	2100      	movs	r1, #0
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f004 fb19 	bl	800f7c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2201      	movs	r2, #1
 800b194:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2240      	movs	r2, #64	; 0x40
 800b19c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b1a0:	2340      	movs	r3, #64	; 0x40
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	2180      	movs	r1, #128	; 0x80
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f004 fb0b 	bl	800f7c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2240      	movs	r2, #64	; 0x40
 800b1b6:	621a      	str	r2, [r3, #32]

  return ret;
 800b1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3710      	adds	r7, #16
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}

0800b1c2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b1c2:	b480      	push	{r7}
 800b1c4:	b083      	sub	sp, #12
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
 800b1ca:	460b      	mov	r3, r1
 800b1cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	78fa      	ldrb	r2, [r7, #3]
 800b1d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b1d4:	2300      	movs	r3, #0
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	370c      	adds	r7, #12
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr

0800b1e2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b1e2:	b480      	push	{r7}
 800b1e4:	b083      	sub	sp, #12
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1f0:	b2da      	uxtb	r2, r3
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2204      	movs	r2, #4
 800b1fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b200:	2300      	movs	r3, #0
}
 800b202:	4618      	mov	r0, r3
 800b204:	370c      	adds	r7, #12
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr

0800b20e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b20e:	b480      	push	{r7}
 800b210:	b083      	sub	sp, #12
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b21c:	b2db      	uxtb	r3, r3
 800b21e:	2b04      	cmp	r3, #4
 800b220:	d106      	bne.n	800b230 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b228:	b2da      	uxtb	r2, r3
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b230:	2300      	movs	r3, #0
}
 800b232:	4618      	mov	r0, r3
 800b234:	370c      	adds	r7, #12
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr

0800b23e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b23e:	b580      	push	{r7, lr}
 800b240:	b082      	sub	sp, #8
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	2b03      	cmp	r3, #3
 800b250:	d110      	bne.n	800b274 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d00b      	beq.n	800b274 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b262:	69db      	ldr	r3, [r3, #28]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d005      	beq.n	800b274 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b26e:	69db      	ldr	r3, [r3, #28]
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b274:	2300      	movs	r3, #0
}
 800b276:	4618      	mov	r0, r3
 800b278:	3708      	adds	r7, #8
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}

0800b27e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b27e:	b580      	push	{r7, lr}
 800b280:	b082      	sub	sp, #8
 800b282:	af00      	add	r7, sp, #0
 800b284:	6078      	str	r0, [r7, #4]
 800b286:	460b      	mov	r3, r1
 800b288:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	32ae      	adds	r2, #174	; 0xae
 800b294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d101      	bne.n	800b2a0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b29c:	2303      	movs	r3, #3
 800b29e:	e01c      	b.n	800b2da <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	2b03      	cmp	r3, #3
 800b2aa:	d115      	bne.n	800b2d8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	32ae      	adds	r2, #174	; 0xae
 800b2b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ba:	6a1b      	ldr	r3, [r3, #32]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d00b      	beq.n	800b2d8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	32ae      	adds	r2, #174	; 0xae
 800b2ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ce:	6a1b      	ldr	r3, [r3, #32]
 800b2d0:	78fa      	ldrb	r2, [r7, #3]
 800b2d2:	4611      	mov	r1, r2
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b2d8:	2300      	movs	r3, #0
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3708      	adds	r7, #8
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}

0800b2e2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b2e2:	b580      	push	{r7, lr}
 800b2e4:	b082      	sub	sp, #8
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	6078      	str	r0, [r7, #4]
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	32ae      	adds	r2, #174	; 0xae
 800b2f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d101      	bne.n	800b304 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b300:	2303      	movs	r3, #3
 800b302:	e01c      	b.n	800b33e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b30a:	b2db      	uxtb	r3, r3
 800b30c:	2b03      	cmp	r3, #3
 800b30e:	d115      	bne.n	800b33c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	32ae      	adds	r2, #174	; 0xae
 800b31a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b320:	2b00      	cmp	r3, #0
 800b322:	d00b      	beq.n	800b33c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	32ae      	adds	r2, #174	; 0xae
 800b32e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b334:	78fa      	ldrb	r2, [r7, #3]
 800b336:	4611      	mov	r1, r2
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3708      	adds	r7, #8
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b346:	b480      	push	{r7}
 800b348:	b083      	sub	sp, #12
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b34e:	2300      	movs	r3, #0
}
 800b350:	4618      	mov	r0, r3
 800b352:	370c      	adds	r7, #12
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr

0800b35c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b364:	2300      	movs	r3, #0
 800b366:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2201      	movs	r2, #1
 800b36c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b376:	2b00      	cmp	r3, #0
 800b378:	d00e      	beq.n	800b398 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b380:	685b      	ldr	r3, [r3, #4]
 800b382:	687a      	ldr	r2, [r7, #4]
 800b384:	6852      	ldr	r2, [r2, #4]
 800b386:	b2d2      	uxtb	r2, r2
 800b388:	4611      	mov	r1, r2
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	4798      	blx	r3
 800b38e:	4603      	mov	r3, r0
 800b390:	2b00      	cmp	r3, #0
 800b392:	d001      	beq.n	800b398 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b394:	2303      	movs	r3, #3
 800b396:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b398:	7bfb      	ldrb	r3, [r7, #15]
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}

0800b3a2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b3a2:	b480      	push	{r7}
 800b3a4:	b083      	sub	sp, #12
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b3ae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr

0800b3bc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b3c8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	370c      	adds	r7, #12
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr

0800b3d6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b086      	sub	sp, #24
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
 800b3de:	460b      	mov	r3, r1
 800b3e0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	885b      	ldrh	r3, [r3, #2]
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d920      	bls.n	800b440 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	b29b      	uxth	r3, r3
 800b404:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b406:	e013      	b.n	800b430 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b408:	f107 030a 	add.w	r3, r7, #10
 800b40c:	4619      	mov	r1, r3
 800b40e:	6978      	ldr	r0, [r7, #20]
 800b410:	f000 f81b 	bl	800b44a <USBD_GetNextDesc>
 800b414:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	785b      	ldrb	r3, [r3, #1]
 800b41a:	2b05      	cmp	r3, #5
 800b41c:	d108      	bne.n	800b430 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	789b      	ldrb	r3, [r3, #2]
 800b426:	78fa      	ldrb	r2, [r7, #3]
 800b428:	429a      	cmp	r2, r3
 800b42a:	d008      	beq.n	800b43e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b42c:	2300      	movs	r3, #0
 800b42e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	885b      	ldrh	r3, [r3, #2]
 800b434:	b29a      	uxth	r2, r3
 800b436:	897b      	ldrh	r3, [r7, #10]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d8e5      	bhi.n	800b408 <USBD_GetEpDesc+0x32>
 800b43c:	e000      	b.n	800b440 <USBD_GetEpDesc+0x6a>
          break;
 800b43e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b440:	693b      	ldr	r3, [r7, #16]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3718      	adds	r7, #24
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}

0800b44a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b44a:	b480      	push	{r7}
 800b44c:	b085      	sub	sp, #20
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
 800b452:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	881a      	ldrh	r2, [r3, #0]
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	b29b      	uxth	r3, r3
 800b462:	4413      	add	r3, r2
 800b464:	b29a      	uxth	r2, r3
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	461a      	mov	r2, r3
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	4413      	add	r3, r2
 800b474:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b476:	68fb      	ldr	r3, [r7, #12]
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3714      	adds	r7, #20
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr

0800b484 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b484:	b480      	push	{r7}
 800b486:	b087      	sub	sp, #28
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	781b      	ldrb	r3, [r3, #0]
 800b494:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	3301      	adds	r3, #1
 800b49a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b4a2:	8a3b      	ldrh	r3, [r7, #16]
 800b4a4:	021b      	lsls	r3, r3, #8
 800b4a6:	b21a      	sxth	r2, r3
 800b4a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	b21b      	sxth	r3, r3
 800b4b0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b4b2:	89fb      	ldrh	r3, [r7, #14]
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	371c      	adds	r7, #28
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr

0800b4c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b084      	sub	sp, #16
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	781b      	ldrb	r3, [r3, #0]
 800b4d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b4d6:	2b40      	cmp	r3, #64	; 0x40
 800b4d8:	d005      	beq.n	800b4e6 <USBD_StdDevReq+0x26>
 800b4da:	2b40      	cmp	r3, #64	; 0x40
 800b4dc:	d857      	bhi.n	800b58e <USBD_StdDevReq+0xce>
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d00f      	beq.n	800b502 <USBD_StdDevReq+0x42>
 800b4e2:	2b20      	cmp	r3, #32
 800b4e4:	d153      	bne.n	800b58e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	32ae      	adds	r2, #174	; 0xae
 800b4f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4f4:	689b      	ldr	r3, [r3, #8]
 800b4f6:	6839      	ldr	r1, [r7, #0]
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	4798      	blx	r3
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	73fb      	strb	r3, [r7, #15]
      break;
 800b500:	e04a      	b.n	800b598 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	785b      	ldrb	r3, [r3, #1]
 800b506:	2b09      	cmp	r3, #9
 800b508:	d83b      	bhi.n	800b582 <USBD_StdDevReq+0xc2>
 800b50a:	a201      	add	r2, pc, #4	; (adr r2, 800b510 <USBD_StdDevReq+0x50>)
 800b50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b510:	0800b565 	.word	0x0800b565
 800b514:	0800b579 	.word	0x0800b579
 800b518:	0800b583 	.word	0x0800b583
 800b51c:	0800b56f 	.word	0x0800b56f
 800b520:	0800b583 	.word	0x0800b583
 800b524:	0800b543 	.word	0x0800b543
 800b528:	0800b539 	.word	0x0800b539
 800b52c:	0800b583 	.word	0x0800b583
 800b530:	0800b55b 	.word	0x0800b55b
 800b534:	0800b54d 	.word	0x0800b54d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b538:	6839      	ldr	r1, [r7, #0]
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 fa3c 	bl	800b9b8 <USBD_GetDescriptor>
          break;
 800b540:	e024      	b.n	800b58c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b542:	6839      	ldr	r1, [r7, #0]
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 fba1 	bl	800bc8c <USBD_SetAddress>
          break;
 800b54a:	e01f      	b.n	800b58c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b54c:	6839      	ldr	r1, [r7, #0]
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 fbe0 	bl	800bd14 <USBD_SetConfig>
 800b554:	4603      	mov	r3, r0
 800b556:	73fb      	strb	r3, [r7, #15]
          break;
 800b558:	e018      	b.n	800b58c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b55a:	6839      	ldr	r1, [r7, #0]
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f000 fc83 	bl	800be68 <USBD_GetConfig>
          break;
 800b562:	e013      	b.n	800b58c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b564:	6839      	ldr	r1, [r7, #0]
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 fcb4 	bl	800bed4 <USBD_GetStatus>
          break;
 800b56c:	e00e      	b.n	800b58c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b56e:	6839      	ldr	r1, [r7, #0]
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 fce3 	bl	800bf3c <USBD_SetFeature>
          break;
 800b576:	e009      	b.n	800b58c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b578:	6839      	ldr	r1, [r7, #0]
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f000 fd07 	bl	800bf8e <USBD_ClrFeature>
          break;
 800b580:	e004      	b.n	800b58c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b582:	6839      	ldr	r1, [r7, #0]
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 fd5e 	bl	800c046 <USBD_CtlError>
          break;
 800b58a:	bf00      	nop
      }
      break;
 800b58c:	e004      	b.n	800b598 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b58e:	6839      	ldr	r1, [r7, #0]
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 fd58 	bl	800c046 <USBD_CtlError>
      break;
 800b596:	bf00      	nop
  }

  return ret;
 800b598:	7bfb      	ldrb	r3, [r7, #15]
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3710      	adds	r7, #16
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop

0800b5a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b5ba:	2b40      	cmp	r3, #64	; 0x40
 800b5bc:	d005      	beq.n	800b5ca <USBD_StdItfReq+0x26>
 800b5be:	2b40      	cmp	r3, #64	; 0x40
 800b5c0:	d852      	bhi.n	800b668 <USBD_StdItfReq+0xc4>
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d001      	beq.n	800b5ca <USBD_StdItfReq+0x26>
 800b5c6:	2b20      	cmp	r3, #32
 800b5c8:	d14e      	bne.n	800b668 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	3b01      	subs	r3, #1
 800b5d4:	2b02      	cmp	r3, #2
 800b5d6:	d840      	bhi.n	800b65a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	889b      	ldrh	r3, [r3, #4]
 800b5dc:	b2db      	uxtb	r3, r3
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d836      	bhi.n	800b650 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	889b      	ldrh	r3, [r3, #4]
 800b5e6:	b2db      	uxtb	r3, r3
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f7ff fed9 	bl	800b3a2 <USBD_CoreFindIF>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b5f4:	7bbb      	ldrb	r3, [r7, #14]
 800b5f6:	2bff      	cmp	r3, #255	; 0xff
 800b5f8:	d01d      	beq.n	800b636 <USBD_StdItfReq+0x92>
 800b5fa:	7bbb      	ldrb	r3, [r7, #14]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d11a      	bne.n	800b636 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b600:	7bba      	ldrb	r2, [r7, #14]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	32ae      	adds	r2, #174	; 0xae
 800b606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d00f      	beq.n	800b630 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b610:	7bba      	ldrb	r2, [r7, #14]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b618:	7bba      	ldrb	r2, [r7, #14]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	32ae      	adds	r2, #174	; 0xae
 800b61e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b622:	689b      	ldr	r3, [r3, #8]
 800b624:	6839      	ldr	r1, [r7, #0]
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	4798      	blx	r3
 800b62a:	4603      	mov	r3, r0
 800b62c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b62e:	e004      	b.n	800b63a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b630:	2303      	movs	r3, #3
 800b632:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b634:	e001      	b.n	800b63a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b636:	2303      	movs	r3, #3
 800b638:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	88db      	ldrh	r3, [r3, #6]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d110      	bne.n	800b664 <USBD_StdItfReq+0xc0>
 800b642:	7bfb      	ldrb	r3, [r7, #15]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d10d      	bne.n	800b664 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f000 fdc7 	bl	800c1dc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b64e:	e009      	b.n	800b664 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b650:	6839      	ldr	r1, [r7, #0]
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 fcf7 	bl	800c046 <USBD_CtlError>
          break;
 800b658:	e004      	b.n	800b664 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b65a:	6839      	ldr	r1, [r7, #0]
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 fcf2 	bl	800c046 <USBD_CtlError>
          break;
 800b662:	e000      	b.n	800b666 <USBD_StdItfReq+0xc2>
          break;
 800b664:	bf00      	nop
      }
      break;
 800b666:	e004      	b.n	800b672 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b668:	6839      	ldr	r1, [r7, #0]
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 fceb 	bl	800c046 <USBD_CtlError>
      break;
 800b670:	bf00      	nop
  }

  return ret;
 800b672:	7bfb      	ldrb	r3, [r7, #15]
}
 800b674:	4618      	mov	r0, r3
 800b676:	3710      	adds	r7, #16
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b084      	sub	sp, #16
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b686:	2300      	movs	r3, #0
 800b688:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	889b      	ldrh	r3, [r3, #4]
 800b68e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	781b      	ldrb	r3, [r3, #0]
 800b694:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b698:	2b40      	cmp	r3, #64	; 0x40
 800b69a:	d007      	beq.n	800b6ac <USBD_StdEPReq+0x30>
 800b69c:	2b40      	cmp	r3, #64	; 0x40
 800b69e:	f200 817f 	bhi.w	800b9a0 <USBD_StdEPReq+0x324>
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d02a      	beq.n	800b6fc <USBD_StdEPReq+0x80>
 800b6a6:	2b20      	cmp	r3, #32
 800b6a8:	f040 817a 	bne.w	800b9a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b6ac:	7bbb      	ldrb	r3, [r7, #14]
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f7ff fe83 	bl	800b3bc <USBD_CoreFindEP>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b6ba:	7b7b      	ldrb	r3, [r7, #13]
 800b6bc:	2bff      	cmp	r3, #255	; 0xff
 800b6be:	f000 8174 	beq.w	800b9aa <USBD_StdEPReq+0x32e>
 800b6c2:	7b7b      	ldrb	r3, [r7, #13]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	f040 8170 	bne.w	800b9aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b6ca:	7b7a      	ldrb	r2, [r7, #13]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b6d2:	7b7a      	ldrb	r2, [r7, #13]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	32ae      	adds	r2, #174	; 0xae
 800b6d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6dc:	689b      	ldr	r3, [r3, #8]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	f000 8163 	beq.w	800b9aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b6e4:	7b7a      	ldrb	r2, [r7, #13]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	32ae      	adds	r2, #174	; 0xae
 800b6ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ee:	689b      	ldr	r3, [r3, #8]
 800b6f0:	6839      	ldr	r1, [r7, #0]
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	4798      	blx	r3
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b6fa:	e156      	b.n	800b9aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	785b      	ldrb	r3, [r3, #1]
 800b700:	2b03      	cmp	r3, #3
 800b702:	d008      	beq.n	800b716 <USBD_StdEPReq+0x9a>
 800b704:	2b03      	cmp	r3, #3
 800b706:	f300 8145 	bgt.w	800b994 <USBD_StdEPReq+0x318>
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	f000 809b 	beq.w	800b846 <USBD_StdEPReq+0x1ca>
 800b710:	2b01      	cmp	r3, #1
 800b712:	d03c      	beq.n	800b78e <USBD_StdEPReq+0x112>
 800b714:	e13e      	b.n	800b994 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	2b02      	cmp	r3, #2
 800b720:	d002      	beq.n	800b728 <USBD_StdEPReq+0xac>
 800b722:	2b03      	cmp	r3, #3
 800b724:	d016      	beq.n	800b754 <USBD_StdEPReq+0xd8>
 800b726:	e02c      	b.n	800b782 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b728:	7bbb      	ldrb	r3, [r7, #14]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d00d      	beq.n	800b74a <USBD_StdEPReq+0xce>
 800b72e:	7bbb      	ldrb	r3, [r7, #14]
 800b730:	2b80      	cmp	r3, #128	; 0x80
 800b732:	d00a      	beq.n	800b74a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b734:	7bbb      	ldrb	r3, [r7, #14]
 800b736:	4619      	mov	r1, r3
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f004 f887 	bl	800f84c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b73e:	2180      	movs	r1, #128	; 0x80
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f004 f883 	bl	800f84c <USBD_LL_StallEP>
 800b746:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b748:	e020      	b.n	800b78c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b74a:	6839      	ldr	r1, [r7, #0]
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 fc7a 	bl	800c046 <USBD_CtlError>
              break;
 800b752:	e01b      	b.n	800b78c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	885b      	ldrh	r3, [r3, #2]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d10e      	bne.n	800b77a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b75c:	7bbb      	ldrb	r3, [r7, #14]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d00b      	beq.n	800b77a <USBD_StdEPReq+0xfe>
 800b762:	7bbb      	ldrb	r3, [r7, #14]
 800b764:	2b80      	cmp	r3, #128	; 0x80
 800b766:	d008      	beq.n	800b77a <USBD_StdEPReq+0xfe>
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	88db      	ldrh	r3, [r3, #6]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d104      	bne.n	800b77a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b770:	7bbb      	ldrb	r3, [r7, #14]
 800b772:	4619      	mov	r1, r3
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f004 f869 	bl	800f84c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 fd2e 	bl	800c1dc <USBD_CtlSendStatus>

              break;
 800b780:	e004      	b.n	800b78c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b782:	6839      	ldr	r1, [r7, #0]
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f000 fc5e 	bl	800c046 <USBD_CtlError>
              break;
 800b78a:	bf00      	nop
          }
          break;
 800b78c:	e107      	b.n	800b99e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b794:	b2db      	uxtb	r3, r3
 800b796:	2b02      	cmp	r3, #2
 800b798:	d002      	beq.n	800b7a0 <USBD_StdEPReq+0x124>
 800b79a:	2b03      	cmp	r3, #3
 800b79c:	d016      	beq.n	800b7cc <USBD_StdEPReq+0x150>
 800b79e:	e04b      	b.n	800b838 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b7a0:	7bbb      	ldrb	r3, [r7, #14]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d00d      	beq.n	800b7c2 <USBD_StdEPReq+0x146>
 800b7a6:	7bbb      	ldrb	r3, [r7, #14]
 800b7a8:	2b80      	cmp	r3, #128	; 0x80
 800b7aa:	d00a      	beq.n	800b7c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b7ac:	7bbb      	ldrb	r3, [r7, #14]
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f004 f84b 	bl	800f84c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b7b6:	2180      	movs	r1, #128	; 0x80
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f004 f847 	bl	800f84c <USBD_LL_StallEP>
 800b7be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b7c0:	e040      	b.n	800b844 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b7c2:	6839      	ldr	r1, [r7, #0]
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 fc3e 	bl	800c046 <USBD_CtlError>
              break;
 800b7ca:	e03b      	b.n	800b844 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	885b      	ldrh	r3, [r3, #2]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d136      	bne.n	800b842 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b7d4:	7bbb      	ldrb	r3, [r7, #14]
 800b7d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d004      	beq.n	800b7e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b7de:	7bbb      	ldrb	r3, [r7, #14]
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f004 f851 	bl	800f88a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f000 fcf7 	bl	800c1dc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b7ee:	7bbb      	ldrb	r3, [r7, #14]
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f7ff fde2 	bl	800b3bc <USBD_CoreFindEP>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b7fc:	7b7b      	ldrb	r3, [r7, #13]
 800b7fe:	2bff      	cmp	r3, #255	; 0xff
 800b800:	d01f      	beq.n	800b842 <USBD_StdEPReq+0x1c6>
 800b802:	7b7b      	ldrb	r3, [r7, #13]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d11c      	bne.n	800b842 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b808:	7b7a      	ldrb	r2, [r7, #13]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b810:	7b7a      	ldrb	r2, [r7, #13]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	32ae      	adds	r2, #174	; 0xae
 800b816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d010      	beq.n	800b842 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b820:	7b7a      	ldrb	r2, [r7, #13]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	32ae      	adds	r2, #174	; 0xae
 800b826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b82a:	689b      	ldr	r3, [r3, #8]
 800b82c:	6839      	ldr	r1, [r7, #0]
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	4798      	blx	r3
 800b832:	4603      	mov	r3, r0
 800b834:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b836:	e004      	b.n	800b842 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b838:	6839      	ldr	r1, [r7, #0]
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f000 fc03 	bl	800c046 <USBD_CtlError>
              break;
 800b840:	e000      	b.n	800b844 <USBD_StdEPReq+0x1c8>
              break;
 800b842:	bf00      	nop
          }
          break;
 800b844:	e0ab      	b.n	800b99e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b84c:	b2db      	uxtb	r3, r3
 800b84e:	2b02      	cmp	r3, #2
 800b850:	d002      	beq.n	800b858 <USBD_StdEPReq+0x1dc>
 800b852:	2b03      	cmp	r3, #3
 800b854:	d032      	beq.n	800b8bc <USBD_StdEPReq+0x240>
 800b856:	e097      	b.n	800b988 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b858:	7bbb      	ldrb	r3, [r7, #14]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d007      	beq.n	800b86e <USBD_StdEPReq+0x1f2>
 800b85e:	7bbb      	ldrb	r3, [r7, #14]
 800b860:	2b80      	cmp	r3, #128	; 0x80
 800b862:	d004      	beq.n	800b86e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b864:	6839      	ldr	r1, [r7, #0]
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 fbed 	bl	800c046 <USBD_CtlError>
                break;
 800b86c:	e091      	b.n	800b992 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b86e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b872:	2b00      	cmp	r3, #0
 800b874:	da0b      	bge.n	800b88e <USBD_StdEPReq+0x212>
 800b876:	7bbb      	ldrb	r3, [r7, #14]
 800b878:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b87c:	4613      	mov	r3, r2
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	4413      	add	r3, r2
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	3310      	adds	r3, #16
 800b886:	687a      	ldr	r2, [r7, #4]
 800b888:	4413      	add	r3, r2
 800b88a:	3304      	adds	r3, #4
 800b88c:	e00b      	b.n	800b8a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b88e:	7bbb      	ldrb	r3, [r7, #14]
 800b890:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b894:	4613      	mov	r3, r2
 800b896:	009b      	lsls	r3, r3, #2
 800b898:	4413      	add	r3, r2
 800b89a:	009b      	lsls	r3, r3, #2
 800b89c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	4413      	add	r3, r2
 800b8a4:	3304      	adds	r3, #4
 800b8a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	2202      	movs	r2, #2
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f000 fc37 	bl	800c128 <USBD_CtlSendData>
              break;
 800b8ba:	e06a      	b.n	800b992 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b8bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	da11      	bge.n	800b8e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b8c4:	7bbb      	ldrb	r3, [r7, #14]
 800b8c6:	f003 020f 	and.w	r2, r3, #15
 800b8ca:	6879      	ldr	r1, [r7, #4]
 800b8cc:	4613      	mov	r3, r2
 800b8ce:	009b      	lsls	r3, r3, #2
 800b8d0:	4413      	add	r3, r2
 800b8d2:	009b      	lsls	r3, r3, #2
 800b8d4:	440b      	add	r3, r1
 800b8d6:	3324      	adds	r3, #36	; 0x24
 800b8d8:	881b      	ldrh	r3, [r3, #0]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d117      	bne.n	800b90e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b8de:	6839      	ldr	r1, [r7, #0]
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f000 fbb0 	bl	800c046 <USBD_CtlError>
                  break;
 800b8e6:	e054      	b.n	800b992 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b8e8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ea:	f003 020f 	and.w	r2, r3, #15
 800b8ee:	6879      	ldr	r1, [r7, #4]
 800b8f0:	4613      	mov	r3, r2
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	4413      	add	r3, r2
 800b8f6:	009b      	lsls	r3, r3, #2
 800b8f8:	440b      	add	r3, r1
 800b8fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b8fe:	881b      	ldrh	r3, [r3, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d104      	bne.n	800b90e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b904:	6839      	ldr	r1, [r7, #0]
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 fb9d 	bl	800c046 <USBD_CtlError>
                  break;
 800b90c:	e041      	b.n	800b992 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b90e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b912:	2b00      	cmp	r3, #0
 800b914:	da0b      	bge.n	800b92e <USBD_StdEPReq+0x2b2>
 800b916:	7bbb      	ldrb	r3, [r7, #14]
 800b918:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b91c:	4613      	mov	r3, r2
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	4413      	add	r3, r2
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	3310      	adds	r3, #16
 800b926:	687a      	ldr	r2, [r7, #4]
 800b928:	4413      	add	r3, r2
 800b92a:	3304      	adds	r3, #4
 800b92c:	e00b      	b.n	800b946 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b92e:	7bbb      	ldrb	r3, [r7, #14]
 800b930:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b934:	4613      	mov	r3, r2
 800b936:	009b      	lsls	r3, r3, #2
 800b938:	4413      	add	r3, r2
 800b93a:	009b      	lsls	r3, r3, #2
 800b93c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	4413      	add	r3, r2
 800b944:	3304      	adds	r3, #4
 800b946:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b948:	7bbb      	ldrb	r3, [r7, #14]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d002      	beq.n	800b954 <USBD_StdEPReq+0x2d8>
 800b94e:	7bbb      	ldrb	r3, [r7, #14]
 800b950:	2b80      	cmp	r3, #128	; 0x80
 800b952:	d103      	bne.n	800b95c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	2200      	movs	r2, #0
 800b958:	601a      	str	r2, [r3, #0]
 800b95a:	e00e      	b.n	800b97a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b95c:	7bbb      	ldrb	r3, [r7, #14]
 800b95e:	4619      	mov	r1, r3
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f003 ffb1 	bl	800f8c8 <USBD_LL_IsStallEP>
 800b966:	4603      	mov	r3, r0
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d003      	beq.n	800b974 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	2201      	movs	r2, #1
 800b970:	601a      	str	r2, [r3, #0]
 800b972:	e002      	b.n	800b97a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	2200      	movs	r2, #0
 800b978:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	2202      	movs	r2, #2
 800b97e:	4619      	mov	r1, r3
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f000 fbd1 	bl	800c128 <USBD_CtlSendData>
              break;
 800b986:	e004      	b.n	800b992 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b988:	6839      	ldr	r1, [r7, #0]
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 fb5b 	bl	800c046 <USBD_CtlError>
              break;
 800b990:	bf00      	nop
          }
          break;
 800b992:	e004      	b.n	800b99e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b994:	6839      	ldr	r1, [r7, #0]
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 fb55 	bl	800c046 <USBD_CtlError>
          break;
 800b99c:	bf00      	nop
      }
      break;
 800b99e:	e005      	b.n	800b9ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b9a0:	6839      	ldr	r1, [r7, #0]
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 fb4f 	bl	800c046 <USBD_CtlError>
      break;
 800b9a8:	e000      	b.n	800b9ac <USBD_StdEPReq+0x330>
      break;
 800b9aa:	bf00      	nop
  }

  return ret;
 800b9ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3710      	adds	r7, #16
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}
	...

0800b9b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	885b      	ldrh	r3, [r3, #2]
 800b9d2:	0a1b      	lsrs	r3, r3, #8
 800b9d4:	b29b      	uxth	r3, r3
 800b9d6:	3b01      	subs	r3, #1
 800b9d8:	2b06      	cmp	r3, #6
 800b9da:	f200 8128 	bhi.w	800bc2e <USBD_GetDescriptor+0x276>
 800b9de:	a201      	add	r2, pc, #4	; (adr r2, 800b9e4 <USBD_GetDescriptor+0x2c>)
 800b9e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9e4:	0800ba01 	.word	0x0800ba01
 800b9e8:	0800ba19 	.word	0x0800ba19
 800b9ec:	0800ba59 	.word	0x0800ba59
 800b9f0:	0800bc2f 	.word	0x0800bc2f
 800b9f4:	0800bc2f 	.word	0x0800bc2f
 800b9f8:	0800bbcf 	.word	0x0800bbcf
 800b9fc:	0800bbfb 	.word	0x0800bbfb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	687a      	ldr	r2, [r7, #4]
 800ba0a:	7c12      	ldrb	r2, [r2, #16]
 800ba0c:	f107 0108 	add.w	r1, r7, #8
 800ba10:	4610      	mov	r0, r2
 800ba12:	4798      	blx	r3
 800ba14:	60f8      	str	r0, [r7, #12]
      break;
 800ba16:	e112      	b.n	800bc3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	7c1b      	ldrb	r3, [r3, #16]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d10d      	bne.n	800ba3c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba28:	f107 0208 	add.w	r2, r7, #8
 800ba2c:	4610      	mov	r0, r2
 800ba2e:	4798      	blx	r3
 800ba30:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	3301      	adds	r3, #1
 800ba36:	2202      	movs	r2, #2
 800ba38:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ba3a:	e100      	b.n	800bc3e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba44:	f107 0208 	add.w	r2, r7, #8
 800ba48:	4610      	mov	r0, r2
 800ba4a:	4798      	blx	r3
 800ba4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	3301      	adds	r3, #1
 800ba52:	2202      	movs	r2, #2
 800ba54:	701a      	strb	r2, [r3, #0]
      break;
 800ba56:	e0f2      	b.n	800bc3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	885b      	ldrh	r3, [r3, #2]
 800ba5c:	b2db      	uxtb	r3, r3
 800ba5e:	2b05      	cmp	r3, #5
 800ba60:	f200 80ac 	bhi.w	800bbbc <USBD_GetDescriptor+0x204>
 800ba64:	a201      	add	r2, pc, #4	; (adr r2, 800ba6c <USBD_GetDescriptor+0xb4>)
 800ba66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba6a:	bf00      	nop
 800ba6c:	0800ba85 	.word	0x0800ba85
 800ba70:	0800bab9 	.word	0x0800bab9
 800ba74:	0800baed 	.word	0x0800baed
 800ba78:	0800bb21 	.word	0x0800bb21
 800ba7c:	0800bb55 	.word	0x0800bb55
 800ba80:	0800bb89 	.word	0x0800bb89
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d00b      	beq.n	800baa8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba96:	685b      	ldr	r3, [r3, #4]
 800ba98:	687a      	ldr	r2, [r7, #4]
 800ba9a:	7c12      	ldrb	r2, [r2, #16]
 800ba9c:	f107 0108 	add.w	r1, r7, #8
 800baa0:	4610      	mov	r0, r2
 800baa2:	4798      	blx	r3
 800baa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800baa6:	e091      	b.n	800bbcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800baa8:	6839      	ldr	r1, [r7, #0]
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f000 facb 	bl	800c046 <USBD_CtlError>
            err++;
 800bab0:	7afb      	ldrb	r3, [r7, #11]
 800bab2:	3301      	adds	r3, #1
 800bab4:	72fb      	strb	r3, [r7, #11]
          break;
 800bab6:	e089      	b.n	800bbcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800babe:	689b      	ldr	r3, [r3, #8]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d00b      	beq.n	800badc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800baca:	689b      	ldr	r3, [r3, #8]
 800bacc:	687a      	ldr	r2, [r7, #4]
 800bace:	7c12      	ldrb	r2, [r2, #16]
 800bad0:	f107 0108 	add.w	r1, r7, #8
 800bad4:	4610      	mov	r0, r2
 800bad6:	4798      	blx	r3
 800bad8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bada:	e077      	b.n	800bbcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800badc:	6839      	ldr	r1, [r7, #0]
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 fab1 	bl	800c046 <USBD_CtlError>
            err++;
 800bae4:	7afb      	ldrb	r3, [r7, #11]
 800bae6:	3301      	adds	r3, #1
 800bae8:	72fb      	strb	r3, [r7, #11]
          break;
 800baea:	e06f      	b.n	800bbcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800baf2:	68db      	ldr	r3, [r3, #12]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d00b      	beq.n	800bb10 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bafe:	68db      	ldr	r3, [r3, #12]
 800bb00:	687a      	ldr	r2, [r7, #4]
 800bb02:	7c12      	ldrb	r2, [r2, #16]
 800bb04:	f107 0108 	add.w	r1, r7, #8
 800bb08:	4610      	mov	r0, r2
 800bb0a:	4798      	blx	r3
 800bb0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb0e:	e05d      	b.n	800bbcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb10:	6839      	ldr	r1, [r7, #0]
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 fa97 	bl	800c046 <USBD_CtlError>
            err++;
 800bb18:	7afb      	ldrb	r3, [r7, #11]
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	72fb      	strb	r3, [r7, #11]
          break;
 800bb1e:	e055      	b.n	800bbcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb26:	691b      	ldr	r3, [r3, #16]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d00b      	beq.n	800bb44 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb32:	691b      	ldr	r3, [r3, #16]
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	7c12      	ldrb	r2, [r2, #16]
 800bb38:	f107 0108 	add.w	r1, r7, #8
 800bb3c:	4610      	mov	r0, r2
 800bb3e:	4798      	blx	r3
 800bb40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb42:	e043      	b.n	800bbcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb44:	6839      	ldr	r1, [r7, #0]
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f000 fa7d 	bl	800c046 <USBD_CtlError>
            err++;
 800bb4c:	7afb      	ldrb	r3, [r7, #11]
 800bb4e:	3301      	adds	r3, #1
 800bb50:	72fb      	strb	r3, [r7, #11]
          break;
 800bb52:	e03b      	b.n	800bbcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb5a:	695b      	ldr	r3, [r3, #20]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d00b      	beq.n	800bb78 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb66:	695b      	ldr	r3, [r3, #20]
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	7c12      	ldrb	r2, [r2, #16]
 800bb6c:	f107 0108 	add.w	r1, r7, #8
 800bb70:	4610      	mov	r0, r2
 800bb72:	4798      	blx	r3
 800bb74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb76:	e029      	b.n	800bbcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb78:	6839      	ldr	r1, [r7, #0]
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f000 fa63 	bl	800c046 <USBD_CtlError>
            err++;
 800bb80:	7afb      	ldrb	r3, [r7, #11]
 800bb82:	3301      	adds	r3, #1
 800bb84:	72fb      	strb	r3, [r7, #11]
          break;
 800bb86:	e021      	b.n	800bbcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb8e:	699b      	ldr	r3, [r3, #24]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d00b      	beq.n	800bbac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb9a:	699b      	ldr	r3, [r3, #24]
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	7c12      	ldrb	r2, [r2, #16]
 800bba0:	f107 0108 	add.w	r1, r7, #8
 800bba4:	4610      	mov	r0, r2
 800bba6:	4798      	blx	r3
 800bba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbaa:	e00f      	b.n	800bbcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bbac:	6839      	ldr	r1, [r7, #0]
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f000 fa49 	bl	800c046 <USBD_CtlError>
            err++;
 800bbb4:	7afb      	ldrb	r3, [r7, #11]
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	72fb      	strb	r3, [r7, #11]
          break;
 800bbba:	e007      	b.n	800bbcc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bbbc:	6839      	ldr	r1, [r7, #0]
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f000 fa41 	bl	800c046 <USBD_CtlError>
          err++;
 800bbc4:	7afb      	ldrb	r3, [r7, #11]
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bbca:	bf00      	nop
      }
      break;
 800bbcc:	e037      	b.n	800bc3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	7c1b      	ldrb	r3, [r3, #16]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d109      	bne.n	800bbea <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbde:	f107 0208 	add.w	r2, r7, #8
 800bbe2:	4610      	mov	r0, r2
 800bbe4:	4798      	blx	r3
 800bbe6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bbe8:	e029      	b.n	800bc3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bbea:	6839      	ldr	r1, [r7, #0]
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f000 fa2a 	bl	800c046 <USBD_CtlError>
        err++;
 800bbf2:	7afb      	ldrb	r3, [r7, #11]
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	72fb      	strb	r3, [r7, #11]
      break;
 800bbf8:	e021      	b.n	800bc3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	7c1b      	ldrb	r3, [r3, #16]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d10d      	bne.n	800bc1e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc0a:	f107 0208 	add.w	r2, r7, #8
 800bc0e:	4610      	mov	r0, r2
 800bc10:	4798      	blx	r3
 800bc12:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	3301      	adds	r3, #1
 800bc18:	2207      	movs	r2, #7
 800bc1a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc1c:	e00f      	b.n	800bc3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bc1e:	6839      	ldr	r1, [r7, #0]
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f000 fa10 	bl	800c046 <USBD_CtlError>
        err++;
 800bc26:	7afb      	ldrb	r3, [r7, #11]
 800bc28:	3301      	adds	r3, #1
 800bc2a:	72fb      	strb	r3, [r7, #11]
      break;
 800bc2c:	e007      	b.n	800bc3e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bc2e:	6839      	ldr	r1, [r7, #0]
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 fa08 	bl	800c046 <USBD_CtlError>
      err++;
 800bc36:	7afb      	ldrb	r3, [r7, #11]
 800bc38:	3301      	adds	r3, #1
 800bc3a:	72fb      	strb	r3, [r7, #11]
      break;
 800bc3c:	bf00      	nop
  }

  if (err != 0U)
 800bc3e:	7afb      	ldrb	r3, [r7, #11]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d11e      	bne.n	800bc82 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	88db      	ldrh	r3, [r3, #6]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d016      	beq.n	800bc7a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bc4c:	893b      	ldrh	r3, [r7, #8]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d00e      	beq.n	800bc70 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	88da      	ldrh	r2, [r3, #6]
 800bc56:	893b      	ldrh	r3, [r7, #8]
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	bf28      	it	cs
 800bc5c:	4613      	movcs	r3, r2
 800bc5e:	b29b      	uxth	r3, r3
 800bc60:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bc62:	893b      	ldrh	r3, [r7, #8]
 800bc64:	461a      	mov	r2, r3
 800bc66:	68f9      	ldr	r1, [r7, #12]
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 fa5d 	bl	800c128 <USBD_CtlSendData>
 800bc6e:	e009      	b.n	800bc84 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bc70:	6839      	ldr	r1, [r7, #0]
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 f9e7 	bl	800c046 <USBD_CtlError>
 800bc78:	e004      	b.n	800bc84 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f000 faae 	bl	800c1dc <USBD_CtlSendStatus>
 800bc80:	e000      	b.n	800bc84 <USBD_GetDescriptor+0x2cc>
    return;
 800bc82:	bf00      	nop
  }
}
 800bc84:	3710      	adds	r7, #16
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
 800bc8a:	bf00      	nop

0800bc8c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b084      	sub	sp, #16
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	889b      	ldrh	r3, [r3, #4]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d131      	bne.n	800bd02 <USBD_SetAddress+0x76>
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	88db      	ldrh	r3, [r3, #6]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d12d      	bne.n	800bd02 <USBD_SetAddress+0x76>
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	885b      	ldrh	r3, [r3, #2]
 800bcaa:	2b7f      	cmp	r3, #127	; 0x7f
 800bcac:	d829      	bhi.n	800bd02 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	885b      	ldrh	r3, [r3, #2]
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcb8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	2b03      	cmp	r3, #3
 800bcc4:	d104      	bne.n	800bcd0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bcc6:	6839      	ldr	r1, [r7, #0]
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f000 f9bc 	bl	800c046 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcce:	e01d      	b.n	800bd0c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	7bfa      	ldrb	r2, [r7, #15]
 800bcd4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bcd8:	7bfb      	ldrb	r3, [r7, #15]
 800bcda:	4619      	mov	r1, r3
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f003 fe1f 	bl	800f920 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 fa7a 	bl	800c1dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bce8:	7bfb      	ldrb	r3, [r7, #15]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d004      	beq.n	800bcf8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2202      	movs	r2, #2
 800bcf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcf6:	e009      	b.n	800bd0c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd00:	e004      	b.n	800bd0c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bd02:	6839      	ldr	r1, [r7, #0]
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f000 f99e 	bl	800c046 <USBD_CtlError>
  }
}
 800bd0a:	bf00      	nop
 800bd0c:	bf00      	nop
 800bd0e:	3710      	adds	r7, #16
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b084      	sub	sp, #16
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	885b      	ldrh	r3, [r3, #2]
 800bd26:	b2da      	uxtb	r2, r3
 800bd28:	4b4e      	ldr	r3, [pc, #312]	; (800be64 <USBD_SetConfig+0x150>)
 800bd2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bd2c:	4b4d      	ldr	r3, [pc, #308]	; (800be64 <USBD_SetConfig+0x150>)
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	d905      	bls.n	800bd40 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bd34:	6839      	ldr	r1, [r7, #0]
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f000 f985 	bl	800c046 <USBD_CtlError>
    return USBD_FAIL;
 800bd3c:	2303      	movs	r3, #3
 800bd3e:	e08c      	b.n	800be5a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd46:	b2db      	uxtb	r3, r3
 800bd48:	2b02      	cmp	r3, #2
 800bd4a:	d002      	beq.n	800bd52 <USBD_SetConfig+0x3e>
 800bd4c:	2b03      	cmp	r3, #3
 800bd4e:	d029      	beq.n	800bda4 <USBD_SetConfig+0x90>
 800bd50:	e075      	b.n	800be3e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bd52:	4b44      	ldr	r3, [pc, #272]	; (800be64 <USBD_SetConfig+0x150>)
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d020      	beq.n	800bd9c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bd5a:	4b42      	ldr	r3, [pc, #264]	; (800be64 <USBD_SetConfig+0x150>)
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	461a      	mov	r2, r3
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bd64:	4b3f      	ldr	r3, [pc, #252]	; (800be64 <USBD_SetConfig+0x150>)
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	4619      	mov	r1, r3
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f7fe ffe7 	bl	800ad3e <USBD_SetClassConfig>
 800bd70:	4603      	mov	r3, r0
 800bd72:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bd74:	7bfb      	ldrb	r3, [r7, #15]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d008      	beq.n	800bd8c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bd7a:	6839      	ldr	r1, [r7, #0]
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f000 f962 	bl	800c046 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2202      	movs	r2, #2
 800bd86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bd8a:	e065      	b.n	800be58 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f000 fa25 	bl	800c1dc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2203      	movs	r2, #3
 800bd96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bd9a:	e05d      	b.n	800be58 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f000 fa1d 	bl	800c1dc <USBD_CtlSendStatus>
      break;
 800bda2:	e059      	b.n	800be58 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bda4:	4b2f      	ldr	r3, [pc, #188]	; (800be64 <USBD_SetConfig+0x150>)
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d112      	bne.n	800bdd2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2202      	movs	r2, #2
 800bdb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bdb4:	4b2b      	ldr	r3, [pc, #172]	; (800be64 <USBD_SetConfig+0x150>)
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	461a      	mov	r2, r3
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bdbe:	4b29      	ldr	r3, [pc, #164]	; (800be64 <USBD_SetConfig+0x150>)
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	4619      	mov	r1, r3
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f7fe ffd6 	bl	800ad76 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f000 fa06 	bl	800c1dc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bdd0:	e042      	b.n	800be58 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bdd2:	4b24      	ldr	r3, [pc, #144]	; (800be64 <USBD_SetConfig+0x150>)
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d02a      	beq.n	800be36 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	b2db      	uxtb	r3, r3
 800bde6:	4619      	mov	r1, r3
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f7fe ffc4 	bl	800ad76 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bdee:	4b1d      	ldr	r3, [pc, #116]	; (800be64 <USBD_SetConfig+0x150>)
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	461a      	mov	r2, r3
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bdf8:	4b1a      	ldr	r3, [pc, #104]	; (800be64 <USBD_SetConfig+0x150>)
 800bdfa:	781b      	ldrb	r3, [r3, #0]
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f7fe ff9d 	bl	800ad3e <USBD_SetClassConfig>
 800be04:	4603      	mov	r3, r0
 800be06:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800be08:	7bfb      	ldrb	r3, [r7, #15]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d00f      	beq.n	800be2e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800be0e:	6839      	ldr	r1, [r7, #0]
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f000 f918 	bl	800c046 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	b2db      	uxtb	r3, r3
 800be1c:	4619      	mov	r1, r3
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f7fe ffa9 	bl	800ad76 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2202      	movs	r2, #2
 800be28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800be2c:	e014      	b.n	800be58 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f000 f9d4 	bl	800c1dc <USBD_CtlSendStatus>
      break;
 800be34:	e010      	b.n	800be58 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 f9d0 	bl	800c1dc <USBD_CtlSendStatus>
      break;
 800be3c:	e00c      	b.n	800be58 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800be3e:	6839      	ldr	r1, [r7, #0]
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f000 f900 	bl	800c046 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800be46:	4b07      	ldr	r3, [pc, #28]	; (800be64 <USBD_SetConfig+0x150>)
 800be48:	781b      	ldrb	r3, [r3, #0]
 800be4a:	4619      	mov	r1, r3
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f7fe ff92 	bl	800ad76 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800be52:	2303      	movs	r3, #3
 800be54:	73fb      	strb	r3, [r7, #15]
      break;
 800be56:	bf00      	nop
  }

  return ret;
 800be58:	7bfb      	ldrb	r3, [r7, #15]
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3710      	adds	r7, #16
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
 800be62:	bf00      	nop
 800be64:	200008b8 	.word	0x200008b8

0800be68 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	88db      	ldrh	r3, [r3, #6]
 800be76:	2b01      	cmp	r3, #1
 800be78:	d004      	beq.n	800be84 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800be7a:	6839      	ldr	r1, [r7, #0]
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f000 f8e2 	bl	800c046 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800be82:	e023      	b.n	800becc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be8a:	b2db      	uxtb	r3, r3
 800be8c:	2b02      	cmp	r3, #2
 800be8e:	dc02      	bgt.n	800be96 <USBD_GetConfig+0x2e>
 800be90:	2b00      	cmp	r3, #0
 800be92:	dc03      	bgt.n	800be9c <USBD_GetConfig+0x34>
 800be94:	e015      	b.n	800bec2 <USBD_GetConfig+0x5a>
 800be96:	2b03      	cmp	r3, #3
 800be98:	d00b      	beq.n	800beb2 <USBD_GetConfig+0x4a>
 800be9a:	e012      	b.n	800bec2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2200      	movs	r2, #0
 800bea0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	3308      	adds	r3, #8
 800bea6:	2201      	movs	r2, #1
 800bea8:	4619      	mov	r1, r3
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 f93c 	bl	800c128 <USBD_CtlSendData>
        break;
 800beb0:	e00c      	b.n	800becc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	3304      	adds	r3, #4
 800beb6:	2201      	movs	r2, #1
 800beb8:	4619      	mov	r1, r3
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f000 f934 	bl	800c128 <USBD_CtlSendData>
        break;
 800bec0:	e004      	b.n	800becc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bec2:	6839      	ldr	r1, [r7, #0]
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 f8be 	bl	800c046 <USBD_CtlError>
        break;
 800beca:	bf00      	nop
}
 800becc:	bf00      	nop
 800bece:	3708      	adds	r7, #8
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b082      	sub	sp, #8
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bee4:	b2db      	uxtb	r3, r3
 800bee6:	3b01      	subs	r3, #1
 800bee8:	2b02      	cmp	r3, #2
 800beea:	d81e      	bhi.n	800bf2a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	88db      	ldrh	r3, [r3, #6]
 800bef0:	2b02      	cmp	r3, #2
 800bef2:	d004      	beq.n	800befe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bef4:	6839      	ldr	r1, [r7, #0]
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 f8a5 	bl	800c046 <USBD_CtlError>
        break;
 800befc:	e01a      	b.n	800bf34 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2201      	movs	r2, #1
 800bf02:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d005      	beq.n	800bf1a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	68db      	ldr	r3, [r3, #12]
 800bf12:	f043 0202 	orr.w	r2, r3, #2
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	330c      	adds	r3, #12
 800bf1e:	2202      	movs	r2, #2
 800bf20:	4619      	mov	r1, r3
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f000 f900 	bl	800c128 <USBD_CtlSendData>
      break;
 800bf28:	e004      	b.n	800bf34 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bf2a:	6839      	ldr	r1, [r7, #0]
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f000 f88a 	bl	800c046 <USBD_CtlError>
      break;
 800bf32:	bf00      	nop
  }
}
 800bf34:	bf00      	nop
 800bf36:	3708      	adds	r7, #8
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	885b      	ldrh	r3, [r3, #2]
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d107      	bne.n	800bf5e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2201      	movs	r2, #1
 800bf52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f000 f940 	bl	800c1dc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bf5c:	e013      	b.n	800bf86 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	885b      	ldrh	r3, [r3, #2]
 800bf62:	2b02      	cmp	r3, #2
 800bf64:	d10b      	bne.n	800bf7e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	889b      	ldrh	r3, [r3, #4]
 800bf6a:	0a1b      	lsrs	r3, r3, #8
 800bf6c:	b29b      	uxth	r3, r3
 800bf6e:	b2da      	uxtb	r2, r3
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 f930 	bl	800c1dc <USBD_CtlSendStatus>
}
 800bf7c:	e003      	b.n	800bf86 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bf7e:	6839      	ldr	r1, [r7, #0]
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 f860 	bl	800c046 <USBD_CtlError>
}
 800bf86:	bf00      	nop
 800bf88:	3708      	adds	r7, #8
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}

0800bf8e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf8e:	b580      	push	{r7, lr}
 800bf90:	b082      	sub	sp, #8
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
 800bf96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	3b01      	subs	r3, #1
 800bfa2:	2b02      	cmp	r3, #2
 800bfa4:	d80b      	bhi.n	800bfbe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	885b      	ldrh	r3, [r3, #2]
 800bfaa:	2b01      	cmp	r3, #1
 800bfac:	d10c      	bne.n	800bfc8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f000 f910 	bl	800c1dc <USBD_CtlSendStatus>
      }
      break;
 800bfbc:	e004      	b.n	800bfc8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bfbe:	6839      	ldr	r1, [r7, #0]
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 f840 	bl	800c046 <USBD_CtlError>
      break;
 800bfc6:	e000      	b.n	800bfca <USBD_ClrFeature+0x3c>
      break;
 800bfc8:	bf00      	nop
  }
}
 800bfca:	bf00      	nop
 800bfcc:	3708      	adds	r7, #8
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}

0800bfd2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bfd2:	b580      	push	{r7, lr}
 800bfd4:	b084      	sub	sp, #16
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	6078      	str	r0, [r7, #4]
 800bfda:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	781a      	ldrb	r2, [r3, #0]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	3301      	adds	r3, #1
 800bfec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	781a      	ldrb	r2, [r3, #0]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	3301      	adds	r3, #1
 800bffa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bffc:	68f8      	ldr	r0, [r7, #12]
 800bffe:	f7ff fa41 	bl	800b484 <SWAPBYTE>
 800c002:	4603      	mov	r3, r0
 800c004:	461a      	mov	r2, r3
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	3301      	adds	r3, #1
 800c00e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	3301      	adds	r3, #1
 800c014:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c016:	68f8      	ldr	r0, [r7, #12]
 800c018:	f7ff fa34 	bl	800b484 <SWAPBYTE>
 800c01c:	4603      	mov	r3, r0
 800c01e:	461a      	mov	r2, r3
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	3301      	adds	r3, #1
 800c028:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	3301      	adds	r3, #1
 800c02e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c030:	68f8      	ldr	r0, [r7, #12]
 800c032:	f7ff fa27 	bl	800b484 <SWAPBYTE>
 800c036:	4603      	mov	r3, r0
 800c038:	461a      	mov	r2, r3
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	80da      	strh	r2, [r3, #6]
}
 800c03e:	bf00      	nop
 800c040:	3710      	adds	r7, #16
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}

0800c046 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c046:	b580      	push	{r7, lr}
 800c048:	b082      	sub	sp, #8
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	6078      	str	r0, [r7, #4]
 800c04e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c050:	2180      	movs	r1, #128	; 0x80
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f003 fbfa 	bl	800f84c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c058:	2100      	movs	r1, #0
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f003 fbf6 	bl	800f84c <USBD_LL_StallEP>
}
 800c060:	bf00      	nop
 800c062:	3708      	adds	r7, #8
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}

0800c068 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b086      	sub	sp, #24
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	60f8      	str	r0, [r7, #12]
 800c070:	60b9      	str	r1, [r7, #8]
 800c072:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c074:	2300      	movs	r3, #0
 800c076:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d036      	beq.n	800c0ec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c082:	6938      	ldr	r0, [r7, #16]
 800c084:	f000 f836 	bl	800c0f4 <USBD_GetLen>
 800c088:	4603      	mov	r3, r0
 800c08a:	3301      	adds	r3, #1
 800c08c:	b29b      	uxth	r3, r3
 800c08e:	005b      	lsls	r3, r3, #1
 800c090:	b29a      	uxth	r2, r3
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c096:	7dfb      	ldrb	r3, [r7, #23]
 800c098:	68ba      	ldr	r2, [r7, #8]
 800c09a:	4413      	add	r3, r2
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	7812      	ldrb	r2, [r2, #0]
 800c0a0:	701a      	strb	r2, [r3, #0]
  idx++;
 800c0a2:	7dfb      	ldrb	r3, [r7, #23]
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c0a8:	7dfb      	ldrb	r3, [r7, #23]
 800c0aa:	68ba      	ldr	r2, [r7, #8]
 800c0ac:	4413      	add	r3, r2
 800c0ae:	2203      	movs	r2, #3
 800c0b0:	701a      	strb	r2, [r3, #0]
  idx++;
 800c0b2:	7dfb      	ldrb	r3, [r7, #23]
 800c0b4:	3301      	adds	r3, #1
 800c0b6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c0b8:	e013      	b.n	800c0e2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c0ba:	7dfb      	ldrb	r3, [r7, #23]
 800c0bc:	68ba      	ldr	r2, [r7, #8]
 800c0be:	4413      	add	r3, r2
 800c0c0:	693a      	ldr	r2, [r7, #16]
 800c0c2:	7812      	ldrb	r2, [r2, #0]
 800c0c4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	613b      	str	r3, [r7, #16]
    idx++;
 800c0cc:	7dfb      	ldrb	r3, [r7, #23]
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c0d2:	7dfb      	ldrb	r3, [r7, #23]
 800c0d4:	68ba      	ldr	r2, [r7, #8]
 800c0d6:	4413      	add	r3, r2
 800c0d8:	2200      	movs	r2, #0
 800c0da:	701a      	strb	r2, [r3, #0]
    idx++;
 800c0dc:	7dfb      	ldrb	r3, [r7, #23]
 800c0de:	3301      	adds	r3, #1
 800c0e0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d1e7      	bne.n	800c0ba <USBD_GetString+0x52>
 800c0ea:	e000      	b.n	800c0ee <USBD_GetString+0x86>
    return;
 800c0ec:	bf00      	nop
  }
}
 800c0ee:	3718      	adds	r7, #24
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b085      	sub	sp, #20
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c104:	e005      	b.n	800c112 <USBD_GetLen+0x1e>
  {
    len++;
 800c106:	7bfb      	ldrb	r3, [r7, #15]
 800c108:	3301      	adds	r3, #1
 800c10a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	3301      	adds	r3, #1
 800c110:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d1f5      	bne.n	800c106 <USBD_GetLen+0x12>
  }

  return len;
 800c11a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3714      	adds	r7, #20
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr

0800c128 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b084      	sub	sp, #16
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	60f8      	str	r0, [r7, #12]
 800c130:	60b9      	str	r1, [r7, #8]
 800c132:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2202      	movs	r2, #2
 800c138:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	687a      	ldr	r2, [r7, #4]
 800c140:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	68ba      	ldr	r2, [r7, #8]
 800c14c:	2100      	movs	r1, #0
 800c14e:	68f8      	ldr	r0, [r7, #12]
 800c150:	f003 fc05 	bl	800f95e <USBD_LL_Transmit>

  return USBD_OK;
 800c154:	2300      	movs	r3, #0
}
 800c156:	4618      	mov	r0, r3
 800c158:	3710      	adds	r7, #16
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}

0800c15e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c15e:	b580      	push	{r7, lr}
 800c160:	b084      	sub	sp, #16
 800c162:	af00      	add	r7, sp, #0
 800c164:	60f8      	str	r0, [r7, #12]
 800c166:	60b9      	str	r1, [r7, #8]
 800c168:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	68ba      	ldr	r2, [r7, #8]
 800c16e:	2100      	movs	r1, #0
 800c170:	68f8      	ldr	r0, [r7, #12]
 800c172:	f003 fbf4 	bl	800f95e <USBD_LL_Transmit>

  return USBD_OK;
 800c176:	2300      	movs	r3, #0
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3710      	adds	r7, #16
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	60f8      	str	r0, [r7, #12]
 800c188:	60b9      	str	r1, [r7, #8]
 800c18a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2203      	movs	r2, #3
 800c190:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	687a      	ldr	r2, [r7, #4]
 800c198:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	687a      	ldr	r2, [r7, #4]
 800c1a0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	68ba      	ldr	r2, [r7, #8]
 800c1a8:	2100      	movs	r1, #0
 800c1aa:	68f8      	ldr	r0, [r7, #12]
 800c1ac:	f003 fbf8 	bl	800f9a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c1b0:	2300      	movs	r3, #0
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3710      	adds	r7, #16
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}

0800c1ba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c1ba:	b580      	push	{r7, lr}
 800c1bc:	b084      	sub	sp, #16
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	60f8      	str	r0, [r7, #12]
 800c1c2:	60b9      	str	r1, [r7, #8]
 800c1c4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	68ba      	ldr	r2, [r7, #8]
 800c1ca:	2100      	movs	r1, #0
 800c1cc:	68f8      	ldr	r0, [r7, #12]
 800c1ce:	f003 fbe7 	bl	800f9a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c1d2:	2300      	movs	r3, #0
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3710      	adds	r7, #16
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b082      	sub	sp, #8
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2204      	movs	r2, #4
 800c1e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	2100      	movs	r1, #0
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f003 fbb3 	bl	800f95e <USBD_LL_Transmit>

  return USBD_OK;
 800c1f8:	2300      	movs	r3, #0
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3708      	adds	r7, #8
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}

0800c202 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c202:	b580      	push	{r7, lr}
 800c204:	b082      	sub	sp, #8
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2205      	movs	r2, #5
 800c20e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c212:	2300      	movs	r3, #0
 800c214:	2200      	movs	r2, #0
 800c216:	2100      	movs	r1, #0
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f003 fbc1 	bl	800f9a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c21e:	2300      	movs	r3, #0
}
 800c220:	4618      	mov	r0, r3
 800c222:	3708      	adds	r7, #8
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}

0800c228 <__NVIC_SetPriority>:
{
 800c228:	b480      	push	{r7}
 800c22a:	b083      	sub	sp, #12
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	4603      	mov	r3, r0
 800c230:	6039      	str	r1, [r7, #0]
 800c232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	db0a      	blt.n	800c252 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	b2da      	uxtb	r2, r3
 800c240:	490c      	ldr	r1, [pc, #48]	; (800c274 <__NVIC_SetPriority+0x4c>)
 800c242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c246:	0112      	lsls	r2, r2, #4
 800c248:	b2d2      	uxtb	r2, r2
 800c24a:	440b      	add	r3, r1
 800c24c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c250:	e00a      	b.n	800c268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	b2da      	uxtb	r2, r3
 800c256:	4908      	ldr	r1, [pc, #32]	; (800c278 <__NVIC_SetPriority+0x50>)
 800c258:	79fb      	ldrb	r3, [r7, #7]
 800c25a:	f003 030f 	and.w	r3, r3, #15
 800c25e:	3b04      	subs	r3, #4
 800c260:	0112      	lsls	r2, r2, #4
 800c262:	b2d2      	uxtb	r2, r2
 800c264:	440b      	add	r3, r1
 800c266:	761a      	strb	r2, [r3, #24]
}
 800c268:	bf00      	nop
 800c26a:	370c      	adds	r7, #12
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr
 800c274:	e000e100 	.word	0xe000e100
 800c278:	e000ed00 	.word	0xe000ed00

0800c27c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c27c:	b580      	push	{r7, lr}
 800c27e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c280:	4b05      	ldr	r3, [pc, #20]	; (800c298 <SysTick_Handler+0x1c>)
 800c282:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c284:	f001 feb2 	bl	800dfec <xTaskGetSchedulerState>
 800c288:	4603      	mov	r3, r0
 800c28a:	2b01      	cmp	r3, #1
 800c28c:	d001      	beq.n	800c292 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c28e:	f002 fc9b 	bl	800ebc8 <xPortSysTickHandler>
  }
}
 800c292:	bf00      	nop
 800c294:	bd80      	pop	{r7, pc}
 800c296:	bf00      	nop
 800c298:	e000e010 	.word	0xe000e010

0800c29c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c29c:	b580      	push	{r7, lr}
 800c29e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c2a0:	2100      	movs	r1, #0
 800c2a2:	f06f 0004 	mvn.w	r0, #4
 800c2a6:	f7ff ffbf 	bl	800c228 <__NVIC_SetPriority>
#endif
}
 800c2aa:	bf00      	nop
 800c2ac:	bd80      	pop	{r7, pc}
	...

0800c2b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c2b0:	b480      	push	{r7}
 800c2b2:	b083      	sub	sp, #12
 800c2b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2b6:	f3ef 8305 	mrs	r3, IPSR
 800c2ba:	603b      	str	r3, [r7, #0]
  return(result);
 800c2bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d003      	beq.n	800c2ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c2c2:	f06f 0305 	mvn.w	r3, #5
 800c2c6:	607b      	str	r3, [r7, #4]
 800c2c8:	e00c      	b.n	800c2e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c2ca:	4b0a      	ldr	r3, [pc, #40]	; (800c2f4 <osKernelInitialize+0x44>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d105      	bne.n	800c2de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c2d2:	4b08      	ldr	r3, [pc, #32]	; (800c2f4 <osKernelInitialize+0x44>)
 800c2d4:	2201      	movs	r2, #1
 800c2d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	607b      	str	r3, [r7, #4]
 800c2dc:	e002      	b.n	800c2e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c2de:	f04f 33ff 	mov.w	r3, #4294967295
 800c2e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c2e4:	687b      	ldr	r3, [r7, #4]
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	370c      	adds	r7, #12
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f0:	4770      	bx	lr
 800c2f2:	bf00      	nop
 800c2f4:	200008bc 	.word	0x200008bc

0800c2f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2fe:	f3ef 8305 	mrs	r3, IPSR
 800c302:	603b      	str	r3, [r7, #0]
  return(result);
 800c304:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c306:	2b00      	cmp	r3, #0
 800c308:	d003      	beq.n	800c312 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c30a:	f06f 0305 	mvn.w	r3, #5
 800c30e:	607b      	str	r3, [r7, #4]
 800c310:	e010      	b.n	800c334 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c312:	4b0b      	ldr	r3, [pc, #44]	; (800c340 <osKernelStart+0x48>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	2b01      	cmp	r3, #1
 800c318:	d109      	bne.n	800c32e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c31a:	f7ff ffbf 	bl	800c29c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c31e:	4b08      	ldr	r3, [pc, #32]	; (800c340 <osKernelStart+0x48>)
 800c320:	2202      	movs	r2, #2
 800c322:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c324:	f001 fa1a 	bl	800d75c <vTaskStartScheduler>
      stat = osOK;
 800c328:	2300      	movs	r3, #0
 800c32a:	607b      	str	r3, [r7, #4]
 800c32c:	e002      	b.n	800c334 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c32e:	f04f 33ff 	mov.w	r3, #4294967295
 800c332:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c334:	687b      	ldr	r3, [r7, #4]
}
 800c336:	4618      	mov	r0, r3
 800c338:	3708      	adds	r7, #8
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
 800c33e:	bf00      	nop
 800c340:	200008bc 	.word	0x200008bc

0800c344 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c344:	b580      	push	{r7, lr}
 800c346:	b08e      	sub	sp, #56	; 0x38
 800c348:	af04      	add	r7, sp, #16
 800c34a:	60f8      	str	r0, [r7, #12]
 800c34c:	60b9      	str	r1, [r7, #8]
 800c34e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c350:	2300      	movs	r3, #0
 800c352:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c354:	f3ef 8305 	mrs	r3, IPSR
 800c358:	617b      	str	r3, [r7, #20]
  return(result);
 800c35a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d17f      	bne.n	800c460 <osThreadNew+0x11c>
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d07c      	beq.n	800c460 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800c366:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c36a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c36c:	2318      	movs	r3, #24
 800c36e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c370:	2300      	movs	r3, #0
 800c372:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c374:	f04f 33ff 	mov.w	r3, #4294967295
 800c378:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d045      	beq.n	800c40c <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d002      	beq.n	800c38e <osThreadNew+0x4a>
        name = attr->name;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	699b      	ldr	r3, [r3, #24]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d002      	beq.n	800c39c <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	699b      	ldr	r3, [r3, #24]
 800c39a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c39c:	69fb      	ldr	r3, [r7, #28]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d008      	beq.n	800c3b4 <osThreadNew+0x70>
 800c3a2:	69fb      	ldr	r3, [r7, #28]
 800c3a4:	2b38      	cmp	r3, #56	; 0x38
 800c3a6:	d805      	bhi.n	800c3b4 <osThreadNew+0x70>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	f003 0301 	and.w	r3, r3, #1
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d001      	beq.n	800c3b8 <osThreadNew+0x74>
        return (NULL);
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	e054      	b.n	800c462 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	695b      	ldr	r3, [r3, #20]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d003      	beq.n	800c3c8 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	695b      	ldr	r3, [r3, #20]
 800c3c4:	089b      	lsrs	r3, r3, #2
 800c3c6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	689b      	ldr	r3, [r3, #8]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d00e      	beq.n	800c3ee <osThreadNew+0xaa>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	68db      	ldr	r3, [r3, #12]
 800c3d4:	2b6b      	cmp	r3, #107	; 0x6b
 800c3d6:	d90a      	bls.n	800c3ee <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d006      	beq.n	800c3ee <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	695b      	ldr	r3, [r3, #20]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d002      	beq.n	800c3ee <osThreadNew+0xaa>
        mem = 1;
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	61bb      	str	r3, [r7, #24]
 800c3ec:	e010      	b.n	800c410 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	689b      	ldr	r3, [r3, #8]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d10c      	bne.n	800c410 <osThreadNew+0xcc>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	68db      	ldr	r3, [r3, #12]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d108      	bne.n	800c410 <osThreadNew+0xcc>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	691b      	ldr	r3, [r3, #16]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d104      	bne.n	800c410 <osThreadNew+0xcc>
          mem = 0;
 800c406:	2300      	movs	r3, #0
 800c408:	61bb      	str	r3, [r7, #24]
 800c40a:	e001      	b.n	800c410 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800c40c:	2300      	movs	r3, #0
 800c40e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c410:	69bb      	ldr	r3, [r7, #24]
 800c412:	2b01      	cmp	r3, #1
 800c414:	d110      	bne.n	800c438 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c41e:	9202      	str	r2, [sp, #8]
 800c420:	9301      	str	r3, [sp, #4]
 800c422:	69fb      	ldr	r3, [r7, #28]
 800c424:	9300      	str	r3, [sp, #0]
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	6a3a      	ldr	r2, [r7, #32]
 800c42a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c42c:	68f8      	ldr	r0, [r7, #12]
 800c42e:	f000 feb9 	bl	800d1a4 <xTaskCreateStatic>
 800c432:	4603      	mov	r3, r0
 800c434:	613b      	str	r3, [r7, #16]
 800c436:	e013      	b.n	800c460 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800c438:	69bb      	ldr	r3, [r7, #24]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d110      	bne.n	800c460 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c43e:	6a3b      	ldr	r3, [r7, #32]
 800c440:	b29a      	uxth	r2, r3
 800c442:	f107 0310 	add.w	r3, r7, #16
 800c446:	9301      	str	r3, [sp, #4]
 800c448:	69fb      	ldr	r3, [r7, #28]
 800c44a:	9300      	str	r3, [sp, #0]
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c450:	68f8      	ldr	r0, [r7, #12]
 800c452:	f000 ff04 	bl	800d25e <xTaskCreate>
 800c456:	4603      	mov	r3, r0
 800c458:	2b01      	cmp	r3, #1
 800c45a:	d001      	beq.n	800c460 <osThreadNew+0x11c>
            hTask = NULL;
 800c45c:	2300      	movs	r3, #0
 800c45e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c460:	693b      	ldr	r3, [r7, #16]
}
 800c462:	4618      	mov	r0, r3
 800c464:	3728      	adds	r7, #40	; 0x28
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}

0800c46a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c46a:	b580      	push	{r7, lr}
 800c46c:	b084      	sub	sp, #16
 800c46e:	af00      	add	r7, sp, #0
 800c470:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c472:	f3ef 8305 	mrs	r3, IPSR
 800c476:	60bb      	str	r3, [r7, #8]
  return(result);
 800c478:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d003      	beq.n	800c486 <osDelay+0x1c>
    stat = osErrorISR;
 800c47e:	f06f 0305 	mvn.w	r3, #5
 800c482:	60fb      	str	r3, [r7, #12]
 800c484:	e007      	b.n	800c496 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c486:	2300      	movs	r3, #0
 800c488:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d002      	beq.n	800c496 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f001 f829 	bl	800d4e8 <vTaskDelay>
    }
  }

  return (stat);
 800c496:	68fb      	ldr	r3, [r7, #12]
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3710      	adds	r7, #16
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b08a      	sub	sp, #40	; 0x28
 800c4a4:	af02      	add	r7, sp, #8
 800c4a6:	60f8      	str	r0, [r7, #12]
 800c4a8:	60b9      	str	r1, [r7, #8]
 800c4aa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4b0:	f3ef 8305 	mrs	r3, IPSR
 800c4b4:	613b      	str	r3, [r7, #16]
  return(result);
 800c4b6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d15f      	bne.n	800c57c <osMessageQueueNew+0xdc>
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d05c      	beq.n	800c57c <osMessageQueueNew+0xdc>
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d059      	beq.n	800c57c <osMessageQueueNew+0xdc>
    mem = -1;
 800c4c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c4cc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d029      	beq.n	800c528 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	689b      	ldr	r3, [r3, #8]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d012      	beq.n	800c502 <osMessageQueueNew+0x62>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	68db      	ldr	r3, [r3, #12]
 800c4e0:	2b4f      	cmp	r3, #79	; 0x4f
 800c4e2:	d90e      	bls.n	800c502 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d00a      	beq.n	800c502 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	695a      	ldr	r2, [r3, #20]
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	68b9      	ldr	r1, [r7, #8]
 800c4f4:	fb01 f303 	mul.w	r3, r1, r3
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d302      	bcc.n	800c502 <osMessageQueueNew+0x62>
        mem = 1;
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	61bb      	str	r3, [r7, #24]
 800c500:	e014      	b.n	800c52c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	689b      	ldr	r3, [r3, #8]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d110      	bne.n	800c52c <osMessageQueueNew+0x8c>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	68db      	ldr	r3, [r3, #12]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d10c      	bne.n	800c52c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c516:	2b00      	cmp	r3, #0
 800c518:	d108      	bne.n	800c52c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	695b      	ldr	r3, [r3, #20]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d104      	bne.n	800c52c <osMessageQueueNew+0x8c>
          mem = 0;
 800c522:	2300      	movs	r3, #0
 800c524:	61bb      	str	r3, [r7, #24]
 800c526:	e001      	b.n	800c52c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c528:	2300      	movs	r3, #0
 800c52a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c52c:	69bb      	ldr	r3, [r7, #24]
 800c52e:	2b01      	cmp	r3, #1
 800c530:	d10b      	bne.n	800c54a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	691a      	ldr	r2, [r3, #16]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	689b      	ldr	r3, [r3, #8]
 800c53a:	2100      	movs	r1, #0
 800c53c:	9100      	str	r1, [sp, #0]
 800c53e:	68b9      	ldr	r1, [r7, #8]
 800c540:	68f8      	ldr	r0, [r7, #12]
 800c542:	f000 f971 	bl	800c828 <xQueueGenericCreateStatic>
 800c546:	61f8      	str	r0, [r7, #28]
 800c548:	e008      	b.n	800c55c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c54a:	69bb      	ldr	r3, [r7, #24]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d105      	bne.n	800c55c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c550:	2200      	movs	r2, #0
 800c552:	68b9      	ldr	r1, [r7, #8]
 800c554:	68f8      	ldr	r0, [r7, #12]
 800c556:	f000 f9df 	bl	800c918 <xQueueGenericCreate>
 800c55a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c55c:	69fb      	ldr	r3, [r7, #28]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d00c      	beq.n	800c57c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d003      	beq.n	800c570 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	617b      	str	r3, [r7, #20]
 800c56e:	e001      	b.n	800c574 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c570:	2300      	movs	r3, #0
 800c572:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c574:	6979      	ldr	r1, [r7, #20]
 800c576:	69f8      	ldr	r0, [r7, #28]
 800c578:	f000 fdb6 	bl	800d0e8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c57c:	69fb      	ldr	r3, [r7, #28]
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3720      	adds	r7, #32
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}
	...

0800c588 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c588:	b480      	push	{r7}
 800c58a:	b085      	sub	sp, #20
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	60b9      	str	r1, [r7, #8]
 800c592:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	4a07      	ldr	r2, [pc, #28]	; (800c5b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800c598:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	4a06      	ldr	r2, [pc, #24]	; (800c5b8 <vApplicationGetIdleTaskMemory+0x30>)
 800c59e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c5a6:	601a      	str	r2, [r3, #0]
}
 800c5a8:	bf00      	nop
 800c5aa:	3714      	adds	r7, #20
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b2:	4770      	bx	lr
 800c5b4:	200008c0 	.word	0x200008c0
 800c5b8:	2000092c 	.word	0x2000092c

0800c5bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c5bc:	b480      	push	{r7}
 800c5be:	b085      	sub	sp, #20
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	60b9      	str	r1, [r7, #8]
 800c5c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	4a07      	ldr	r2, [pc, #28]	; (800c5e8 <vApplicationGetTimerTaskMemory+0x2c>)
 800c5cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	4a06      	ldr	r2, [pc, #24]	; (800c5ec <vApplicationGetTimerTaskMemory+0x30>)
 800c5d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c5da:	601a      	str	r2, [r3, #0]
}
 800c5dc:	bf00      	nop
 800c5de:	3714      	adds	r7, #20
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e6:	4770      	bx	lr
 800c5e8:	20000d2c 	.word	0x20000d2c
 800c5ec:	20000d98 	.word	0x20000d98

0800c5f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b083      	sub	sp, #12
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f103 0208 	add.w	r2, r3, #8
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f04f 32ff 	mov.w	r2, #4294967295
 800c608:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f103 0208 	add.w	r2, r3, #8
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f103 0208 	add.w	r2, r3, #8
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2200      	movs	r2, #0
 800c622:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c624:	bf00      	nop
 800c626:	370c      	adds	r7, #12
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr

0800c630 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c630:	b480      	push	{r7}
 800c632:	b083      	sub	sp, #12
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2200      	movs	r2, #0
 800c63c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c63e:	bf00      	nop
 800c640:	370c      	adds	r7, #12
 800c642:	46bd      	mov	sp, r7
 800c644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c648:	4770      	bx	lr

0800c64a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c64a:	b480      	push	{r7}
 800c64c:	b085      	sub	sp, #20
 800c64e:	af00      	add	r7, sp, #0
 800c650:	6078      	str	r0, [r7, #4]
 800c652:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	685b      	ldr	r3, [r3, #4]
 800c658:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	68fa      	ldr	r2, [r7, #12]
 800c65e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	689a      	ldr	r2, [r3, #8]
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	689b      	ldr	r3, [r3, #8]
 800c66c:	683a      	ldr	r2, [r7, #0]
 800c66e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	683a      	ldr	r2, [r7, #0]
 800c674:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	1c5a      	adds	r2, r3, #1
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	601a      	str	r2, [r3, #0]
}
 800c686:	bf00      	nop
 800c688:	3714      	adds	r7, #20
 800c68a:	46bd      	mov	sp, r7
 800c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c690:	4770      	bx	lr

0800c692 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c692:	b480      	push	{r7}
 800c694:	b085      	sub	sp, #20
 800c696:	af00      	add	r7, sp, #0
 800c698:	6078      	str	r0, [r7, #4]
 800c69a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6a8:	d103      	bne.n	800c6b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	691b      	ldr	r3, [r3, #16]
 800c6ae:	60fb      	str	r3, [r7, #12]
 800c6b0:	e00c      	b.n	800c6cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	3308      	adds	r3, #8
 800c6b6:	60fb      	str	r3, [r7, #12]
 800c6b8:	e002      	b.n	800c6c0 <vListInsert+0x2e>
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	685b      	ldr	r3, [r3, #4]
 800c6be:	60fb      	str	r3, [r7, #12]
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	68ba      	ldr	r2, [r7, #8]
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d2f6      	bcs.n	800c6ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	685a      	ldr	r2, [r3, #4]
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	685b      	ldr	r3, [r3, #4]
 800c6d8:	683a      	ldr	r2, [r7, #0]
 800c6da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	68fa      	ldr	r2, [r7, #12]
 800c6e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	683a      	ldr	r2, [r7, #0]
 800c6e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	687a      	ldr	r2, [r7, #4]
 800c6ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	1c5a      	adds	r2, r3, #1
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	601a      	str	r2, [r3, #0]
}
 800c6f8:	bf00      	nop
 800c6fa:	3714      	adds	r7, #20
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr

0800c704 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c704:	b480      	push	{r7}
 800c706:	b085      	sub	sp, #20
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	691b      	ldr	r3, [r3, #16]
 800c710:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	687a      	ldr	r2, [r7, #4]
 800c718:	6892      	ldr	r2, [r2, #8]
 800c71a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	689b      	ldr	r3, [r3, #8]
 800c720:	687a      	ldr	r2, [r7, #4]
 800c722:	6852      	ldr	r2, [r2, #4]
 800c724:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	687a      	ldr	r2, [r7, #4]
 800c72c:	429a      	cmp	r2, r3
 800c72e:	d103      	bne.n	800c738 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	689a      	ldr	r2, [r3, #8]
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2200      	movs	r2, #0
 800c73c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	1e5a      	subs	r2, r3, #1
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	681b      	ldr	r3, [r3, #0]
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3714      	adds	r7, #20
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b084      	sub	sp, #16
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d10a      	bne.n	800c782 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c770:	f383 8811 	msr	BASEPRI, r3
 800c774:	f3bf 8f6f 	isb	sy
 800c778:	f3bf 8f4f 	dsb	sy
 800c77c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c77e:	bf00      	nop
 800c780:	e7fe      	b.n	800c780 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c782:	f002 f98f 	bl	800eaa4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681a      	ldr	r2, [r3, #0]
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c78e:	68f9      	ldr	r1, [r7, #12]
 800c790:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c792:	fb01 f303 	mul.w	r3, r1, r3
 800c796:	441a      	add	r2, r3
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	681a      	ldr	r2, [r3, #0]
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	681a      	ldr	r2, [r3, #0]
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7b2:	3b01      	subs	r3, #1
 800c7b4:	68f9      	ldr	r1, [r7, #12]
 800c7b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c7b8:	fb01 f303 	mul.w	r3, r1, r3
 800c7bc:	441a      	add	r2, r3
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	22ff      	movs	r2, #255	; 0xff
 800c7c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	22ff      	movs	r2, #255	; 0xff
 800c7ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d114      	bne.n	800c802 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	691b      	ldr	r3, [r3, #16]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d01a      	beq.n	800c816 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	3310      	adds	r3, #16
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f001 fa43 	bl	800dc70 <xTaskRemoveFromEventList>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d012      	beq.n	800c816 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c7f0:	4b0c      	ldr	r3, [pc, #48]	; (800c824 <xQueueGenericReset+0xcc>)
 800c7f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7f6:	601a      	str	r2, [r3, #0]
 800c7f8:	f3bf 8f4f 	dsb	sy
 800c7fc:	f3bf 8f6f 	isb	sy
 800c800:	e009      	b.n	800c816 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	3310      	adds	r3, #16
 800c806:	4618      	mov	r0, r3
 800c808:	f7ff fef2 	bl	800c5f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	3324      	adds	r3, #36	; 0x24
 800c810:	4618      	mov	r0, r3
 800c812:	f7ff feed 	bl	800c5f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c816:	f002 f975 	bl	800eb04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c81a:	2301      	movs	r3, #1
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3710      	adds	r7, #16
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}
 800c824:	e000ed04 	.word	0xe000ed04

0800c828 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b08e      	sub	sp, #56	; 0x38
 800c82c:	af02      	add	r7, sp, #8
 800c82e:	60f8      	str	r0, [r7, #12]
 800c830:	60b9      	str	r1, [r7, #8]
 800c832:	607a      	str	r2, [r7, #4]
 800c834:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d10a      	bne.n	800c852 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c840:	f383 8811 	msr	BASEPRI, r3
 800c844:	f3bf 8f6f 	isb	sy
 800c848:	f3bf 8f4f 	dsb	sy
 800c84c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c84e:	bf00      	nop
 800c850:	e7fe      	b.n	800c850 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d10a      	bne.n	800c86e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85c:	f383 8811 	msr	BASEPRI, r3
 800c860:	f3bf 8f6f 	isb	sy
 800c864:	f3bf 8f4f 	dsb	sy
 800c868:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c86a:	bf00      	nop
 800c86c:	e7fe      	b.n	800c86c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d002      	beq.n	800c87a <xQueueGenericCreateStatic+0x52>
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d001      	beq.n	800c87e <xQueueGenericCreateStatic+0x56>
 800c87a:	2301      	movs	r3, #1
 800c87c:	e000      	b.n	800c880 <xQueueGenericCreateStatic+0x58>
 800c87e:	2300      	movs	r3, #0
 800c880:	2b00      	cmp	r3, #0
 800c882:	d10a      	bne.n	800c89a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c888:	f383 8811 	msr	BASEPRI, r3
 800c88c:	f3bf 8f6f 	isb	sy
 800c890:	f3bf 8f4f 	dsb	sy
 800c894:	623b      	str	r3, [r7, #32]
}
 800c896:	bf00      	nop
 800c898:	e7fe      	b.n	800c898 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d102      	bne.n	800c8a6 <xQueueGenericCreateStatic+0x7e>
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d101      	bne.n	800c8aa <xQueueGenericCreateStatic+0x82>
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	e000      	b.n	800c8ac <xQueueGenericCreateStatic+0x84>
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d10a      	bne.n	800c8c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b4:	f383 8811 	msr	BASEPRI, r3
 800c8b8:	f3bf 8f6f 	isb	sy
 800c8bc:	f3bf 8f4f 	dsb	sy
 800c8c0:	61fb      	str	r3, [r7, #28]
}
 800c8c2:	bf00      	nop
 800c8c4:	e7fe      	b.n	800c8c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c8c6:	2350      	movs	r3, #80	; 0x50
 800c8c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	2b50      	cmp	r3, #80	; 0x50
 800c8ce:	d00a      	beq.n	800c8e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d4:	f383 8811 	msr	BASEPRI, r3
 800c8d8:	f3bf 8f6f 	isb	sy
 800c8dc:	f3bf 8f4f 	dsb	sy
 800c8e0:	61bb      	str	r3, [r7, #24]
}
 800c8e2:	bf00      	nop
 800c8e4:	e7fe      	b.n	800c8e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c8e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d00d      	beq.n	800c90e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f4:	2201      	movs	r2, #1
 800c8f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c8fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c900:	9300      	str	r3, [sp, #0]
 800c902:	4613      	mov	r3, r2
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	68b9      	ldr	r1, [r7, #8]
 800c908:	68f8      	ldr	r0, [r7, #12]
 800c90a:	f000 f83f 	bl	800c98c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c910:	4618      	mov	r0, r3
 800c912:	3730      	adds	r7, #48	; 0x30
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}

0800c918 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b08a      	sub	sp, #40	; 0x28
 800c91c:	af02      	add	r7, sp, #8
 800c91e:	60f8      	str	r0, [r7, #12]
 800c920:	60b9      	str	r1, [r7, #8]
 800c922:	4613      	mov	r3, r2
 800c924:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d10a      	bne.n	800c942 <xQueueGenericCreate+0x2a>
	__asm volatile
 800c92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c930:	f383 8811 	msr	BASEPRI, r3
 800c934:	f3bf 8f6f 	isb	sy
 800c938:	f3bf 8f4f 	dsb	sy
 800c93c:	613b      	str	r3, [r7, #16]
}
 800c93e:	bf00      	nop
 800c940:	e7fe      	b.n	800c940 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	68ba      	ldr	r2, [r7, #8]
 800c946:	fb02 f303 	mul.w	r3, r2, r3
 800c94a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c94c:	69fb      	ldr	r3, [r7, #28]
 800c94e:	3350      	adds	r3, #80	; 0x50
 800c950:	4618      	mov	r0, r3
 800c952:	f002 f9c9 	bl	800ece8 <pvPortMalloc>
 800c956:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c958:	69bb      	ldr	r3, [r7, #24]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d011      	beq.n	800c982 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c95e:	69bb      	ldr	r3, [r7, #24]
 800c960:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	3350      	adds	r3, #80	; 0x50
 800c966:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c968:	69bb      	ldr	r3, [r7, #24]
 800c96a:	2200      	movs	r2, #0
 800c96c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c970:	79fa      	ldrb	r2, [r7, #7]
 800c972:	69bb      	ldr	r3, [r7, #24]
 800c974:	9300      	str	r3, [sp, #0]
 800c976:	4613      	mov	r3, r2
 800c978:	697a      	ldr	r2, [r7, #20]
 800c97a:	68b9      	ldr	r1, [r7, #8]
 800c97c:	68f8      	ldr	r0, [r7, #12]
 800c97e:	f000 f805 	bl	800c98c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c982:	69bb      	ldr	r3, [r7, #24]
	}
 800c984:	4618      	mov	r0, r3
 800c986:	3720      	adds	r7, #32
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}

0800c98c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b084      	sub	sp, #16
 800c990:	af00      	add	r7, sp, #0
 800c992:	60f8      	str	r0, [r7, #12]
 800c994:	60b9      	str	r1, [r7, #8]
 800c996:	607a      	str	r2, [r7, #4]
 800c998:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d103      	bne.n	800c9a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c9a0:	69bb      	ldr	r3, [r7, #24]
 800c9a2:	69ba      	ldr	r2, [r7, #24]
 800c9a4:	601a      	str	r2, [r3, #0]
 800c9a6:	e002      	b.n	800c9ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c9a8:	69bb      	ldr	r3, [r7, #24]
 800c9aa:	687a      	ldr	r2, [r7, #4]
 800c9ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c9ae:	69bb      	ldr	r3, [r7, #24]
 800c9b0:	68fa      	ldr	r2, [r7, #12]
 800c9b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c9b4:	69bb      	ldr	r3, [r7, #24]
 800c9b6:	68ba      	ldr	r2, [r7, #8]
 800c9b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c9ba:	2101      	movs	r1, #1
 800c9bc:	69b8      	ldr	r0, [r7, #24]
 800c9be:	f7ff fecb 	bl	800c758 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c9c2:	69bb      	ldr	r3, [r7, #24]
 800c9c4:	78fa      	ldrb	r2, [r7, #3]
 800c9c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c9ca:	bf00      	nop
 800c9cc:	3710      	adds	r7, #16
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
	...

0800c9d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b08e      	sub	sp, #56	; 0x38
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	60f8      	str	r0, [r7, #12]
 800c9dc:	60b9      	str	r1, [r7, #8]
 800c9de:	607a      	str	r2, [r7, #4]
 800c9e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d10a      	bne.n	800ca06 <xQueueGenericSend+0x32>
	__asm volatile
 800c9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f4:	f383 8811 	msr	BASEPRI, r3
 800c9f8:	f3bf 8f6f 	isb	sy
 800c9fc:	f3bf 8f4f 	dsb	sy
 800ca00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ca02:	bf00      	nop
 800ca04:	e7fe      	b.n	800ca04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d103      	bne.n	800ca14 <xQueueGenericSend+0x40>
 800ca0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d101      	bne.n	800ca18 <xQueueGenericSend+0x44>
 800ca14:	2301      	movs	r3, #1
 800ca16:	e000      	b.n	800ca1a <xQueueGenericSend+0x46>
 800ca18:	2300      	movs	r3, #0
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d10a      	bne.n	800ca34 <xQueueGenericSend+0x60>
	__asm volatile
 800ca1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca22:	f383 8811 	msr	BASEPRI, r3
 800ca26:	f3bf 8f6f 	isb	sy
 800ca2a:	f3bf 8f4f 	dsb	sy
 800ca2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ca30:	bf00      	nop
 800ca32:	e7fe      	b.n	800ca32 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	2b02      	cmp	r3, #2
 800ca38:	d103      	bne.n	800ca42 <xQueueGenericSend+0x6e>
 800ca3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca3e:	2b01      	cmp	r3, #1
 800ca40:	d101      	bne.n	800ca46 <xQueueGenericSend+0x72>
 800ca42:	2301      	movs	r3, #1
 800ca44:	e000      	b.n	800ca48 <xQueueGenericSend+0x74>
 800ca46:	2300      	movs	r3, #0
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d10a      	bne.n	800ca62 <xQueueGenericSend+0x8e>
	__asm volatile
 800ca4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca50:	f383 8811 	msr	BASEPRI, r3
 800ca54:	f3bf 8f6f 	isb	sy
 800ca58:	f3bf 8f4f 	dsb	sy
 800ca5c:	623b      	str	r3, [r7, #32]
}
 800ca5e:	bf00      	nop
 800ca60:	e7fe      	b.n	800ca60 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca62:	f001 fac3 	bl	800dfec <xTaskGetSchedulerState>
 800ca66:	4603      	mov	r3, r0
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d102      	bne.n	800ca72 <xQueueGenericSend+0x9e>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d101      	bne.n	800ca76 <xQueueGenericSend+0xa2>
 800ca72:	2301      	movs	r3, #1
 800ca74:	e000      	b.n	800ca78 <xQueueGenericSend+0xa4>
 800ca76:	2300      	movs	r3, #0
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d10a      	bne.n	800ca92 <xQueueGenericSend+0xbe>
	__asm volatile
 800ca7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca80:	f383 8811 	msr	BASEPRI, r3
 800ca84:	f3bf 8f6f 	isb	sy
 800ca88:	f3bf 8f4f 	dsb	sy
 800ca8c:	61fb      	str	r3, [r7, #28]
}
 800ca8e:	bf00      	nop
 800ca90:	e7fe      	b.n	800ca90 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ca92:	f002 f807 	bl	800eaa4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ca96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d302      	bcc.n	800caa8 <xQueueGenericSend+0xd4>
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	2b02      	cmp	r3, #2
 800caa6:	d129      	bne.n	800cafc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800caa8:	683a      	ldr	r2, [r7, #0]
 800caaa:	68b9      	ldr	r1, [r7, #8]
 800caac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800caae:	f000 fa0b 	bl	800cec8 <prvCopyDataToQueue>
 800cab2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d010      	beq.n	800cade <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cabe:	3324      	adds	r3, #36	; 0x24
 800cac0:	4618      	mov	r0, r3
 800cac2:	f001 f8d5 	bl	800dc70 <xTaskRemoveFromEventList>
 800cac6:	4603      	mov	r3, r0
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d013      	beq.n	800caf4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cacc:	4b3f      	ldr	r3, [pc, #252]	; (800cbcc <xQueueGenericSend+0x1f8>)
 800cace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cad2:	601a      	str	r2, [r3, #0]
 800cad4:	f3bf 8f4f 	dsb	sy
 800cad8:	f3bf 8f6f 	isb	sy
 800cadc:	e00a      	b.n	800caf4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d007      	beq.n	800caf4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cae4:	4b39      	ldr	r3, [pc, #228]	; (800cbcc <xQueueGenericSend+0x1f8>)
 800cae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caea:	601a      	str	r2, [r3, #0]
 800caec:	f3bf 8f4f 	dsb	sy
 800caf0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800caf4:	f002 f806 	bl	800eb04 <vPortExitCritical>
				return pdPASS;
 800caf8:	2301      	movs	r3, #1
 800cafa:	e063      	b.n	800cbc4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d103      	bne.n	800cb0a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cb02:	f001 ffff 	bl	800eb04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cb06:	2300      	movs	r3, #0
 800cb08:	e05c      	b.n	800cbc4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cb0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d106      	bne.n	800cb1e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cb10:	f107 0314 	add.w	r3, r7, #20
 800cb14:	4618      	mov	r0, r3
 800cb16:	f001 f90f 	bl	800dd38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cb1e:	f001 fff1 	bl	800eb04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cb22:	f000 fe81 	bl	800d828 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cb26:	f001 ffbd 	bl	800eaa4 <vPortEnterCritical>
 800cb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb30:	b25b      	sxtb	r3, r3
 800cb32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb36:	d103      	bne.n	800cb40 <xQueueGenericSend+0x16c>
 800cb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb46:	b25b      	sxtb	r3, r3
 800cb48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb4c:	d103      	bne.n	800cb56 <xQueueGenericSend+0x182>
 800cb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb50:	2200      	movs	r2, #0
 800cb52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb56:	f001 ffd5 	bl	800eb04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cb5a:	1d3a      	adds	r2, r7, #4
 800cb5c:	f107 0314 	add.w	r3, r7, #20
 800cb60:	4611      	mov	r1, r2
 800cb62:	4618      	mov	r0, r3
 800cb64:	f001 f8fe 	bl	800dd64 <xTaskCheckForTimeOut>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d124      	bne.n	800cbb8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cb6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb70:	f000 faa2 	bl	800d0b8 <prvIsQueueFull>
 800cb74:	4603      	mov	r3, r0
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d018      	beq.n	800cbac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cb7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb7c:	3310      	adds	r3, #16
 800cb7e:	687a      	ldr	r2, [r7, #4]
 800cb80:	4611      	mov	r1, r2
 800cb82:	4618      	mov	r0, r3
 800cb84:	f001 f824 	bl	800dbd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cb88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb8a:	f000 fa2d 	bl	800cfe8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cb8e:	f000 fe59 	bl	800d844 <xTaskResumeAll>
 800cb92:	4603      	mov	r3, r0
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	f47f af7c 	bne.w	800ca92 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cb9a:	4b0c      	ldr	r3, [pc, #48]	; (800cbcc <xQueueGenericSend+0x1f8>)
 800cb9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cba0:	601a      	str	r2, [r3, #0]
 800cba2:	f3bf 8f4f 	dsb	sy
 800cba6:	f3bf 8f6f 	isb	sy
 800cbaa:	e772      	b.n	800ca92 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cbac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cbae:	f000 fa1b 	bl	800cfe8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cbb2:	f000 fe47 	bl	800d844 <xTaskResumeAll>
 800cbb6:	e76c      	b.n	800ca92 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cbb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cbba:	f000 fa15 	bl	800cfe8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cbbe:	f000 fe41 	bl	800d844 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cbc2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3738      	adds	r7, #56	; 0x38
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}
 800cbcc:	e000ed04 	.word	0xe000ed04

0800cbd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b090      	sub	sp, #64	; 0x40
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	60f8      	str	r0, [r7, #12]
 800cbd8:	60b9      	str	r1, [r7, #8]
 800cbda:	607a      	str	r2, [r7, #4]
 800cbdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cbe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d10a      	bne.n	800cbfe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cbe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbec:	f383 8811 	msr	BASEPRI, r3
 800cbf0:	f3bf 8f6f 	isb	sy
 800cbf4:	f3bf 8f4f 	dsb	sy
 800cbf8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cbfa:	bf00      	nop
 800cbfc:	e7fe      	b.n	800cbfc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d103      	bne.n	800cc0c <xQueueGenericSendFromISR+0x3c>
 800cc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d101      	bne.n	800cc10 <xQueueGenericSendFromISR+0x40>
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	e000      	b.n	800cc12 <xQueueGenericSendFromISR+0x42>
 800cc10:	2300      	movs	r3, #0
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d10a      	bne.n	800cc2c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cc16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc1a:	f383 8811 	msr	BASEPRI, r3
 800cc1e:	f3bf 8f6f 	isb	sy
 800cc22:	f3bf 8f4f 	dsb	sy
 800cc26:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cc28:	bf00      	nop
 800cc2a:	e7fe      	b.n	800cc2a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	2b02      	cmp	r3, #2
 800cc30:	d103      	bne.n	800cc3a <xQueueGenericSendFromISR+0x6a>
 800cc32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc36:	2b01      	cmp	r3, #1
 800cc38:	d101      	bne.n	800cc3e <xQueueGenericSendFromISR+0x6e>
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	e000      	b.n	800cc40 <xQueueGenericSendFromISR+0x70>
 800cc3e:	2300      	movs	r3, #0
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d10a      	bne.n	800cc5a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cc44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc48:	f383 8811 	msr	BASEPRI, r3
 800cc4c:	f3bf 8f6f 	isb	sy
 800cc50:	f3bf 8f4f 	dsb	sy
 800cc54:	623b      	str	r3, [r7, #32]
}
 800cc56:	bf00      	nop
 800cc58:	e7fe      	b.n	800cc58 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cc5a:	f002 f805 	bl	800ec68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cc5e:	f3ef 8211 	mrs	r2, BASEPRI
 800cc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc66:	f383 8811 	msr	BASEPRI, r3
 800cc6a:	f3bf 8f6f 	isb	sy
 800cc6e:	f3bf 8f4f 	dsb	sy
 800cc72:	61fa      	str	r2, [r7, #28]
 800cc74:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cc76:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cc78:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cc7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d302      	bcc.n	800cc8c <xQueueGenericSendFromISR+0xbc>
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	2b02      	cmp	r3, #2
 800cc8a:	d12f      	bne.n	800ccec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cc8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc9a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cc9c:	683a      	ldr	r2, [r7, #0]
 800cc9e:	68b9      	ldr	r1, [r7, #8]
 800cca0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cca2:	f000 f911 	bl	800cec8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cca6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ccaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccae:	d112      	bne.n	800ccd6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ccb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d016      	beq.n	800cce6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ccb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccba:	3324      	adds	r3, #36	; 0x24
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f000 ffd7 	bl	800dc70 <xTaskRemoveFromEventList>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d00e      	beq.n	800cce6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d00b      	beq.n	800cce6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2201      	movs	r2, #1
 800ccd2:	601a      	str	r2, [r3, #0]
 800ccd4:	e007      	b.n	800cce6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ccd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ccda:	3301      	adds	r3, #1
 800ccdc:	b2db      	uxtb	r3, r3
 800ccde:	b25a      	sxtb	r2, r3
 800cce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cce6:	2301      	movs	r3, #1
 800cce8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ccea:	e001      	b.n	800ccf0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ccec:	2300      	movs	r3, #0
 800ccee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccf2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ccfa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ccfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3740      	adds	r7, #64	; 0x40
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
	...

0800cd08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b08c      	sub	sp, #48	; 0x30
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	60f8      	str	r0, [r7, #12]
 800cd10:	60b9      	str	r1, [r7, #8]
 800cd12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cd14:	2300      	movs	r3, #0
 800cd16:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d10a      	bne.n	800cd38 <xQueueReceive+0x30>
	__asm volatile
 800cd22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd26:	f383 8811 	msr	BASEPRI, r3
 800cd2a:	f3bf 8f6f 	isb	sy
 800cd2e:	f3bf 8f4f 	dsb	sy
 800cd32:	623b      	str	r3, [r7, #32]
}
 800cd34:	bf00      	nop
 800cd36:	e7fe      	b.n	800cd36 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d103      	bne.n	800cd46 <xQueueReceive+0x3e>
 800cd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d101      	bne.n	800cd4a <xQueueReceive+0x42>
 800cd46:	2301      	movs	r3, #1
 800cd48:	e000      	b.n	800cd4c <xQueueReceive+0x44>
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d10a      	bne.n	800cd66 <xQueueReceive+0x5e>
	__asm volatile
 800cd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd54:	f383 8811 	msr	BASEPRI, r3
 800cd58:	f3bf 8f6f 	isb	sy
 800cd5c:	f3bf 8f4f 	dsb	sy
 800cd60:	61fb      	str	r3, [r7, #28]
}
 800cd62:	bf00      	nop
 800cd64:	e7fe      	b.n	800cd64 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd66:	f001 f941 	bl	800dfec <xTaskGetSchedulerState>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d102      	bne.n	800cd76 <xQueueReceive+0x6e>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d101      	bne.n	800cd7a <xQueueReceive+0x72>
 800cd76:	2301      	movs	r3, #1
 800cd78:	e000      	b.n	800cd7c <xQueueReceive+0x74>
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d10a      	bne.n	800cd96 <xQueueReceive+0x8e>
	__asm volatile
 800cd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd84:	f383 8811 	msr	BASEPRI, r3
 800cd88:	f3bf 8f6f 	isb	sy
 800cd8c:	f3bf 8f4f 	dsb	sy
 800cd90:	61bb      	str	r3, [r7, #24]
}
 800cd92:	bf00      	nop
 800cd94:	e7fe      	b.n	800cd94 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd96:	f001 fe85 	bl	800eaa4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd9e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d01f      	beq.n	800cde6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cda6:	68b9      	ldr	r1, [r7, #8]
 800cda8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cdaa:	f000 f8f7 	bl	800cf9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cdae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb0:	1e5a      	subs	r2, r3, #1
 800cdb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cdb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb8:	691b      	ldr	r3, [r3, #16]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d00f      	beq.n	800cdde <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc0:	3310      	adds	r3, #16
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f000 ff54 	bl	800dc70 <xTaskRemoveFromEventList>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d007      	beq.n	800cdde <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cdce:	4b3d      	ldr	r3, [pc, #244]	; (800cec4 <xQueueReceive+0x1bc>)
 800cdd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdd4:	601a      	str	r2, [r3, #0]
 800cdd6:	f3bf 8f4f 	dsb	sy
 800cdda:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cdde:	f001 fe91 	bl	800eb04 <vPortExitCritical>
				return pdPASS;
 800cde2:	2301      	movs	r3, #1
 800cde4:	e069      	b.n	800ceba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d103      	bne.n	800cdf4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cdec:	f001 fe8a 	bl	800eb04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	e062      	b.n	800ceba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cdf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d106      	bne.n	800ce08 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cdfa:	f107 0310 	add.w	r3, r7, #16
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f000 ff9a 	bl	800dd38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ce04:	2301      	movs	r3, #1
 800ce06:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ce08:	f001 fe7c 	bl	800eb04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ce0c:	f000 fd0c 	bl	800d828 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce10:	f001 fe48 	bl	800eaa4 <vPortEnterCritical>
 800ce14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce1a:	b25b      	sxtb	r3, r3
 800ce1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce20:	d103      	bne.n	800ce2a <xQueueReceive+0x122>
 800ce22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce24:	2200      	movs	r2, #0
 800ce26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce30:	b25b      	sxtb	r3, r3
 800ce32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce36:	d103      	bne.n	800ce40 <xQueueReceive+0x138>
 800ce38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce40:	f001 fe60 	bl	800eb04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce44:	1d3a      	adds	r2, r7, #4
 800ce46:	f107 0310 	add.w	r3, r7, #16
 800ce4a:	4611      	mov	r1, r2
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f000 ff89 	bl	800dd64 <xTaskCheckForTimeOut>
 800ce52:	4603      	mov	r3, r0
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d123      	bne.n	800cea0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce5a:	f000 f917 	bl	800d08c <prvIsQueueEmpty>
 800ce5e:	4603      	mov	r3, r0
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d017      	beq.n	800ce94 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ce64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce66:	3324      	adds	r3, #36	; 0x24
 800ce68:	687a      	ldr	r2, [r7, #4]
 800ce6a:	4611      	mov	r1, r2
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f000 feaf 	bl	800dbd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ce72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce74:	f000 f8b8 	bl	800cfe8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ce78:	f000 fce4 	bl	800d844 <xTaskResumeAll>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d189      	bne.n	800cd96 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ce82:	4b10      	ldr	r3, [pc, #64]	; (800cec4 <xQueueReceive+0x1bc>)
 800ce84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce88:	601a      	str	r2, [r3, #0]
 800ce8a:	f3bf 8f4f 	dsb	sy
 800ce8e:	f3bf 8f6f 	isb	sy
 800ce92:	e780      	b.n	800cd96 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ce94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce96:	f000 f8a7 	bl	800cfe8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce9a:	f000 fcd3 	bl	800d844 <xTaskResumeAll>
 800ce9e:	e77a      	b.n	800cd96 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cea2:	f000 f8a1 	bl	800cfe8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cea6:	f000 fccd 	bl	800d844 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ceaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ceac:	f000 f8ee 	bl	800d08c <prvIsQueueEmpty>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	f43f af6f 	beq.w	800cd96 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ceb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3730      	adds	r7, #48	; 0x30
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
 800cec2:	bf00      	nop
 800cec4:	e000ed04 	.word	0xe000ed04

0800cec8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b086      	sub	sp, #24
 800cecc:	af00      	add	r7, sp, #0
 800cece:	60f8      	str	r0, [r7, #12]
 800ced0:	60b9      	str	r1, [r7, #8]
 800ced2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ced4:	2300      	movs	r3, #0
 800ced6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cedc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d10d      	bne.n	800cf02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d14d      	bne.n	800cf8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	689b      	ldr	r3, [r3, #8]
 800cef2:	4618      	mov	r0, r3
 800cef4:	f001 f898 	bl	800e028 <xTaskPriorityDisinherit>
 800cef8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	2200      	movs	r2, #0
 800cefe:	609a      	str	r2, [r3, #8]
 800cf00:	e043      	b.n	800cf8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d119      	bne.n	800cf3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	6858      	ldr	r0, [r3, #4]
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf10:	461a      	mov	r2, r3
 800cf12:	68b9      	ldr	r1, [r7, #8]
 800cf14:	f002 fdf6 	bl	800fb04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	685a      	ldr	r2, [r3, #4]
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf20:	441a      	add	r2, r3
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	685a      	ldr	r2, [r3, #4]
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	689b      	ldr	r3, [r3, #8]
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d32b      	bcc.n	800cf8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	681a      	ldr	r2, [r3, #0]
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	605a      	str	r2, [r3, #4]
 800cf3a:	e026      	b.n	800cf8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	68d8      	ldr	r0, [r3, #12]
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf44:	461a      	mov	r2, r3
 800cf46:	68b9      	ldr	r1, [r7, #8]
 800cf48:	f002 fddc 	bl	800fb04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	68da      	ldr	r2, [r3, #12]
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf54:	425b      	negs	r3, r3
 800cf56:	441a      	add	r2, r3
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	68da      	ldr	r2, [r3, #12]
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d207      	bcs.n	800cf78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	689a      	ldr	r2, [r3, #8]
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf70:	425b      	negs	r3, r3
 800cf72:	441a      	add	r2, r3
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2b02      	cmp	r3, #2
 800cf7c:	d105      	bne.n	800cf8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d002      	beq.n	800cf8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	3b01      	subs	r3, #1
 800cf88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	1c5a      	adds	r2, r3, #1
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cf92:	697b      	ldr	r3, [r7, #20]
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3718      	adds	r7, #24
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}

0800cf9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b082      	sub	sp, #8
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d018      	beq.n	800cfe0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	68da      	ldr	r2, [r3, #12]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfb6:	441a      	add	r2, r3
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	68da      	ldr	r2, [r3, #12]
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	689b      	ldr	r3, [r3, #8]
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d303      	bcc.n	800cfd0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681a      	ldr	r2, [r3, #0]
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	68d9      	ldr	r1, [r3, #12]
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfd8:	461a      	mov	r2, r3
 800cfda:	6838      	ldr	r0, [r7, #0]
 800cfdc:	f002 fd92 	bl	800fb04 <memcpy>
	}
}
 800cfe0:	bf00      	nop
 800cfe2:	3708      	adds	r7, #8
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}

0800cfe8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b084      	sub	sp, #16
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cff0:	f001 fd58 	bl	800eaa4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cffa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cffc:	e011      	b.n	800d022 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d002:	2b00      	cmp	r3, #0
 800d004:	d012      	beq.n	800d02c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	3324      	adds	r3, #36	; 0x24
 800d00a:	4618      	mov	r0, r3
 800d00c:	f000 fe30 	bl	800dc70 <xTaskRemoveFromEventList>
 800d010:	4603      	mov	r3, r0
 800d012:	2b00      	cmp	r3, #0
 800d014:	d001      	beq.n	800d01a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d016:	f000 ff07 	bl	800de28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d01a:	7bfb      	ldrb	r3, [r7, #15]
 800d01c:	3b01      	subs	r3, #1
 800d01e:	b2db      	uxtb	r3, r3
 800d020:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d026:	2b00      	cmp	r3, #0
 800d028:	dce9      	bgt.n	800cffe <prvUnlockQueue+0x16>
 800d02a:	e000      	b.n	800d02e <prvUnlockQueue+0x46>
					break;
 800d02c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	22ff      	movs	r2, #255	; 0xff
 800d032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d036:	f001 fd65 	bl	800eb04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d03a:	f001 fd33 	bl	800eaa4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d044:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d046:	e011      	b.n	800d06c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	691b      	ldr	r3, [r3, #16]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d012      	beq.n	800d076 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	3310      	adds	r3, #16
 800d054:	4618      	mov	r0, r3
 800d056:	f000 fe0b 	bl	800dc70 <xTaskRemoveFromEventList>
 800d05a:	4603      	mov	r3, r0
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d001      	beq.n	800d064 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d060:	f000 fee2 	bl	800de28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d064:	7bbb      	ldrb	r3, [r7, #14]
 800d066:	3b01      	subs	r3, #1
 800d068:	b2db      	uxtb	r3, r3
 800d06a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d06c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d070:	2b00      	cmp	r3, #0
 800d072:	dce9      	bgt.n	800d048 <prvUnlockQueue+0x60>
 800d074:	e000      	b.n	800d078 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d076:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	22ff      	movs	r2, #255	; 0xff
 800d07c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d080:	f001 fd40 	bl	800eb04 <vPortExitCritical>
}
 800d084:	bf00      	nop
 800d086:	3710      	adds	r7, #16
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}

0800d08c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b084      	sub	sp, #16
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d094:	f001 fd06 	bl	800eaa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d102      	bne.n	800d0a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	60fb      	str	r3, [r7, #12]
 800d0a4:	e001      	b.n	800d0aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d0aa:	f001 fd2b 	bl	800eb04 <vPortExitCritical>

	return xReturn;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3710      	adds	r7, #16
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}

0800d0b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b084      	sub	sp, #16
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d0c0:	f001 fcf0 	bl	800eaa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d102      	bne.n	800d0d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	60fb      	str	r3, [r7, #12]
 800d0d4:	e001      	b.n	800d0da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d0da:	f001 fd13 	bl	800eb04 <vPortExitCritical>

	return xReturn;
 800d0de:	68fb      	ldr	r3, [r7, #12]
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3710      	adds	r7, #16
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d0e8:	b480      	push	{r7}
 800d0ea:	b085      	sub	sp, #20
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	60fb      	str	r3, [r7, #12]
 800d0f6:	e014      	b.n	800d122 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d0f8:	4a0f      	ldr	r2, [pc, #60]	; (800d138 <vQueueAddToRegistry+0x50>)
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d10b      	bne.n	800d11c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d104:	490c      	ldr	r1, [pc, #48]	; (800d138 <vQueueAddToRegistry+0x50>)
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	683a      	ldr	r2, [r7, #0]
 800d10a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d10e:	4a0a      	ldr	r2, [pc, #40]	; (800d138 <vQueueAddToRegistry+0x50>)
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	00db      	lsls	r3, r3, #3
 800d114:	4413      	add	r3, r2
 800d116:	687a      	ldr	r2, [r7, #4]
 800d118:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d11a:	e006      	b.n	800d12a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	3301      	adds	r3, #1
 800d120:	60fb      	str	r3, [r7, #12]
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	2b07      	cmp	r3, #7
 800d126:	d9e7      	bls.n	800d0f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d128:	bf00      	nop
 800d12a:	bf00      	nop
 800d12c:	3714      	adds	r7, #20
 800d12e:	46bd      	mov	sp, r7
 800d130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d134:	4770      	bx	lr
 800d136:	bf00      	nop
 800d138:	20001598 	.word	0x20001598

0800d13c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b086      	sub	sp, #24
 800d140:	af00      	add	r7, sp, #0
 800d142:	60f8      	str	r0, [r7, #12]
 800d144:	60b9      	str	r1, [r7, #8]
 800d146:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d14c:	f001 fcaa 	bl	800eaa4 <vPortEnterCritical>
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d156:	b25b      	sxtb	r3, r3
 800d158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d15c:	d103      	bne.n	800d166 <vQueueWaitForMessageRestricted+0x2a>
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	2200      	movs	r2, #0
 800d162:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d16c:	b25b      	sxtb	r3, r3
 800d16e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d172:	d103      	bne.n	800d17c <vQueueWaitForMessageRestricted+0x40>
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	2200      	movs	r2, #0
 800d178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d17c:	f001 fcc2 	bl	800eb04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d184:	2b00      	cmp	r3, #0
 800d186:	d106      	bne.n	800d196 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	3324      	adds	r3, #36	; 0x24
 800d18c:	687a      	ldr	r2, [r7, #4]
 800d18e:	68b9      	ldr	r1, [r7, #8]
 800d190:	4618      	mov	r0, r3
 800d192:	f000 fd41 	bl	800dc18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d196:	6978      	ldr	r0, [r7, #20]
 800d198:	f7ff ff26 	bl	800cfe8 <prvUnlockQueue>
	}
 800d19c:	bf00      	nop
 800d19e:	3718      	adds	r7, #24
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}

0800d1a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b08e      	sub	sp, #56	; 0x38
 800d1a8:	af04      	add	r7, sp, #16
 800d1aa:	60f8      	str	r0, [r7, #12]
 800d1ac:	60b9      	str	r1, [r7, #8]
 800d1ae:	607a      	str	r2, [r7, #4]
 800d1b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d1b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d10a      	bne.n	800d1ce <xTaskCreateStatic+0x2a>
	__asm volatile
 800d1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1bc:	f383 8811 	msr	BASEPRI, r3
 800d1c0:	f3bf 8f6f 	isb	sy
 800d1c4:	f3bf 8f4f 	dsb	sy
 800d1c8:	623b      	str	r3, [r7, #32]
}
 800d1ca:	bf00      	nop
 800d1cc:	e7fe      	b.n	800d1cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d10a      	bne.n	800d1ea <xTaskCreateStatic+0x46>
	__asm volatile
 800d1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d8:	f383 8811 	msr	BASEPRI, r3
 800d1dc:	f3bf 8f6f 	isb	sy
 800d1e0:	f3bf 8f4f 	dsb	sy
 800d1e4:	61fb      	str	r3, [r7, #28]
}
 800d1e6:	bf00      	nop
 800d1e8:	e7fe      	b.n	800d1e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d1ea:	236c      	movs	r3, #108	; 0x6c
 800d1ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	2b6c      	cmp	r3, #108	; 0x6c
 800d1f2:	d00a      	beq.n	800d20a <xTaskCreateStatic+0x66>
	__asm volatile
 800d1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f8:	f383 8811 	msr	BASEPRI, r3
 800d1fc:	f3bf 8f6f 	isb	sy
 800d200:	f3bf 8f4f 	dsb	sy
 800d204:	61bb      	str	r3, [r7, #24]
}
 800d206:	bf00      	nop
 800d208:	e7fe      	b.n	800d208 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d20a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d01e      	beq.n	800d250 <xTaskCreateStatic+0xac>
 800d212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d214:	2b00      	cmp	r3, #0
 800d216:	d01b      	beq.n	800d250 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d21a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d21e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d220:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d224:	2202      	movs	r2, #2
 800d226:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d22a:	2300      	movs	r3, #0
 800d22c:	9303      	str	r3, [sp, #12]
 800d22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d230:	9302      	str	r3, [sp, #8]
 800d232:	f107 0314 	add.w	r3, r7, #20
 800d236:	9301      	str	r3, [sp, #4]
 800d238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d23a:	9300      	str	r3, [sp, #0]
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	687a      	ldr	r2, [r7, #4]
 800d240:	68b9      	ldr	r1, [r7, #8]
 800d242:	68f8      	ldr	r0, [r7, #12]
 800d244:	f000 f850 	bl	800d2e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d248:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d24a:	f000 f8dd 	bl	800d408 <prvAddNewTaskToReadyList>
 800d24e:	e001      	b.n	800d254 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d250:	2300      	movs	r3, #0
 800d252:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d254:	697b      	ldr	r3, [r7, #20]
	}
 800d256:	4618      	mov	r0, r3
 800d258:	3728      	adds	r7, #40	; 0x28
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}

0800d25e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d25e:	b580      	push	{r7, lr}
 800d260:	b08c      	sub	sp, #48	; 0x30
 800d262:	af04      	add	r7, sp, #16
 800d264:	60f8      	str	r0, [r7, #12]
 800d266:	60b9      	str	r1, [r7, #8]
 800d268:	603b      	str	r3, [r7, #0]
 800d26a:	4613      	mov	r3, r2
 800d26c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d26e:	88fb      	ldrh	r3, [r7, #6]
 800d270:	009b      	lsls	r3, r3, #2
 800d272:	4618      	mov	r0, r3
 800d274:	f001 fd38 	bl	800ece8 <pvPortMalloc>
 800d278:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d00e      	beq.n	800d29e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d280:	206c      	movs	r0, #108	; 0x6c
 800d282:	f001 fd31 	bl	800ece8 <pvPortMalloc>
 800d286:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d288:	69fb      	ldr	r3, [r7, #28]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d003      	beq.n	800d296 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d28e:	69fb      	ldr	r3, [r7, #28]
 800d290:	697a      	ldr	r2, [r7, #20]
 800d292:	631a      	str	r2, [r3, #48]	; 0x30
 800d294:	e005      	b.n	800d2a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d296:	6978      	ldr	r0, [r7, #20]
 800d298:	f001 fdf2 	bl	800ee80 <vPortFree>
 800d29c:	e001      	b.n	800d2a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d2a2:	69fb      	ldr	r3, [r7, #28]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d017      	beq.n	800d2d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d2a8:	69fb      	ldr	r3, [r7, #28]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d2b0:	88fa      	ldrh	r2, [r7, #6]
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	9303      	str	r3, [sp, #12]
 800d2b6:	69fb      	ldr	r3, [r7, #28]
 800d2b8:	9302      	str	r3, [sp, #8]
 800d2ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2bc:	9301      	str	r3, [sp, #4]
 800d2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2c0:	9300      	str	r3, [sp, #0]
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	68b9      	ldr	r1, [r7, #8]
 800d2c6:	68f8      	ldr	r0, [r7, #12]
 800d2c8:	f000 f80e 	bl	800d2e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d2cc:	69f8      	ldr	r0, [r7, #28]
 800d2ce:	f000 f89b 	bl	800d408 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	61bb      	str	r3, [r7, #24]
 800d2d6:	e002      	b.n	800d2de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d2d8:	f04f 33ff 	mov.w	r3, #4294967295
 800d2dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d2de:	69bb      	ldr	r3, [r7, #24]
	}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3720      	adds	r7, #32
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b088      	sub	sp, #32
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	60f8      	str	r0, [r7, #12]
 800d2f0:	60b9      	str	r1, [r7, #8]
 800d2f2:	607a      	str	r2, [r7, #4]
 800d2f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	009b      	lsls	r3, r3, #2
 800d2fe:	461a      	mov	r2, r3
 800d300:	21a5      	movs	r1, #165	; 0xa5
 800d302:	f002 fc0d 	bl	800fb20 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d310:	3b01      	subs	r3, #1
 800d312:	009b      	lsls	r3, r3, #2
 800d314:	4413      	add	r3, r2
 800d316:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d318:	69bb      	ldr	r3, [r7, #24]
 800d31a:	f023 0307 	bic.w	r3, r3, #7
 800d31e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d320:	69bb      	ldr	r3, [r7, #24]
 800d322:	f003 0307 	and.w	r3, r3, #7
 800d326:	2b00      	cmp	r3, #0
 800d328:	d00a      	beq.n	800d340 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d32e:	f383 8811 	msr	BASEPRI, r3
 800d332:	f3bf 8f6f 	isb	sy
 800d336:	f3bf 8f4f 	dsb	sy
 800d33a:	617b      	str	r3, [r7, #20]
}
 800d33c:	bf00      	nop
 800d33e:	e7fe      	b.n	800d33e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d01f      	beq.n	800d386 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d346:	2300      	movs	r3, #0
 800d348:	61fb      	str	r3, [r7, #28]
 800d34a:	e012      	b.n	800d372 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d34c:	68ba      	ldr	r2, [r7, #8]
 800d34e:	69fb      	ldr	r3, [r7, #28]
 800d350:	4413      	add	r3, r2
 800d352:	7819      	ldrb	r1, [r3, #0]
 800d354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d356:	69fb      	ldr	r3, [r7, #28]
 800d358:	4413      	add	r3, r2
 800d35a:	3334      	adds	r3, #52	; 0x34
 800d35c:	460a      	mov	r2, r1
 800d35e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d360:	68ba      	ldr	r2, [r7, #8]
 800d362:	69fb      	ldr	r3, [r7, #28]
 800d364:	4413      	add	r3, r2
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d006      	beq.n	800d37a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d36c:	69fb      	ldr	r3, [r7, #28]
 800d36e:	3301      	adds	r3, #1
 800d370:	61fb      	str	r3, [r7, #28]
 800d372:	69fb      	ldr	r3, [r7, #28]
 800d374:	2b1d      	cmp	r3, #29
 800d376:	d9e9      	bls.n	800d34c <prvInitialiseNewTask+0x64>
 800d378:	e000      	b.n	800d37c <prvInitialiseNewTask+0x94>
			{
				break;
 800d37a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d37e:	2200      	movs	r2, #0
 800d380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800d384:	e003      	b.n	800d38e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d388:	2200      	movs	r2, #0
 800d38a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d390:	2b37      	cmp	r3, #55	; 0x37
 800d392:	d901      	bls.n	800d398 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d394:	2337      	movs	r3, #55	; 0x37
 800d396:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d39a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d39c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3a2:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800d3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ac:	3304      	adds	r3, #4
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f7ff f93e 	bl	800c630 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b6:	3318      	adds	r3, #24
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f7ff f939 	bl	800c630 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3dc:	2200      	movs	r2, #0
 800d3de:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d3e2:	683a      	ldr	r2, [r7, #0]
 800d3e4:	68f9      	ldr	r1, [r7, #12]
 800d3e6:	69b8      	ldr	r0, [r7, #24]
 800d3e8:	f001 fa2e 	bl	800e848 <pxPortInitialiseStack>
 800d3ec:	4602      	mov	r2, r0
 800d3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d002      	beq.n	800d3fe <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d3fe:	bf00      	nop
 800d400:	3720      	adds	r7, #32
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}
	...

0800d408 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b082      	sub	sp, #8
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d410:	f001 fb48 	bl	800eaa4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d414:	4b2d      	ldr	r3, [pc, #180]	; (800d4cc <prvAddNewTaskToReadyList+0xc4>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	3301      	adds	r3, #1
 800d41a:	4a2c      	ldr	r2, [pc, #176]	; (800d4cc <prvAddNewTaskToReadyList+0xc4>)
 800d41c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d41e:	4b2c      	ldr	r3, [pc, #176]	; (800d4d0 <prvAddNewTaskToReadyList+0xc8>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d109      	bne.n	800d43a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d426:	4a2a      	ldr	r2, [pc, #168]	; (800d4d0 <prvAddNewTaskToReadyList+0xc8>)
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d42c:	4b27      	ldr	r3, [pc, #156]	; (800d4cc <prvAddNewTaskToReadyList+0xc4>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	2b01      	cmp	r3, #1
 800d432:	d110      	bne.n	800d456 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d434:	f000 fd1c 	bl	800de70 <prvInitialiseTaskLists>
 800d438:	e00d      	b.n	800d456 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d43a:	4b26      	ldr	r3, [pc, #152]	; (800d4d4 <prvAddNewTaskToReadyList+0xcc>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d109      	bne.n	800d456 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d442:	4b23      	ldr	r3, [pc, #140]	; (800d4d0 <prvAddNewTaskToReadyList+0xc8>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d802      	bhi.n	800d456 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d450:	4a1f      	ldr	r2, [pc, #124]	; (800d4d0 <prvAddNewTaskToReadyList+0xc8>)
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d456:	4b20      	ldr	r3, [pc, #128]	; (800d4d8 <prvAddNewTaskToReadyList+0xd0>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	3301      	adds	r3, #1
 800d45c:	4a1e      	ldr	r2, [pc, #120]	; (800d4d8 <prvAddNewTaskToReadyList+0xd0>)
 800d45e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d460:	4b1d      	ldr	r3, [pc, #116]	; (800d4d8 <prvAddNewTaskToReadyList+0xd0>)
 800d462:	681a      	ldr	r2, [r3, #0]
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d46c:	4b1b      	ldr	r3, [pc, #108]	; (800d4dc <prvAddNewTaskToReadyList+0xd4>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	429a      	cmp	r2, r3
 800d472:	d903      	bls.n	800d47c <prvAddNewTaskToReadyList+0x74>
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d478:	4a18      	ldr	r2, [pc, #96]	; (800d4dc <prvAddNewTaskToReadyList+0xd4>)
 800d47a:	6013      	str	r3, [r2, #0]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d480:	4613      	mov	r3, r2
 800d482:	009b      	lsls	r3, r3, #2
 800d484:	4413      	add	r3, r2
 800d486:	009b      	lsls	r3, r3, #2
 800d488:	4a15      	ldr	r2, [pc, #84]	; (800d4e0 <prvAddNewTaskToReadyList+0xd8>)
 800d48a:	441a      	add	r2, r3
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	3304      	adds	r3, #4
 800d490:	4619      	mov	r1, r3
 800d492:	4610      	mov	r0, r2
 800d494:	f7ff f8d9 	bl	800c64a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d498:	f001 fb34 	bl	800eb04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d49c:	4b0d      	ldr	r3, [pc, #52]	; (800d4d4 <prvAddNewTaskToReadyList+0xcc>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d00e      	beq.n	800d4c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d4a4:	4b0a      	ldr	r3, [pc, #40]	; (800d4d0 <prvAddNewTaskToReadyList+0xc8>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d207      	bcs.n	800d4c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d4b2:	4b0c      	ldr	r3, [pc, #48]	; (800d4e4 <prvAddNewTaskToReadyList+0xdc>)
 800d4b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4b8:	601a      	str	r2, [r3, #0]
 800d4ba:	f3bf 8f4f 	dsb	sy
 800d4be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d4c2:	bf00      	nop
 800d4c4:	3708      	adds	r7, #8
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	20001aac 	.word	0x20001aac
 800d4d0:	200015d8 	.word	0x200015d8
 800d4d4:	20001ab8 	.word	0x20001ab8
 800d4d8:	20001ac8 	.word	0x20001ac8
 800d4dc:	20001ab4 	.word	0x20001ab4
 800d4e0:	200015dc 	.word	0x200015dc
 800d4e4:	e000ed04 	.word	0xe000ed04

0800d4e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b084      	sub	sp, #16
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d017      	beq.n	800d52a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d4fa:	4b13      	ldr	r3, [pc, #76]	; (800d548 <vTaskDelay+0x60>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d00a      	beq.n	800d518 <vTaskDelay+0x30>
	__asm volatile
 800d502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d506:	f383 8811 	msr	BASEPRI, r3
 800d50a:	f3bf 8f6f 	isb	sy
 800d50e:	f3bf 8f4f 	dsb	sy
 800d512:	60bb      	str	r3, [r7, #8]
}
 800d514:	bf00      	nop
 800d516:	e7fe      	b.n	800d516 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d518:	f000 f986 	bl	800d828 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d51c:	2100      	movs	r1, #0
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f000 fdf0 	bl	800e104 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d524:	f000 f98e 	bl	800d844 <xTaskResumeAll>
 800d528:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d107      	bne.n	800d540 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d530:	4b06      	ldr	r3, [pc, #24]	; (800d54c <vTaskDelay+0x64>)
 800d532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d536:	601a      	str	r2, [r3, #0]
 800d538:	f3bf 8f4f 	dsb	sy
 800d53c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d540:	bf00      	nop
 800d542:	3710      	adds	r7, #16
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}
 800d548:	20001ad4 	.word	0x20001ad4
 800d54c:	e000ed04 	.word	0xe000ed04

0800d550 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800d550:	b580      	push	{r7, lr}
 800d552:	b084      	sub	sp, #16
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d558:	f001 faa4 	bl	800eaa4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d102      	bne.n	800d568 <vTaskSuspend+0x18>
 800d562:	4b30      	ldr	r3, [pc, #192]	; (800d624 <vTaskSuspend+0xd4>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	e000      	b.n	800d56a <vTaskSuspend+0x1a>
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	3304      	adds	r3, #4
 800d570:	4618      	mov	r0, r3
 800d572:	f7ff f8c7 	bl	800c704 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d004      	beq.n	800d588 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	3318      	adds	r3, #24
 800d582:	4618      	mov	r0, r3
 800d584:	f7ff f8be 	bl	800c704 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	3304      	adds	r3, #4
 800d58c:	4619      	mov	r1, r3
 800d58e:	4826      	ldr	r0, [pc, #152]	; (800d628 <vTaskSuspend+0xd8>)
 800d590:	f7ff f85b 	bl	800c64a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800d59a:	b2db      	uxtb	r3, r3
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d103      	bne.n	800d5a8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800d5a8:	f001 faac 	bl	800eb04 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800d5ac:	4b1f      	ldr	r3, [pc, #124]	; (800d62c <vTaskSuspend+0xdc>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d005      	beq.n	800d5c0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800d5b4:	f001 fa76 	bl	800eaa4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800d5b8:	f000 fcf8 	bl	800dfac <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800d5bc:	f001 faa2 	bl	800eb04 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800d5c0:	4b18      	ldr	r3, [pc, #96]	; (800d624 <vTaskSuspend+0xd4>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	68fa      	ldr	r2, [r7, #12]
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d127      	bne.n	800d61a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800d5ca:	4b18      	ldr	r3, [pc, #96]	; (800d62c <vTaskSuspend+0xdc>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d017      	beq.n	800d602 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800d5d2:	4b17      	ldr	r3, [pc, #92]	; (800d630 <vTaskSuspend+0xe0>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d00a      	beq.n	800d5f0 <vTaskSuspend+0xa0>
	__asm volatile
 800d5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5de:	f383 8811 	msr	BASEPRI, r3
 800d5e2:	f3bf 8f6f 	isb	sy
 800d5e6:	f3bf 8f4f 	dsb	sy
 800d5ea:	60bb      	str	r3, [r7, #8]
}
 800d5ec:	bf00      	nop
 800d5ee:	e7fe      	b.n	800d5ee <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800d5f0:	4b10      	ldr	r3, [pc, #64]	; (800d634 <vTaskSuspend+0xe4>)
 800d5f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5f6:	601a      	str	r2, [r3, #0]
 800d5f8:	f3bf 8f4f 	dsb	sy
 800d5fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d600:	e00b      	b.n	800d61a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800d602:	4b09      	ldr	r3, [pc, #36]	; (800d628 <vTaskSuspend+0xd8>)
 800d604:	681a      	ldr	r2, [r3, #0]
 800d606:	4b0c      	ldr	r3, [pc, #48]	; (800d638 <vTaskSuspend+0xe8>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	429a      	cmp	r2, r3
 800d60c:	d103      	bne.n	800d616 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800d60e:	4b05      	ldr	r3, [pc, #20]	; (800d624 <vTaskSuspend+0xd4>)
 800d610:	2200      	movs	r2, #0
 800d612:	601a      	str	r2, [r3, #0]
	}
 800d614:	e001      	b.n	800d61a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800d616:	f000 fa7d 	bl	800db14 <vTaskSwitchContext>
	}
 800d61a:	bf00      	nop
 800d61c:	3710      	adds	r7, #16
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}
 800d622:	bf00      	nop
 800d624:	200015d8 	.word	0x200015d8
 800d628:	20001a98 	.word	0x20001a98
 800d62c:	20001ab8 	.word	0x20001ab8
 800d630:	20001ad4 	.word	0x20001ad4
 800d634:	e000ed04 	.word	0xe000ed04
 800d638:	20001aac 	.word	0x20001aac

0800d63c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800d63c:	b480      	push	{r7}
 800d63e:	b087      	sub	sp, #28
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800d644:	2300      	movs	r3, #0
 800d646:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d10a      	bne.n	800d668 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800d652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d656:	f383 8811 	msr	BASEPRI, r3
 800d65a:	f3bf 8f6f 	isb	sy
 800d65e:	f3bf 8f4f 	dsb	sy
 800d662:	60fb      	str	r3, [r7, #12]
}
 800d664:	bf00      	nop
 800d666:	e7fe      	b.n	800d666 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	695b      	ldr	r3, [r3, #20]
 800d66c:	4a0a      	ldr	r2, [pc, #40]	; (800d698 <prvTaskIsTaskSuspended+0x5c>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	d10a      	bne.n	800d688 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800d672:	693b      	ldr	r3, [r7, #16]
 800d674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d676:	4a09      	ldr	r2, [pc, #36]	; (800d69c <prvTaskIsTaskSuspended+0x60>)
 800d678:	4293      	cmp	r3, r2
 800d67a:	d005      	beq.n	800d688 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800d67c:	693b      	ldr	r3, [r7, #16]
 800d67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d680:	2b00      	cmp	r3, #0
 800d682:	d101      	bne.n	800d688 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800d684:	2301      	movs	r3, #1
 800d686:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d688:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800d68a:	4618      	mov	r0, r3
 800d68c:	371c      	adds	r7, #28
 800d68e:	46bd      	mov	sp, r7
 800d690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d694:	4770      	bx	lr
 800d696:	bf00      	nop
 800d698:	20001a98 	.word	0x20001a98
 800d69c:	20001a6c 	.word	0x20001a6c

0800d6a0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b084      	sub	sp, #16
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d10a      	bne.n	800d6c8 <vTaskResume+0x28>
	__asm volatile
 800d6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b6:	f383 8811 	msr	BASEPRI, r3
 800d6ba:	f3bf 8f6f 	isb	sy
 800d6be:	f3bf 8f4f 	dsb	sy
 800d6c2:	60bb      	str	r3, [r7, #8]
}
 800d6c4:	bf00      	nop
 800d6c6:	e7fe      	b.n	800d6c6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800d6c8:	4b20      	ldr	r3, [pc, #128]	; (800d74c <vTaskResume+0xac>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	68fa      	ldr	r2, [r7, #12]
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	d038      	beq.n	800d744 <vTaskResume+0xa4>
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d035      	beq.n	800d744 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800d6d8:	f001 f9e4 	bl	800eaa4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800d6dc:	68f8      	ldr	r0, [r7, #12]
 800d6de:	f7ff ffad 	bl	800d63c <prvTaskIsTaskSuspended>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d02b      	beq.n	800d740 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	3304      	adds	r3, #4
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f7ff f809 	bl	800c704 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6f6:	4b16      	ldr	r3, [pc, #88]	; (800d750 <vTaskResume+0xb0>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	d903      	bls.n	800d706 <vTaskResume+0x66>
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d702:	4a13      	ldr	r2, [pc, #76]	; (800d750 <vTaskResume+0xb0>)
 800d704:	6013      	str	r3, [r2, #0]
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d70a:	4613      	mov	r3, r2
 800d70c:	009b      	lsls	r3, r3, #2
 800d70e:	4413      	add	r3, r2
 800d710:	009b      	lsls	r3, r3, #2
 800d712:	4a10      	ldr	r2, [pc, #64]	; (800d754 <vTaskResume+0xb4>)
 800d714:	441a      	add	r2, r3
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	3304      	adds	r3, #4
 800d71a:	4619      	mov	r1, r3
 800d71c:	4610      	mov	r0, r2
 800d71e:	f7fe ff94 	bl	800c64a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d726:	4b09      	ldr	r3, [pc, #36]	; (800d74c <vTaskResume+0xac>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d307      	bcc.n	800d740 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800d730:	4b09      	ldr	r3, [pc, #36]	; (800d758 <vTaskResume+0xb8>)
 800d732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d736:	601a      	str	r2, [r3, #0]
 800d738:	f3bf 8f4f 	dsb	sy
 800d73c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800d740:	f001 f9e0 	bl	800eb04 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d744:	bf00      	nop
 800d746:	3710      	adds	r7, #16
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}
 800d74c:	200015d8 	.word	0x200015d8
 800d750:	20001ab4 	.word	0x20001ab4
 800d754:	200015dc 	.word	0x200015dc
 800d758:	e000ed04 	.word	0xe000ed04

0800d75c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b08a      	sub	sp, #40	; 0x28
 800d760:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d762:	2300      	movs	r3, #0
 800d764:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d766:	2300      	movs	r3, #0
 800d768:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d76a:	463a      	mov	r2, r7
 800d76c:	1d39      	adds	r1, r7, #4
 800d76e:	f107 0308 	add.w	r3, r7, #8
 800d772:	4618      	mov	r0, r3
 800d774:	f7fe ff08 	bl	800c588 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d778:	6839      	ldr	r1, [r7, #0]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	68ba      	ldr	r2, [r7, #8]
 800d77e:	9202      	str	r2, [sp, #8]
 800d780:	9301      	str	r3, [sp, #4]
 800d782:	2300      	movs	r3, #0
 800d784:	9300      	str	r3, [sp, #0]
 800d786:	2300      	movs	r3, #0
 800d788:	460a      	mov	r2, r1
 800d78a:	4921      	ldr	r1, [pc, #132]	; (800d810 <vTaskStartScheduler+0xb4>)
 800d78c:	4821      	ldr	r0, [pc, #132]	; (800d814 <vTaskStartScheduler+0xb8>)
 800d78e:	f7ff fd09 	bl	800d1a4 <xTaskCreateStatic>
 800d792:	4603      	mov	r3, r0
 800d794:	4a20      	ldr	r2, [pc, #128]	; (800d818 <vTaskStartScheduler+0xbc>)
 800d796:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d798:	4b1f      	ldr	r3, [pc, #124]	; (800d818 <vTaskStartScheduler+0xbc>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d002      	beq.n	800d7a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	617b      	str	r3, [r7, #20]
 800d7a4:	e001      	b.n	800d7aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	2b01      	cmp	r3, #1
 800d7ae:	d102      	bne.n	800d7b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d7b0:	f000 fcfc 	bl	800e1ac <xTimerCreateTimerTask>
 800d7b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	2b01      	cmp	r3, #1
 800d7ba:	d116      	bne.n	800d7ea <vTaskStartScheduler+0x8e>
	__asm volatile
 800d7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c0:	f383 8811 	msr	BASEPRI, r3
 800d7c4:	f3bf 8f6f 	isb	sy
 800d7c8:	f3bf 8f4f 	dsb	sy
 800d7cc:	613b      	str	r3, [r7, #16]
}
 800d7ce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d7d0:	4b12      	ldr	r3, [pc, #72]	; (800d81c <vTaskStartScheduler+0xc0>)
 800d7d2:	f04f 32ff 	mov.w	r2, #4294967295
 800d7d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d7d8:	4b11      	ldr	r3, [pc, #68]	; (800d820 <vTaskStartScheduler+0xc4>)
 800d7da:	2201      	movs	r2, #1
 800d7dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d7de:	4b11      	ldr	r3, [pc, #68]	; (800d824 <vTaskStartScheduler+0xc8>)
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d7e4:	f001 f8bc 	bl	800e960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d7e8:	e00e      	b.n	800d808 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7f0:	d10a      	bne.n	800d808 <vTaskStartScheduler+0xac>
	__asm volatile
 800d7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7f6:	f383 8811 	msr	BASEPRI, r3
 800d7fa:	f3bf 8f6f 	isb	sy
 800d7fe:	f3bf 8f4f 	dsb	sy
 800d802:	60fb      	str	r3, [r7, #12]
}
 800d804:	bf00      	nop
 800d806:	e7fe      	b.n	800d806 <vTaskStartScheduler+0xaa>
}
 800d808:	bf00      	nop
 800d80a:	3718      	adds	r7, #24
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}
 800d810:	080107b8 	.word	0x080107b8
 800d814:	0800de41 	.word	0x0800de41
 800d818:	20001ad0 	.word	0x20001ad0
 800d81c:	20001acc 	.word	0x20001acc
 800d820:	20001ab8 	.word	0x20001ab8
 800d824:	20001ab0 	.word	0x20001ab0

0800d828 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d828:	b480      	push	{r7}
 800d82a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d82c:	4b04      	ldr	r3, [pc, #16]	; (800d840 <vTaskSuspendAll+0x18>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	3301      	adds	r3, #1
 800d832:	4a03      	ldr	r2, [pc, #12]	; (800d840 <vTaskSuspendAll+0x18>)
 800d834:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d836:	bf00      	nop
 800d838:	46bd      	mov	sp, r7
 800d83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83e:	4770      	bx	lr
 800d840:	20001ad4 	.word	0x20001ad4

0800d844 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b084      	sub	sp, #16
 800d848:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d84a:	2300      	movs	r3, #0
 800d84c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d84e:	2300      	movs	r3, #0
 800d850:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d852:	4b42      	ldr	r3, [pc, #264]	; (800d95c <xTaskResumeAll+0x118>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d10a      	bne.n	800d870 <xTaskResumeAll+0x2c>
	__asm volatile
 800d85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d85e:	f383 8811 	msr	BASEPRI, r3
 800d862:	f3bf 8f6f 	isb	sy
 800d866:	f3bf 8f4f 	dsb	sy
 800d86a:	603b      	str	r3, [r7, #0]
}
 800d86c:	bf00      	nop
 800d86e:	e7fe      	b.n	800d86e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d870:	f001 f918 	bl	800eaa4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d874:	4b39      	ldr	r3, [pc, #228]	; (800d95c <xTaskResumeAll+0x118>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	3b01      	subs	r3, #1
 800d87a:	4a38      	ldr	r2, [pc, #224]	; (800d95c <xTaskResumeAll+0x118>)
 800d87c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d87e:	4b37      	ldr	r3, [pc, #220]	; (800d95c <xTaskResumeAll+0x118>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d162      	bne.n	800d94c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d886:	4b36      	ldr	r3, [pc, #216]	; (800d960 <xTaskResumeAll+0x11c>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d05e      	beq.n	800d94c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d88e:	e02f      	b.n	800d8f0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d890:	4b34      	ldr	r3, [pc, #208]	; (800d964 <xTaskResumeAll+0x120>)
 800d892:	68db      	ldr	r3, [r3, #12]
 800d894:	68db      	ldr	r3, [r3, #12]
 800d896:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	3318      	adds	r3, #24
 800d89c:	4618      	mov	r0, r3
 800d89e:	f7fe ff31 	bl	800c704 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	3304      	adds	r3, #4
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f7fe ff2c 	bl	800c704 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8b0:	4b2d      	ldr	r3, [pc, #180]	; (800d968 <xTaskResumeAll+0x124>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	429a      	cmp	r2, r3
 800d8b6:	d903      	bls.n	800d8c0 <xTaskResumeAll+0x7c>
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8bc:	4a2a      	ldr	r2, [pc, #168]	; (800d968 <xTaskResumeAll+0x124>)
 800d8be:	6013      	str	r3, [r2, #0]
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8c4:	4613      	mov	r3, r2
 800d8c6:	009b      	lsls	r3, r3, #2
 800d8c8:	4413      	add	r3, r2
 800d8ca:	009b      	lsls	r3, r3, #2
 800d8cc:	4a27      	ldr	r2, [pc, #156]	; (800d96c <xTaskResumeAll+0x128>)
 800d8ce:	441a      	add	r2, r3
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	3304      	adds	r3, #4
 800d8d4:	4619      	mov	r1, r3
 800d8d6:	4610      	mov	r0, r2
 800d8d8:	f7fe feb7 	bl	800c64a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8e0:	4b23      	ldr	r3, [pc, #140]	; (800d970 <xTaskResumeAll+0x12c>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e6:	429a      	cmp	r2, r3
 800d8e8:	d302      	bcc.n	800d8f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d8ea:	4b22      	ldr	r3, [pc, #136]	; (800d974 <xTaskResumeAll+0x130>)
 800d8ec:	2201      	movs	r2, #1
 800d8ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d8f0:	4b1c      	ldr	r3, [pc, #112]	; (800d964 <xTaskResumeAll+0x120>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d1cb      	bne.n	800d890 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d001      	beq.n	800d902 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d8fe:	f000 fb55 	bl	800dfac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d902:	4b1d      	ldr	r3, [pc, #116]	; (800d978 <xTaskResumeAll+0x134>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d010      	beq.n	800d930 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d90e:	f000 f847 	bl	800d9a0 <xTaskIncrementTick>
 800d912:	4603      	mov	r3, r0
 800d914:	2b00      	cmp	r3, #0
 800d916:	d002      	beq.n	800d91e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d918:	4b16      	ldr	r3, [pc, #88]	; (800d974 <xTaskResumeAll+0x130>)
 800d91a:	2201      	movs	r2, #1
 800d91c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	3b01      	subs	r3, #1
 800d922:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d1f1      	bne.n	800d90e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d92a:	4b13      	ldr	r3, [pc, #76]	; (800d978 <xTaskResumeAll+0x134>)
 800d92c:	2200      	movs	r2, #0
 800d92e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d930:	4b10      	ldr	r3, [pc, #64]	; (800d974 <xTaskResumeAll+0x130>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d009      	beq.n	800d94c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d938:	2301      	movs	r3, #1
 800d93a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d93c:	4b0f      	ldr	r3, [pc, #60]	; (800d97c <xTaskResumeAll+0x138>)
 800d93e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d942:	601a      	str	r2, [r3, #0]
 800d944:	f3bf 8f4f 	dsb	sy
 800d948:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d94c:	f001 f8da 	bl	800eb04 <vPortExitCritical>

	return xAlreadyYielded;
 800d950:	68bb      	ldr	r3, [r7, #8]
}
 800d952:	4618      	mov	r0, r3
 800d954:	3710      	adds	r7, #16
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}
 800d95a:	bf00      	nop
 800d95c:	20001ad4 	.word	0x20001ad4
 800d960:	20001aac 	.word	0x20001aac
 800d964:	20001a6c 	.word	0x20001a6c
 800d968:	20001ab4 	.word	0x20001ab4
 800d96c:	200015dc 	.word	0x200015dc
 800d970:	200015d8 	.word	0x200015d8
 800d974:	20001ac0 	.word	0x20001ac0
 800d978:	20001abc 	.word	0x20001abc
 800d97c:	e000ed04 	.word	0xe000ed04

0800d980 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d980:	b480      	push	{r7}
 800d982:	b083      	sub	sp, #12
 800d984:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d986:	4b05      	ldr	r3, [pc, #20]	; (800d99c <xTaskGetTickCount+0x1c>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d98c:	687b      	ldr	r3, [r7, #4]
}
 800d98e:	4618      	mov	r0, r3
 800d990:	370c      	adds	r7, #12
 800d992:	46bd      	mov	sp, r7
 800d994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d998:	4770      	bx	lr
 800d99a:	bf00      	nop
 800d99c:	20001ab0 	.word	0x20001ab0

0800d9a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b086      	sub	sp, #24
 800d9a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d9aa:	4b4f      	ldr	r3, [pc, #316]	; (800dae8 <xTaskIncrementTick+0x148>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	f040 808f 	bne.w	800dad2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d9b4:	4b4d      	ldr	r3, [pc, #308]	; (800daec <xTaskIncrementTick+0x14c>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	3301      	adds	r3, #1
 800d9ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d9bc:	4a4b      	ldr	r2, [pc, #300]	; (800daec <xTaskIncrementTick+0x14c>)
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d120      	bne.n	800da0a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d9c8:	4b49      	ldr	r3, [pc, #292]	; (800daf0 <xTaskIncrementTick+0x150>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d00a      	beq.n	800d9e8 <xTaskIncrementTick+0x48>
	__asm volatile
 800d9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d6:	f383 8811 	msr	BASEPRI, r3
 800d9da:	f3bf 8f6f 	isb	sy
 800d9de:	f3bf 8f4f 	dsb	sy
 800d9e2:	603b      	str	r3, [r7, #0]
}
 800d9e4:	bf00      	nop
 800d9e6:	e7fe      	b.n	800d9e6 <xTaskIncrementTick+0x46>
 800d9e8:	4b41      	ldr	r3, [pc, #260]	; (800daf0 <xTaskIncrementTick+0x150>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	60fb      	str	r3, [r7, #12]
 800d9ee:	4b41      	ldr	r3, [pc, #260]	; (800daf4 <xTaskIncrementTick+0x154>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	4a3f      	ldr	r2, [pc, #252]	; (800daf0 <xTaskIncrementTick+0x150>)
 800d9f4:	6013      	str	r3, [r2, #0]
 800d9f6:	4a3f      	ldr	r2, [pc, #252]	; (800daf4 <xTaskIncrementTick+0x154>)
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	6013      	str	r3, [r2, #0]
 800d9fc:	4b3e      	ldr	r3, [pc, #248]	; (800daf8 <xTaskIncrementTick+0x158>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	3301      	adds	r3, #1
 800da02:	4a3d      	ldr	r2, [pc, #244]	; (800daf8 <xTaskIncrementTick+0x158>)
 800da04:	6013      	str	r3, [r2, #0]
 800da06:	f000 fad1 	bl	800dfac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800da0a:	4b3c      	ldr	r3, [pc, #240]	; (800dafc <xTaskIncrementTick+0x15c>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	693a      	ldr	r2, [r7, #16]
 800da10:	429a      	cmp	r2, r3
 800da12:	d349      	bcc.n	800daa8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da14:	4b36      	ldr	r3, [pc, #216]	; (800daf0 <xTaskIncrementTick+0x150>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d104      	bne.n	800da28 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da1e:	4b37      	ldr	r3, [pc, #220]	; (800dafc <xTaskIncrementTick+0x15c>)
 800da20:	f04f 32ff 	mov.w	r2, #4294967295
 800da24:	601a      	str	r2, [r3, #0]
					break;
 800da26:	e03f      	b.n	800daa8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da28:	4b31      	ldr	r3, [pc, #196]	; (800daf0 <xTaskIncrementTick+0x150>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	68db      	ldr	r3, [r3, #12]
 800da2e:	68db      	ldr	r3, [r3, #12]
 800da30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800da32:	68bb      	ldr	r3, [r7, #8]
 800da34:	685b      	ldr	r3, [r3, #4]
 800da36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800da38:	693a      	ldr	r2, [r7, #16]
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	429a      	cmp	r2, r3
 800da3e:	d203      	bcs.n	800da48 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800da40:	4a2e      	ldr	r2, [pc, #184]	; (800dafc <xTaskIncrementTick+0x15c>)
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800da46:	e02f      	b.n	800daa8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	3304      	adds	r3, #4
 800da4c:	4618      	mov	r0, r3
 800da4e:	f7fe fe59 	bl	800c704 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da56:	2b00      	cmp	r3, #0
 800da58:	d004      	beq.n	800da64 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	3318      	adds	r3, #24
 800da5e:	4618      	mov	r0, r3
 800da60:	f7fe fe50 	bl	800c704 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da68:	4b25      	ldr	r3, [pc, #148]	; (800db00 <xTaskIncrementTick+0x160>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	429a      	cmp	r2, r3
 800da6e:	d903      	bls.n	800da78 <xTaskIncrementTick+0xd8>
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da74:	4a22      	ldr	r2, [pc, #136]	; (800db00 <xTaskIncrementTick+0x160>)
 800da76:	6013      	str	r3, [r2, #0]
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da7c:	4613      	mov	r3, r2
 800da7e:	009b      	lsls	r3, r3, #2
 800da80:	4413      	add	r3, r2
 800da82:	009b      	lsls	r3, r3, #2
 800da84:	4a1f      	ldr	r2, [pc, #124]	; (800db04 <xTaskIncrementTick+0x164>)
 800da86:	441a      	add	r2, r3
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	3304      	adds	r3, #4
 800da8c:	4619      	mov	r1, r3
 800da8e:	4610      	mov	r0, r2
 800da90:	f7fe fddb 	bl	800c64a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da98:	4b1b      	ldr	r3, [pc, #108]	; (800db08 <xTaskIncrementTick+0x168>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da9e:	429a      	cmp	r2, r3
 800daa0:	d3b8      	bcc.n	800da14 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800daa2:	2301      	movs	r3, #1
 800daa4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800daa6:	e7b5      	b.n	800da14 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800daa8:	4b17      	ldr	r3, [pc, #92]	; (800db08 <xTaskIncrementTick+0x168>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daae:	4915      	ldr	r1, [pc, #84]	; (800db04 <xTaskIncrementTick+0x164>)
 800dab0:	4613      	mov	r3, r2
 800dab2:	009b      	lsls	r3, r3, #2
 800dab4:	4413      	add	r3, r2
 800dab6:	009b      	lsls	r3, r3, #2
 800dab8:	440b      	add	r3, r1
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	2b01      	cmp	r3, #1
 800dabe:	d901      	bls.n	800dac4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800dac0:	2301      	movs	r3, #1
 800dac2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dac4:	4b11      	ldr	r3, [pc, #68]	; (800db0c <xTaskIncrementTick+0x16c>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d007      	beq.n	800dadc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800dacc:	2301      	movs	r3, #1
 800dace:	617b      	str	r3, [r7, #20]
 800dad0:	e004      	b.n	800dadc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dad2:	4b0f      	ldr	r3, [pc, #60]	; (800db10 <xTaskIncrementTick+0x170>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	3301      	adds	r3, #1
 800dad8:	4a0d      	ldr	r2, [pc, #52]	; (800db10 <xTaskIncrementTick+0x170>)
 800dada:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dadc:	697b      	ldr	r3, [r7, #20]
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3718      	adds	r7, #24
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}
 800dae6:	bf00      	nop
 800dae8:	20001ad4 	.word	0x20001ad4
 800daec:	20001ab0 	.word	0x20001ab0
 800daf0:	20001a64 	.word	0x20001a64
 800daf4:	20001a68 	.word	0x20001a68
 800daf8:	20001ac4 	.word	0x20001ac4
 800dafc:	20001acc 	.word	0x20001acc
 800db00:	20001ab4 	.word	0x20001ab4
 800db04:	200015dc 	.word	0x200015dc
 800db08:	200015d8 	.word	0x200015d8
 800db0c:	20001ac0 	.word	0x20001ac0
 800db10:	20001abc 	.word	0x20001abc

0800db14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800db14:	b480      	push	{r7}
 800db16:	b085      	sub	sp, #20
 800db18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800db1a:	4b28      	ldr	r3, [pc, #160]	; (800dbbc <vTaskSwitchContext+0xa8>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d003      	beq.n	800db2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800db22:	4b27      	ldr	r3, [pc, #156]	; (800dbc0 <vTaskSwitchContext+0xac>)
 800db24:	2201      	movs	r2, #1
 800db26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800db28:	e041      	b.n	800dbae <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800db2a:	4b25      	ldr	r3, [pc, #148]	; (800dbc0 <vTaskSwitchContext+0xac>)
 800db2c:	2200      	movs	r2, #0
 800db2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db30:	4b24      	ldr	r3, [pc, #144]	; (800dbc4 <vTaskSwitchContext+0xb0>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	60fb      	str	r3, [r7, #12]
 800db36:	e010      	b.n	800db5a <vTaskSwitchContext+0x46>
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d10a      	bne.n	800db54 <vTaskSwitchContext+0x40>
	__asm volatile
 800db3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db42:	f383 8811 	msr	BASEPRI, r3
 800db46:	f3bf 8f6f 	isb	sy
 800db4a:	f3bf 8f4f 	dsb	sy
 800db4e:	607b      	str	r3, [r7, #4]
}
 800db50:	bf00      	nop
 800db52:	e7fe      	b.n	800db52 <vTaskSwitchContext+0x3e>
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	3b01      	subs	r3, #1
 800db58:	60fb      	str	r3, [r7, #12]
 800db5a:	491b      	ldr	r1, [pc, #108]	; (800dbc8 <vTaskSwitchContext+0xb4>)
 800db5c:	68fa      	ldr	r2, [r7, #12]
 800db5e:	4613      	mov	r3, r2
 800db60:	009b      	lsls	r3, r3, #2
 800db62:	4413      	add	r3, r2
 800db64:	009b      	lsls	r3, r3, #2
 800db66:	440b      	add	r3, r1
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d0e4      	beq.n	800db38 <vTaskSwitchContext+0x24>
 800db6e:	68fa      	ldr	r2, [r7, #12]
 800db70:	4613      	mov	r3, r2
 800db72:	009b      	lsls	r3, r3, #2
 800db74:	4413      	add	r3, r2
 800db76:	009b      	lsls	r3, r3, #2
 800db78:	4a13      	ldr	r2, [pc, #76]	; (800dbc8 <vTaskSwitchContext+0xb4>)
 800db7a:	4413      	add	r3, r2
 800db7c:	60bb      	str	r3, [r7, #8]
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	685b      	ldr	r3, [r3, #4]
 800db82:	685a      	ldr	r2, [r3, #4]
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	605a      	str	r2, [r3, #4]
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	685a      	ldr	r2, [r3, #4]
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	3308      	adds	r3, #8
 800db90:	429a      	cmp	r2, r3
 800db92:	d104      	bne.n	800db9e <vTaskSwitchContext+0x8a>
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	685b      	ldr	r3, [r3, #4]
 800db98:	685a      	ldr	r2, [r3, #4]
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	605a      	str	r2, [r3, #4]
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	685b      	ldr	r3, [r3, #4]
 800dba2:	68db      	ldr	r3, [r3, #12]
 800dba4:	4a09      	ldr	r2, [pc, #36]	; (800dbcc <vTaskSwitchContext+0xb8>)
 800dba6:	6013      	str	r3, [r2, #0]
 800dba8:	4a06      	ldr	r2, [pc, #24]	; (800dbc4 <vTaskSwitchContext+0xb0>)
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	6013      	str	r3, [r2, #0]
}
 800dbae:	bf00      	nop
 800dbb0:	3714      	adds	r7, #20
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb8:	4770      	bx	lr
 800dbba:	bf00      	nop
 800dbbc:	20001ad4 	.word	0x20001ad4
 800dbc0:	20001ac0 	.word	0x20001ac0
 800dbc4:	20001ab4 	.word	0x20001ab4
 800dbc8:	200015dc 	.word	0x200015dc
 800dbcc:	200015d8 	.word	0x200015d8

0800dbd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b084      	sub	sp, #16
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d10a      	bne.n	800dbf6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800dbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe4:	f383 8811 	msr	BASEPRI, r3
 800dbe8:	f3bf 8f6f 	isb	sy
 800dbec:	f3bf 8f4f 	dsb	sy
 800dbf0:	60fb      	str	r3, [r7, #12]
}
 800dbf2:	bf00      	nop
 800dbf4:	e7fe      	b.n	800dbf4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dbf6:	4b07      	ldr	r3, [pc, #28]	; (800dc14 <vTaskPlaceOnEventList+0x44>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	3318      	adds	r3, #24
 800dbfc:	4619      	mov	r1, r3
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f7fe fd47 	bl	800c692 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dc04:	2101      	movs	r1, #1
 800dc06:	6838      	ldr	r0, [r7, #0]
 800dc08:	f000 fa7c 	bl	800e104 <prvAddCurrentTaskToDelayedList>
}
 800dc0c:	bf00      	nop
 800dc0e:	3710      	adds	r7, #16
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}
 800dc14:	200015d8 	.word	0x200015d8

0800dc18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b086      	sub	sp, #24
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	60f8      	str	r0, [r7, #12]
 800dc20:	60b9      	str	r1, [r7, #8]
 800dc22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d10a      	bne.n	800dc40 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800dc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc2e:	f383 8811 	msr	BASEPRI, r3
 800dc32:	f3bf 8f6f 	isb	sy
 800dc36:	f3bf 8f4f 	dsb	sy
 800dc3a:	617b      	str	r3, [r7, #20]
}
 800dc3c:	bf00      	nop
 800dc3e:	e7fe      	b.n	800dc3e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dc40:	4b0a      	ldr	r3, [pc, #40]	; (800dc6c <vTaskPlaceOnEventListRestricted+0x54>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	3318      	adds	r3, #24
 800dc46:	4619      	mov	r1, r3
 800dc48:	68f8      	ldr	r0, [r7, #12]
 800dc4a:	f7fe fcfe 	bl	800c64a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d002      	beq.n	800dc5a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800dc54:	f04f 33ff 	mov.w	r3, #4294967295
 800dc58:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dc5a:	6879      	ldr	r1, [r7, #4]
 800dc5c:	68b8      	ldr	r0, [r7, #8]
 800dc5e:	f000 fa51 	bl	800e104 <prvAddCurrentTaskToDelayedList>
	}
 800dc62:	bf00      	nop
 800dc64:	3718      	adds	r7, #24
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}
 800dc6a:	bf00      	nop
 800dc6c:	200015d8 	.word	0x200015d8

0800dc70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b086      	sub	sp, #24
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	68db      	ldr	r3, [r3, #12]
 800dc7c:	68db      	ldr	r3, [r3, #12]
 800dc7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d10a      	bne.n	800dc9c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800dc86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc8a:	f383 8811 	msr	BASEPRI, r3
 800dc8e:	f3bf 8f6f 	isb	sy
 800dc92:	f3bf 8f4f 	dsb	sy
 800dc96:	60fb      	str	r3, [r7, #12]
}
 800dc98:	bf00      	nop
 800dc9a:	e7fe      	b.n	800dc9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	3318      	adds	r3, #24
 800dca0:	4618      	mov	r0, r3
 800dca2:	f7fe fd2f 	bl	800c704 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dca6:	4b1e      	ldr	r3, [pc, #120]	; (800dd20 <xTaskRemoveFromEventList+0xb0>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d11d      	bne.n	800dcea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	3304      	adds	r3, #4
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f7fe fd26 	bl	800c704 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcbc:	4b19      	ldr	r3, [pc, #100]	; (800dd24 <xTaskRemoveFromEventList+0xb4>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d903      	bls.n	800dccc <xTaskRemoveFromEventList+0x5c>
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcc8:	4a16      	ldr	r2, [pc, #88]	; (800dd24 <xTaskRemoveFromEventList+0xb4>)
 800dcca:	6013      	str	r3, [r2, #0]
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcd0:	4613      	mov	r3, r2
 800dcd2:	009b      	lsls	r3, r3, #2
 800dcd4:	4413      	add	r3, r2
 800dcd6:	009b      	lsls	r3, r3, #2
 800dcd8:	4a13      	ldr	r2, [pc, #76]	; (800dd28 <xTaskRemoveFromEventList+0xb8>)
 800dcda:	441a      	add	r2, r3
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	3304      	adds	r3, #4
 800dce0:	4619      	mov	r1, r3
 800dce2:	4610      	mov	r0, r2
 800dce4:	f7fe fcb1 	bl	800c64a <vListInsertEnd>
 800dce8:	e005      	b.n	800dcf6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	3318      	adds	r3, #24
 800dcee:	4619      	mov	r1, r3
 800dcf0:	480e      	ldr	r0, [pc, #56]	; (800dd2c <xTaskRemoveFromEventList+0xbc>)
 800dcf2:	f7fe fcaa 	bl	800c64a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dcf6:	693b      	ldr	r3, [r7, #16]
 800dcf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcfa:	4b0d      	ldr	r3, [pc, #52]	; (800dd30 <xTaskRemoveFromEventList+0xc0>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd00:	429a      	cmp	r2, r3
 800dd02:	d905      	bls.n	800dd10 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dd04:	2301      	movs	r3, #1
 800dd06:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dd08:	4b0a      	ldr	r3, [pc, #40]	; (800dd34 <xTaskRemoveFromEventList+0xc4>)
 800dd0a:	2201      	movs	r2, #1
 800dd0c:	601a      	str	r2, [r3, #0]
 800dd0e:	e001      	b.n	800dd14 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800dd10:	2300      	movs	r3, #0
 800dd12:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dd14:	697b      	ldr	r3, [r7, #20]
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	3718      	adds	r7, #24
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}
 800dd1e:	bf00      	nop
 800dd20:	20001ad4 	.word	0x20001ad4
 800dd24:	20001ab4 	.word	0x20001ab4
 800dd28:	200015dc 	.word	0x200015dc
 800dd2c:	20001a6c 	.word	0x20001a6c
 800dd30:	200015d8 	.word	0x200015d8
 800dd34:	20001ac0 	.word	0x20001ac0

0800dd38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dd38:	b480      	push	{r7}
 800dd3a:	b083      	sub	sp, #12
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dd40:	4b06      	ldr	r3, [pc, #24]	; (800dd5c <vTaskInternalSetTimeOutState+0x24>)
 800dd42:	681a      	ldr	r2, [r3, #0]
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dd48:	4b05      	ldr	r3, [pc, #20]	; (800dd60 <vTaskInternalSetTimeOutState+0x28>)
 800dd4a:	681a      	ldr	r2, [r3, #0]
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	605a      	str	r2, [r3, #4]
}
 800dd50:	bf00      	nop
 800dd52:	370c      	adds	r7, #12
 800dd54:	46bd      	mov	sp, r7
 800dd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5a:	4770      	bx	lr
 800dd5c:	20001ac4 	.word	0x20001ac4
 800dd60:	20001ab0 	.word	0x20001ab0

0800dd64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b088      	sub	sp, #32
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
 800dd6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d10a      	bne.n	800dd8a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800dd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd78:	f383 8811 	msr	BASEPRI, r3
 800dd7c:	f3bf 8f6f 	isb	sy
 800dd80:	f3bf 8f4f 	dsb	sy
 800dd84:	613b      	str	r3, [r7, #16]
}
 800dd86:	bf00      	nop
 800dd88:	e7fe      	b.n	800dd88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d10a      	bne.n	800dda6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800dd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd94:	f383 8811 	msr	BASEPRI, r3
 800dd98:	f3bf 8f6f 	isb	sy
 800dd9c:	f3bf 8f4f 	dsb	sy
 800dda0:	60fb      	str	r3, [r7, #12]
}
 800dda2:	bf00      	nop
 800dda4:	e7fe      	b.n	800dda4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800dda6:	f000 fe7d 	bl	800eaa4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ddaa:	4b1d      	ldr	r3, [pc, #116]	; (800de20 <xTaskCheckForTimeOut+0xbc>)
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	685b      	ldr	r3, [r3, #4]
 800ddb4:	69ba      	ldr	r2, [r7, #24]
 800ddb6:	1ad3      	subs	r3, r2, r3
 800ddb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddc2:	d102      	bne.n	800ddca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	61fb      	str	r3, [r7, #28]
 800ddc8:	e023      	b.n	800de12 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681a      	ldr	r2, [r3, #0]
 800ddce:	4b15      	ldr	r3, [pc, #84]	; (800de24 <xTaskCheckForTimeOut+0xc0>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	429a      	cmp	r2, r3
 800ddd4:	d007      	beq.n	800dde6 <xTaskCheckForTimeOut+0x82>
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	685b      	ldr	r3, [r3, #4]
 800ddda:	69ba      	ldr	r2, [r7, #24]
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d302      	bcc.n	800dde6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dde0:	2301      	movs	r3, #1
 800dde2:	61fb      	str	r3, [r7, #28]
 800dde4:	e015      	b.n	800de12 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	697a      	ldr	r2, [r7, #20]
 800ddec:	429a      	cmp	r2, r3
 800ddee:	d20b      	bcs.n	800de08 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	681a      	ldr	r2, [r3, #0]
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	1ad2      	subs	r2, r2, r3
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f7ff ff9b 	bl	800dd38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800de02:	2300      	movs	r3, #0
 800de04:	61fb      	str	r3, [r7, #28]
 800de06:	e004      	b.n	800de12 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	2200      	movs	r2, #0
 800de0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800de0e:	2301      	movs	r3, #1
 800de10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800de12:	f000 fe77 	bl	800eb04 <vPortExitCritical>

	return xReturn;
 800de16:	69fb      	ldr	r3, [r7, #28]
}
 800de18:	4618      	mov	r0, r3
 800de1a:	3720      	adds	r7, #32
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}
 800de20:	20001ab0 	.word	0x20001ab0
 800de24:	20001ac4 	.word	0x20001ac4

0800de28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800de28:	b480      	push	{r7}
 800de2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800de2c:	4b03      	ldr	r3, [pc, #12]	; (800de3c <vTaskMissedYield+0x14>)
 800de2e:	2201      	movs	r2, #1
 800de30:	601a      	str	r2, [r3, #0]
}
 800de32:	bf00      	nop
 800de34:	46bd      	mov	sp, r7
 800de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3a:	4770      	bx	lr
 800de3c:	20001ac0 	.word	0x20001ac0

0800de40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b082      	sub	sp, #8
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800de48:	f000 f852 	bl	800def0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800de4c:	4b06      	ldr	r3, [pc, #24]	; (800de68 <prvIdleTask+0x28>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	2b01      	cmp	r3, #1
 800de52:	d9f9      	bls.n	800de48 <prvIdleTask+0x8>
			{
				taskYIELD();
 800de54:	4b05      	ldr	r3, [pc, #20]	; (800de6c <prvIdleTask+0x2c>)
 800de56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de5a:	601a      	str	r2, [r3, #0]
 800de5c:	f3bf 8f4f 	dsb	sy
 800de60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800de64:	e7f0      	b.n	800de48 <prvIdleTask+0x8>
 800de66:	bf00      	nop
 800de68:	200015dc 	.word	0x200015dc
 800de6c:	e000ed04 	.word	0xe000ed04

0800de70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b082      	sub	sp, #8
 800de74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de76:	2300      	movs	r3, #0
 800de78:	607b      	str	r3, [r7, #4]
 800de7a:	e00c      	b.n	800de96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800de7c:	687a      	ldr	r2, [r7, #4]
 800de7e:	4613      	mov	r3, r2
 800de80:	009b      	lsls	r3, r3, #2
 800de82:	4413      	add	r3, r2
 800de84:	009b      	lsls	r3, r3, #2
 800de86:	4a12      	ldr	r2, [pc, #72]	; (800ded0 <prvInitialiseTaskLists+0x60>)
 800de88:	4413      	add	r3, r2
 800de8a:	4618      	mov	r0, r3
 800de8c:	f7fe fbb0 	bl	800c5f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	3301      	adds	r3, #1
 800de94:	607b      	str	r3, [r7, #4]
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2b37      	cmp	r3, #55	; 0x37
 800de9a:	d9ef      	bls.n	800de7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800de9c:	480d      	ldr	r0, [pc, #52]	; (800ded4 <prvInitialiseTaskLists+0x64>)
 800de9e:	f7fe fba7 	bl	800c5f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dea2:	480d      	ldr	r0, [pc, #52]	; (800ded8 <prvInitialiseTaskLists+0x68>)
 800dea4:	f7fe fba4 	bl	800c5f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dea8:	480c      	ldr	r0, [pc, #48]	; (800dedc <prvInitialiseTaskLists+0x6c>)
 800deaa:	f7fe fba1 	bl	800c5f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800deae:	480c      	ldr	r0, [pc, #48]	; (800dee0 <prvInitialiseTaskLists+0x70>)
 800deb0:	f7fe fb9e 	bl	800c5f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800deb4:	480b      	ldr	r0, [pc, #44]	; (800dee4 <prvInitialiseTaskLists+0x74>)
 800deb6:	f7fe fb9b 	bl	800c5f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800deba:	4b0b      	ldr	r3, [pc, #44]	; (800dee8 <prvInitialiseTaskLists+0x78>)
 800debc:	4a05      	ldr	r2, [pc, #20]	; (800ded4 <prvInitialiseTaskLists+0x64>)
 800debe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dec0:	4b0a      	ldr	r3, [pc, #40]	; (800deec <prvInitialiseTaskLists+0x7c>)
 800dec2:	4a05      	ldr	r2, [pc, #20]	; (800ded8 <prvInitialiseTaskLists+0x68>)
 800dec4:	601a      	str	r2, [r3, #0]
}
 800dec6:	bf00      	nop
 800dec8:	3708      	adds	r7, #8
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}
 800dece:	bf00      	nop
 800ded0:	200015dc 	.word	0x200015dc
 800ded4:	20001a3c 	.word	0x20001a3c
 800ded8:	20001a50 	.word	0x20001a50
 800dedc:	20001a6c 	.word	0x20001a6c
 800dee0:	20001a80 	.word	0x20001a80
 800dee4:	20001a98 	.word	0x20001a98
 800dee8:	20001a64 	.word	0x20001a64
 800deec:	20001a68 	.word	0x20001a68

0800def0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b082      	sub	sp, #8
 800def4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800def6:	e019      	b.n	800df2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800def8:	f000 fdd4 	bl	800eaa4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800defc:	4b10      	ldr	r3, [pc, #64]	; (800df40 <prvCheckTasksWaitingTermination+0x50>)
 800defe:	68db      	ldr	r3, [r3, #12]
 800df00:	68db      	ldr	r3, [r3, #12]
 800df02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	3304      	adds	r3, #4
 800df08:	4618      	mov	r0, r3
 800df0a:	f7fe fbfb 	bl	800c704 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800df0e:	4b0d      	ldr	r3, [pc, #52]	; (800df44 <prvCheckTasksWaitingTermination+0x54>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	3b01      	subs	r3, #1
 800df14:	4a0b      	ldr	r2, [pc, #44]	; (800df44 <prvCheckTasksWaitingTermination+0x54>)
 800df16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800df18:	4b0b      	ldr	r3, [pc, #44]	; (800df48 <prvCheckTasksWaitingTermination+0x58>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	3b01      	subs	r3, #1
 800df1e:	4a0a      	ldr	r2, [pc, #40]	; (800df48 <prvCheckTasksWaitingTermination+0x58>)
 800df20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800df22:	f000 fdef 	bl	800eb04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f000 f810 	bl	800df4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800df2c:	4b06      	ldr	r3, [pc, #24]	; (800df48 <prvCheckTasksWaitingTermination+0x58>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d1e1      	bne.n	800def8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800df34:	bf00      	nop
 800df36:	bf00      	nop
 800df38:	3708      	adds	r7, #8
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}
 800df3e:	bf00      	nop
 800df40:	20001a80 	.word	0x20001a80
 800df44:	20001aac 	.word	0x20001aac
 800df48:	20001a94 	.word	0x20001a94

0800df4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b084      	sub	sp, #16
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d108      	bne.n	800df70 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df62:	4618      	mov	r0, r3
 800df64:	f000 ff8c 	bl	800ee80 <vPortFree>
				vPortFree( pxTCB );
 800df68:	6878      	ldr	r0, [r7, #4]
 800df6a:	f000 ff89 	bl	800ee80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800df6e:	e018      	b.n	800dfa2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800df76:	2b01      	cmp	r3, #1
 800df78:	d103      	bne.n	800df82 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f000 ff80 	bl	800ee80 <vPortFree>
	}
 800df80:	e00f      	b.n	800dfa2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800df88:	2b02      	cmp	r3, #2
 800df8a:	d00a      	beq.n	800dfa2 <prvDeleteTCB+0x56>
	__asm volatile
 800df8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df90:	f383 8811 	msr	BASEPRI, r3
 800df94:	f3bf 8f6f 	isb	sy
 800df98:	f3bf 8f4f 	dsb	sy
 800df9c:	60fb      	str	r3, [r7, #12]
}
 800df9e:	bf00      	nop
 800dfa0:	e7fe      	b.n	800dfa0 <prvDeleteTCB+0x54>
	}
 800dfa2:	bf00      	nop
 800dfa4:	3710      	adds	r7, #16
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}
	...

0800dfac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dfac:	b480      	push	{r7}
 800dfae:	b083      	sub	sp, #12
 800dfb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dfb2:	4b0c      	ldr	r3, [pc, #48]	; (800dfe4 <prvResetNextTaskUnblockTime+0x38>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d104      	bne.n	800dfc6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dfbc:	4b0a      	ldr	r3, [pc, #40]	; (800dfe8 <prvResetNextTaskUnblockTime+0x3c>)
 800dfbe:	f04f 32ff 	mov.w	r2, #4294967295
 800dfc2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dfc4:	e008      	b.n	800dfd8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfc6:	4b07      	ldr	r3, [pc, #28]	; (800dfe4 <prvResetNextTaskUnblockTime+0x38>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	68db      	ldr	r3, [r3, #12]
 800dfcc:	68db      	ldr	r3, [r3, #12]
 800dfce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	685b      	ldr	r3, [r3, #4]
 800dfd4:	4a04      	ldr	r2, [pc, #16]	; (800dfe8 <prvResetNextTaskUnblockTime+0x3c>)
 800dfd6:	6013      	str	r3, [r2, #0]
}
 800dfd8:	bf00      	nop
 800dfda:	370c      	adds	r7, #12
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe2:	4770      	bx	lr
 800dfe4:	20001a64 	.word	0x20001a64
 800dfe8:	20001acc 	.word	0x20001acc

0800dfec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dfec:	b480      	push	{r7}
 800dfee:	b083      	sub	sp, #12
 800dff0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dff2:	4b0b      	ldr	r3, [pc, #44]	; (800e020 <xTaskGetSchedulerState+0x34>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d102      	bne.n	800e000 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dffa:	2301      	movs	r3, #1
 800dffc:	607b      	str	r3, [r7, #4]
 800dffe:	e008      	b.n	800e012 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e000:	4b08      	ldr	r3, [pc, #32]	; (800e024 <xTaskGetSchedulerState+0x38>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d102      	bne.n	800e00e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e008:	2302      	movs	r3, #2
 800e00a:	607b      	str	r3, [r7, #4]
 800e00c:	e001      	b.n	800e012 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e00e:	2300      	movs	r3, #0
 800e010:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e012:	687b      	ldr	r3, [r7, #4]
	}
 800e014:	4618      	mov	r0, r3
 800e016:	370c      	adds	r7, #12
 800e018:	46bd      	mov	sp, r7
 800e01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01e:	4770      	bx	lr
 800e020:	20001ab8 	.word	0x20001ab8
 800e024:	20001ad4 	.word	0x20001ad4

0800e028 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b086      	sub	sp, #24
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e034:	2300      	movs	r3, #0
 800e036:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d056      	beq.n	800e0ec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e03e:	4b2e      	ldr	r3, [pc, #184]	; (800e0f8 <xTaskPriorityDisinherit+0xd0>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	693a      	ldr	r2, [r7, #16]
 800e044:	429a      	cmp	r2, r3
 800e046:	d00a      	beq.n	800e05e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e04c:	f383 8811 	msr	BASEPRI, r3
 800e050:	f3bf 8f6f 	isb	sy
 800e054:	f3bf 8f4f 	dsb	sy
 800e058:	60fb      	str	r3, [r7, #12]
}
 800e05a:	bf00      	nop
 800e05c:	e7fe      	b.n	800e05c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e05e:	693b      	ldr	r3, [r7, #16]
 800e060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e062:	2b00      	cmp	r3, #0
 800e064:	d10a      	bne.n	800e07c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e06a:	f383 8811 	msr	BASEPRI, r3
 800e06e:	f3bf 8f6f 	isb	sy
 800e072:	f3bf 8f4f 	dsb	sy
 800e076:	60bb      	str	r3, [r7, #8]
}
 800e078:	bf00      	nop
 800e07a:	e7fe      	b.n	800e07a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e07c:	693b      	ldr	r3, [r7, #16]
 800e07e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e080:	1e5a      	subs	r2, r3, #1
 800e082:	693b      	ldr	r3, [r7, #16]
 800e084:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e08e:	429a      	cmp	r2, r3
 800e090:	d02c      	beq.n	800e0ec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e096:	2b00      	cmp	r3, #0
 800e098:	d128      	bne.n	800e0ec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e09a:	693b      	ldr	r3, [r7, #16]
 800e09c:	3304      	adds	r3, #4
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f7fe fb30 	bl	800c704 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e0a4:	693b      	ldr	r3, [r7, #16]
 800e0a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e0a8:	693b      	ldr	r3, [r7, #16]
 800e0aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0ac:	693b      	ldr	r3, [r7, #16]
 800e0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e0b4:	693b      	ldr	r3, [r7, #16]
 800e0b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e0b8:	693b      	ldr	r3, [r7, #16]
 800e0ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0bc:	4b0f      	ldr	r3, [pc, #60]	; (800e0fc <xTaskPriorityDisinherit+0xd4>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d903      	bls.n	800e0cc <xTaskPriorityDisinherit+0xa4>
 800e0c4:	693b      	ldr	r3, [r7, #16]
 800e0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0c8:	4a0c      	ldr	r2, [pc, #48]	; (800e0fc <xTaskPriorityDisinherit+0xd4>)
 800e0ca:	6013      	str	r3, [r2, #0]
 800e0cc:	693b      	ldr	r3, [r7, #16]
 800e0ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0d0:	4613      	mov	r3, r2
 800e0d2:	009b      	lsls	r3, r3, #2
 800e0d4:	4413      	add	r3, r2
 800e0d6:	009b      	lsls	r3, r3, #2
 800e0d8:	4a09      	ldr	r2, [pc, #36]	; (800e100 <xTaskPriorityDisinherit+0xd8>)
 800e0da:	441a      	add	r2, r3
 800e0dc:	693b      	ldr	r3, [r7, #16]
 800e0de:	3304      	adds	r3, #4
 800e0e0:	4619      	mov	r1, r3
 800e0e2:	4610      	mov	r0, r2
 800e0e4:	f7fe fab1 	bl	800c64a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e0ec:	697b      	ldr	r3, [r7, #20]
	}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3718      	adds	r7, #24
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
 800e0f6:	bf00      	nop
 800e0f8:	200015d8 	.word	0x200015d8
 800e0fc:	20001ab4 	.word	0x20001ab4
 800e100:	200015dc 	.word	0x200015dc

0800e104 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b084      	sub	sp, #16
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e10e:	4b21      	ldr	r3, [pc, #132]	; (800e194 <prvAddCurrentTaskToDelayedList+0x90>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e114:	4b20      	ldr	r3, [pc, #128]	; (800e198 <prvAddCurrentTaskToDelayedList+0x94>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	3304      	adds	r3, #4
 800e11a:	4618      	mov	r0, r3
 800e11c:	f7fe faf2 	bl	800c704 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e126:	d10a      	bne.n	800e13e <prvAddCurrentTaskToDelayedList+0x3a>
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d007      	beq.n	800e13e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e12e:	4b1a      	ldr	r3, [pc, #104]	; (800e198 <prvAddCurrentTaskToDelayedList+0x94>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	3304      	adds	r3, #4
 800e134:	4619      	mov	r1, r3
 800e136:	4819      	ldr	r0, [pc, #100]	; (800e19c <prvAddCurrentTaskToDelayedList+0x98>)
 800e138:	f7fe fa87 	bl	800c64a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e13c:	e026      	b.n	800e18c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e13e:	68fa      	ldr	r2, [r7, #12]
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	4413      	add	r3, r2
 800e144:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e146:	4b14      	ldr	r3, [pc, #80]	; (800e198 <prvAddCurrentTaskToDelayedList+0x94>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	68ba      	ldr	r2, [r7, #8]
 800e14c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e14e:	68ba      	ldr	r2, [r7, #8]
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	429a      	cmp	r2, r3
 800e154:	d209      	bcs.n	800e16a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e156:	4b12      	ldr	r3, [pc, #72]	; (800e1a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e158:	681a      	ldr	r2, [r3, #0]
 800e15a:	4b0f      	ldr	r3, [pc, #60]	; (800e198 <prvAddCurrentTaskToDelayedList+0x94>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	3304      	adds	r3, #4
 800e160:	4619      	mov	r1, r3
 800e162:	4610      	mov	r0, r2
 800e164:	f7fe fa95 	bl	800c692 <vListInsert>
}
 800e168:	e010      	b.n	800e18c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e16a:	4b0e      	ldr	r3, [pc, #56]	; (800e1a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e16c:	681a      	ldr	r2, [r3, #0]
 800e16e:	4b0a      	ldr	r3, [pc, #40]	; (800e198 <prvAddCurrentTaskToDelayedList+0x94>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	3304      	adds	r3, #4
 800e174:	4619      	mov	r1, r3
 800e176:	4610      	mov	r0, r2
 800e178:	f7fe fa8b 	bl	800c692 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e17c:	4b0a      	ldr	r3, [pc, #40]	; (800e1a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	68ba      	ldr	r2, [r7, #8]
 800e182:	429a      	cmp	r2, r3
 800e184:	d202      	bcs.n	800e18c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e186:	4a08      	ldr	r2, [pc, #32]	; (800e1a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	6013      	str	r3, [r2, #0]
}
 800e18c:	bf00      	nop
 800e18e:	3710      	adds	r7, #16
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}
 800e194:	20001ab0 	.word	0x20001ab0
 800e198:	200015d8 	.word	0x200015d8
 800e19c:	20001a98 	.word	0x20001a98
 800e1a0:	20001a68 	.word	0x20001a68
 800e1a4:	20001a64 	.word	0x20001a64
 800e1a8:	20001acc 	.word	0x20001acc

0800e1ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b08a      	sub	sp, #40	; 0x28
 800e1b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e1b6:	f000 fb07 	bl	800e7c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e1ba:	4b1c      	ldr	r3, [pc, #112]	; (800e22c <xTimerCreateTimerTask+0x80>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d021      	beq.n	800e206 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e1ca:	1d3a      	adds	r2, r7, #4
 800e1cc:	f107 0108 	add.w	r1, r7, #8
 800e1d0:	f107 030c 	add.w	r3, r7, #12
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f7fe f9f1 	bl	800c5bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e1da:	6879      	ldr	r1, [r7, #4]
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	68fa      	ldr	r2, [r7, #12]
 800e1e0:	9202      	str	r2, [sp, #8]
 800e1e2:	9301      	str	r3, [sp, #4]
 800e1e4:	2302      	movs	r3, #2
 800e1e6:	9300      	str	r3, [sp, #0]
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	460a      	mov	r2, r1
 800e1ec:	4910      	ldr	r1, [pc, #64]	; (800e230 <xTimerCreateTimerTask+0x84>)
 800e1ee:	4811      	ldr	r0, [pc, #68]	; (800e234 <xTimerCreateTimerTask+0x88>)
 800e1f0:	f7fe ffd8 	bl	800d1a4 <xTaskCreateStatic>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	4a10      	ldr	r2, [pc, #64]	; (800e238 <xTimerCreateTimerTask+0x8c>)
 800e1f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e1fa:	4b0f      	ldr	r3, [pc, #60]	; (800e238 <xTimerCreateTimerTask+0x8c>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d001      	beq.n	800e206 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e202:	2301      	movs	r3, #1
 800e204:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d10a      	bne.n	800e222 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e210:	f383 8811 	msr	BASEPRI, r3
 800e214:	f3bf 8f6f 	isb	sy
 800e218:	f3bf 8f4f 	dsb	sy
 800e21c:	613b      	str	r3, [r7, #16]
}
 800e21e:	bf00      	nop
 800e220:	e7fe      	b.n	800e220 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e222:	697b      	ldr	r3, [r7, #20]
}
 800e224:	4618      	mov	r0, r3
 800e226:	3718      	adds	r7, #24
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}
 800e22c:	20001b08 	.word	0x20001b08
 800e230:	080107c0 	.word	0x080107c0
 800e234:	0800e371 	.word	0x0800e371
 800e238:	20001b0c 	.word	0x20001b0c

0800e23c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b08a      	sub	sp, #40	; 0x28
 800e240:	af00      	add	r7, sp, #0
 800e242:	60f8      	str	r0, [r7, #12]
 800e244:	60b9      	str	r1, [r7, #8]
 800e246:	607a      	str	r2, [r7, #4]
 800e248:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e24a:	2300      	movs	r3, #0
 800e24c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d10a      	bne.n	800e26a <xTimerGenericCommand+0x2e>
	__asm volatile
 800e254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e258:	f383 8811 	msr	BASEPRI, r3
 800e25c:	f3bf 8f6f 	isb	sy
 800e260:	f3bf 8f4f 	dsb	sy
 800e264:	623b      	str	r3, [r7, #32]
}
 800e266:	bf00      	nop
 800e268:	e7fe      	b.n	800e268 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e26a:	4b1a      	ldr	r3, [pc, #104]	; (800e2d4 <xTimerGenericCommand+0x98>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d02a      	beq.n	800e2c8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	2b05      	cmp	r3, #5
 800e282:	dc18      	bgt.n	800e2b6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e284:	f7ff feb2 	bl	800dfec <xTaskGetSchedulerState>
 800e288:	4603      	mov	r3, r0
 800e28a:	2b02      	cmp	r3, #2
 800e28c:	d109      	bne.n	800e2a2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e28e:	4b11      	ldr	r3, [pc, #68]	; (800e2d4 <xTimerGenericCommand+0x98>)
 800e290:	6818      	ldr	r0, [r3, #0]
 800e292:	f107 0110 	add.w	r1, r7, #16
 800e296:	2300      	movs	r3, #0
 800e298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e29a:	f7fe fb9b 	bl	800c9d4 <xQueueGenericSend>
 800e29e:	6278      	str	r0, [r7, #36]	; 0x24
 800e2a0:	e012      	b.n	800e2c8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e2a2:	4b0c      	ldr	r3, [pc, #48]	; (800e2d4 <xTimerGenericCommand+0x98>)
 800e2a4:	6818      	ldr	r0, [r3, #0]
 800e2a6:	f107 0110 	add.w	r1, r7, #16
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	f7fe fb91 	bl	800c9d4 <xQueueGenericSend>
 800e2b2:	6278      	str	r0, [r7, #36]	; 0x24
 800e2b4:	e008      	b.n	800e2c8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e2b6:	4b07      	ldr	r3, [pc, #28]	; (800e2d4 <xTimerGenericCommand+0x98>)
 800e2b8:	6818      	ldr	r0, [r3, #0]
 800e2ba:	f107 0110 	add.w	r1, r7, #16
 800e2be:	2300      	movs	r3, #0
 800e2c0:	683a      	ldr	r2, [r7, #0]
 800e2c2:	f7fe fc85 	bl	800cbd0 <xQueueGenericSendFromISR>
 800e2c6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	3728      	adds	r7, #40	; 0x28
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}
 800e2d2:	bf00      	nop
 800e2d4:	20001b08 	.word	0x20001b08

0800e2d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b088      	sub	sp, #32
 800e2dc:	af02      	add	r7, sp, #8
 800e2de:	6078      	str	r0, [r7, #4]
 800e2e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2e2:	4b22      	ldr	r3, [pc, #136]	; (800e36c <prvProcessExpiredTimer+0x94>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	68db      	ldr	r3, [r3, #12]
 800e2e8:	68db      	ldr	r3, [r3, #12]
 800e2ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e2ec:	697b      	ldr	r3, [r7, #20]
 800e2ee:	3304      	adds	r3, #4
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f7fe fa07 	bl	800c704 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e2f6:	697b      	ldr	r3, [r7, #20]
 800e2f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e2fc:	f003 0304 	and.w	r3, r3, #4
 800e300:	2b00      	cmp	r3, #0
 800e302:	d022      	beq.n	800e34a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e304:	697b      	ldr	r3, [r7, #20]
 800e306:	699a      	ldr	r2, [r3, #24]
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	18d1      	adds	r1, r2, r3
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	683a      	ldr	r2, [r7, #0]
 800e310:	6978      	ldr	r0, [r7, #20]
 800e312:	f000 f8d1 	bl	800e4b8 <prvInsertTimerInActiveList>
 800e316:	4603      	mov	r3, r0
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d01f      	beq.n	800e35c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e31c:	2300      	movs	r3, #0
 800e31e:	9300      	str	r3, [sp, #0]
 800e320:	2300      	movs	r3, #0
 800e322:	687a      	ldr	r2, [r7, #4]
 800e324:	2100      	movs	r1, #0
 800e326:	6978      	ldr	r0, [r7, #20]
 800e328:	f7ff ff88 	bl	800e23c <xTimerGenericCommand>
 800e32c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e32e:	693b      	ldr	r3, [r7, #16]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d113      	bne.n	800e35c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e338:	f383 8811 	msr	BASEPRI, r3
 800e33c:	f3bf 8f6f 	isb	sy
 800e340:	f3bf 8f4f 	dsb	sy
 800e344:	60fb      	str	r3, [r7, #12]
}
 800e346:	bf00      	nop
 800e348:	e7fe      	b.n	800e348 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e350:	f023 0301 	bic.w	r3, r3, #1
 800e354:	b2da      	uxtb	r2, r3
 800e356:	697b      	ldr	r3, [r7, #20]
 800e358:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e35c:	697b      	ldr	r3, [r7, #20]
 800e35e:	6a1b      	ldr	r3, [r3, #32]
 800e360:	6978      	ldr	r0, [r7, #20]
 800e362:	4798      	blx	r3
}
 800e364:	bf00      	nop
 800e366:	3718      	adds	r7, #24
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}
 800e36c:	20001b00 	.word	0x20001b00

0800e370 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b084      	sub	sp, #16
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e378:	f107 0308 	add.w	r3, r7, #8
 800e37c:	4618      	mov	r0, r3
 800e37e:	f000 f857 	bl	800e430 <prvGetNextExpireTime>
 800e382:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e384:	68bb      	ldr	r3, [r7, #8]
 800e386:	4619      	mov	r1, r3
 800e388:	68f8      	ldr	r0, [r7, #12]
 800e38a:	f000 f803 	bl	800e394 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e38e:	f000 f8d5 	bl	800e53c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e392:	e7f1      	b.n	800e378 <prvTimerTask+0x8>

0800e394 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b084      	sub	sp, #16
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
 800e39c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e39e:	f7ff fa43 	bl	800d828 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e3a2:	f107 0308 	add.w	r3, r7, #8
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f000 f866 	bl	800e478 <prvSampleTimeNow>
 800e3ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e3ae:	68bb      	ldr	r3, [r7, #8]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d130      	bne.n	800e416 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d10a      	bne.n	800e3d0 <prvProcessTimerOrBlockTask+0x3c>
 800e3ba:	687a      	ldr	r2, [r7, #4]
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	429a      	cmp	r2, r3
 800e3c0:	d806      	bhi.n	800e3d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e3c2:	f7ff fa3f 	bl	800d844 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e3c6:	68f9      	ldr	r1, [r7, #12]
 800e3c8:	6878      	ldr	r0, [r7, #4]
 800e3ca:	f7ff ff85 	bl	800e2d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e3ce:	e024      	b.n	800e41a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d008      	beq.n	800e3e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e3d6:	4b13      	ldr	r3, [pc, #76]	; (800e424 <prvProcessTimerOrBlockTask+0x90>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d101      	bne.n	800e3e4 <prvProcessTimerOrBlockTask+0x50>
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	e000      	b.n	800e3e6 <prvProcessTimerOrBlockTask+0x52>
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e3e8:	4b0f      	ldr	r3, [pc, #60]	; (800e428 <prvProcessTimerOrBlockTask+0x94>)
 800e3ea:	6818      	ldr	r0, [r3, #0]
 800e3ec:	687a      	ldr	r2, [r7, #4]
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	1ad3      	subs	r3, r2, r3
 800e3f2:	683a      	ldr	r2, [r7, #0]
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	f7fe fea1 	bl	800d13c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e3fa:	f7ff fa23 	bl	800d844 <xTaskResumeAll>
 800e3fe:	4603      	mov	r3, r0
 800e400:	2b00      	cmp	r3, #0
 800e402:	d10a      	bne.n	800e41a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e404:	4b09      	ldr	r3, [pc, #36]	; (800e42c <prvProcessTimerOrBlockTask+0x98>)
 800e406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e40a:	601a      	str	r2, [r3, #0]
 800e40c:	f3bf 8f4f 	dsb	sy
 800e410:	f3bf 8f6f 	isb	sy
}
 800e414:	e001      	b.n	800e41a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e416:	f7ff fa15 	bl	800d844 <xTaskResumeAll>
}
 800e41a:	bf00      	nop
 800e41c:	3710      	adds	r7, #16
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd80      	pop	{r7, pc}
 800e422:	bf00      	nop
 800e424:	20001b04 	.word	0x20001b04
 800e428:	20001b08 	.word	0x20001b08
 800e42c:	e000ed04 	.word	0xe000ed04

0800e430 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e430:	b480      	push	{r7}
 800e432:	b085      	sub	sp, #20
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e438:	4b0e      	ldr	r3, [pc, #56]	; (800e474 <prvGetNextExpireTime+0x44>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d101      	bne.n	800e446 <prvGetNextExpireTime+0x16>
 800e442:	2201      	movs	r2, #1
 800e444:	e000      	b.n	800e448 <prvGetNextExpireTime+0x18>
 800e446:	2200      	movs	r2, #0
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d105      	bne.n	800e460 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e454:	4b07      	ldr	r3, [pc, #28]	; (800e474 <prvGetNextExpireTime+0x44>)
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	68db      	ldr	r3, [r3, #12]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	60fb      	str	r3, [r7, #12]
 800e45e:	e001      	b.n	800e464 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e460:	2300      	movs	r3, #0
 800e462:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e464:	68fb      	ldr	r3, [r7, #12]
}
 800e466:	4618      	mov	r0, r3
 800e468:	3714      	adds	r7, #20
 800e46a:	46bd      	mov	sp, r7
 800e46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e470:	4770      	bx	lr
 800e472:	bf00      	nop
 800e474:	20001b00 	.word	0x20001b00

0800e478 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b084      	sub	sp, #16
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e480:	f7ff fa7e 	bl	800d980 <xTaskGetTickCount>
 800e484:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e486:	4b0b      	ldr	r3, [pc, #44]	; (800e4b4 <prvSampleTimeNow+0x3c>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	68fa      	ldr	r2, [r7, #12]
 800e48c:	429a      	cmp	r2, r3
 800e48e:	d205      	bcs.n	800e49c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e490:	f000 f936 	bl	800e700 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2201      	movs	r2, #1
 800e498:	601a      	str	r2, [r3, #0]
 800e49a:	e002      	b.n	800e4a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2200      	movs	r2, #0
 800e4a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e4a2:	4a04      	ldr	r2, [pc, #16]	; (800e4b4 <prvSampleTimeNow+0x3c>)
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3710      	adds	r7, #16
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}
 800e4b2:	bf00      	nop
 800e4b4:	20001b10 	.word	0x20001b10

0800e4b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b086      	sub	sp, #24
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	60f8      	str	r0, [r7, #12]
 800e4c0:	60b9      	str	r1, [r7, #8]
 800e4c2:	607a      	str	r2, [r7, #4]
 800e4c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	68ba      	ldr	r2, [r7, #8]
 800e4ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	68fa      	ldr	r2, [r7, #12]
 800e4d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e4d6:	68ba      	ldr	r2, [r7, #8]
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d812      	bhi.n	800e504 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4de:	687a      	ldr	r2, [r7, #4]
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	1ad2      	subs	r2, r2, r3
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	699b      	ldr	r3, [r3, #24]
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	d302      	bcc.n	800e4f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e4ec:	2301      	movs	r3, #1
 800e4ee:	617b      	str	r3, [r7, #20]
 800e4f0:	e01b      	b.n	800e52a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e4f2:	4b10      	ldr	r3, [pc, #64]	; (800e534 <prvInsertTimerInActiveList+0x7c>)
 800e4f4:	681a      	ldr	r2, [r3, #0]
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	3304      	adds	r3, #4
 800e4fa:	4619      	mov	r1, r3
 800e4fc:	4610      	mov	r0, r2
 800e4fe:	f7fe f8c8 	bl	800c692 <vListInsert>
 800e502:	e012      	b.n	800e52a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e504:	687a      	ldr	r2, [r7, #4]
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	429a      	cmp	r2, r3
 800e50a:	d206      	bcs.n	800e51a <prvInsertTimerInActiveList+0x62>
 800e50c:	68ba      	ldr	r2, [r7, #8]
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	429a      	cmp	r2, r3
 800e512:	d302      	bcc.n	800e51a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e514:	2301      	movs	r3, #1
 800e516:	617b      	str	r3, [r7, #20]
 800e518:	e007      	b.n	800e52a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e51a:	4b07      	ldr	r3, [pc, #28]	; (800e538 <prvInsertTimerInActiveList+0x80>)
 800e51c:	681a      	ldr	r2, [r3, #0]
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	3304      	adds	r3, #4
 800e522:	4619      	mov	r1, r3
 800e524:	4610      	mov	r0, r2
 800e526:	f7fe f8b4 	bl	800c692 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e52a:	697b      	ldr	r3, [r7, #20]
}
 800e52c:	4618      	mov	r0, r3
 800e52e:	3718      	adds	r7, #24
 800e530:	46bd      	mov	sp, r7
 800e532:	bd80      	pop	{r7, pc}
 800e534:	20001b04 	.word	0x20001b04
 800e538:	20001b00 	.word	0x20001b00

0800e53c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b08e      	sub	sp, #56	; 0x38
 800e540:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e542:	e0ca      	b.n	800e6da <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2b00      	cmp	r3, #0
 800e548:	da18      	bge.n	800e57c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e54a:	1d3b      	adds	r3, r7, #4
 800e54c:	3304      	adds	r3, #4
 800e54e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e552:	2b00      	cmp	r3, #0
 800e554:	d10a      	bne.n	800e56c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e55a:	f383 8811 	msr	BASEPRI, r3
 800e55e:	f3bf 8f6f 	isb	sy
 800e562:	f3bf 8f4f 	dsb	sy
 800e566:	61fb      	str	r3, [r7, #28]
}
 800e568:	bf00      	nop
 800e56a:	e7fe      	b.n	800e56a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e572:	6850      	ldr	r0, [r2, #4]
 800e574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e576:	6892      	ldr	r2, [r2, #8]
 800e578:	4611      	mov	r1, r2
 800e57a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	f2c0 80aa 	blt.w	800e6d8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e58a:	695b      	ldr	r3, [r3, #20]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d004      	beq.n	800e59a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e592:	3304      	adds	r3, #4
 800e594:	4618      	mov	r0, r3
 800e596:	f7fe f8b5 	bl	800c704 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e59a:	463b      	mov	r3, r7
 800e59c:	4618      	mov	r0, r3
 800e59e:	f7ff ff6b 	bl	800e478 <prvSampleTimeNow>
 800e5a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2b09      	cmp	r3, #9
 800e5a8:	f200 8097 	bhi.w	800e6da <prvProcessReceivedCommands+0x19e>
 800e5ac:	a201      	add	r2, pc, #4	; (adr r2, 800e5b4 <prvProcessReceivedCommands+0x78>)
 800e5ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5b2:	bf00      	nop
 800e5b4:	0800e5dd 	.word	0x0800e5dd
 800e5b8:	0800e5dd 	.word	0x0800e5dd
 800e5bc:	0800e5dd 	.word	0x0800e5dd
 800e5c0:	0800e651 	.word	0x0800e651
 800e5c4:	0800e665 	.word	0x0800e665
 800e5c8:	0800e6af 	.word	0x0800e6af
 800e5cc:	0800e5dd 	.word	0x0800e5dd
 800e5d0:	0800e5dd 	.word	0x0800e5dd
 800e5d4:	0800e651 	.word	0x0800e651
 800e5d8:	0800e665 	.word	0x0800e665
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e5e2:	f043 0301 	orr.w	r3, r3, #1
 800e5e6:	b2da      	uxtb	r2, r3
 800e5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e5ee:	68ba      	ldr	r2, [r7, #8]
 800e5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f2:	699b      	ldr	r3, [r3, #24]
 800e5f4:	18d1      	adds	r1, r2, r3
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5fc:	f7ff ff5c 	bl	800e4b8 <prvInsertTimerInActiveList>
 800e600:	4603      	mov	r3, r0
 800e602:	2b00      	cmp	r3, #0
 800e604:	d069      	beq.n	800e6da <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e608:	6a1b      	ldr	r3, [r3, #32]
 800e60a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e60c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e610:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e614:	f003 0304 	and.w	r3, r3, #4
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d05e      	beq.n	800e6da <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e61c:	68ba      	ldr	r2, [r7, #8]
 800e61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e620:	699b      	ldr	r3, [r3, #24]
 800e622:	441a      	add	r2, r3
 800e624:	2300      	movs	r3, #0
 800e626:	9300      	str	r3, [sp, #0]
 800e628:	2300      	movs	r3, #0
 800e62a:	2100      	movs	r1, #0
 800e62c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e62e:	f7ff fe05 	bl	800e23c <xTimerGenericCommand>
 800e632:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e634:	6a3b      	ldr	r3, [r7, #32]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d14f      	bne.n	800e6da <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e63e:	f383 8811 	msr	BASEPRI, r3
 800e642:	f3bf 8f6f 	isb	sy
 800e646:	f3bf 8f4f 	dsb	sy
 800e64a:	61bb      	str	r3, [r7, #24]
}
 800e64c:	bf00      	nop
 800e64e:	e7fe      	b.n	800e64e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e652:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e656:	f023 0301 	bic.w	r3, r3, #1
 800e65a:	b2da      	uxtb	r2, r3
 800e65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e65e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e662:	e03a      	b.n	800e6da <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e666:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e66a:	f043 0301 	orr.w	r3, r3, #1
 800e66e:	b2da      	uxtb	r2, r3
 800e670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e672:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e676:	68ba      	ldr	r2, [r7, #8]
 800e678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e67a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e67e:	699b      	ldr	r3, [r3, #24]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d10a      	bne.n	800e69a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e688:	f383 8811 	msr	BASEPRI, r3
 800e68c:	f3bf 8f6f 	isb	sy
 800e690:	f3bf 8f4f 	dsb	sy
 800e694:	617b      	str	r3, [r7, #20]
}
 800e696:	bf00      	nop
 800e698:	e7fe      	b.n	800e698 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e69c:	699a      	ldr	r2, [r3, #24]
 800e69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a0:	18d1      	adds	r1, r2, r3
 800e6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6a8:	f7ff ff06 	bl	800e4b8 <prvInsertTimerInActiveList>
					break;
 800e6ac:	e015      	b.n	800e6da <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e6b4:	f003 0302 	and.w	r3, r3, #2
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d103      	bne.n	800e6c4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e6bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6be:	f000 fbdf 	bl	800ee80 <vPortFree>
 800e6c2:	e00a      	b.n	800e6da <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e6ca:	f023 0301 	bic.w	r3, r3, #1
 800e6ce:	b2da      	uxtb	r2, r3
 800e6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e6d6:	e000      	b.n	800e6da <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e6d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e6da:	4b08      	ldr	r3, [pc, #32]	; (800e6fc <prvProcessReceivedCommands+0x1c0>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	1d39      	adds	r1, r7, #4
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f7fe fb10 	bl	800cd08 <xQueueReceive>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	f47f af2a 	bne.w	800e544 <prvProcessReceivedCommands+0x8>
	}
}
 800e6f0:	bf00      	nop
 800e6f2:	bf00      	nop
 800e6f4:	3730      	adds	r7, #48	; 0x30
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}
 800e6fa:	bf00      	nop
 800e6fc:	20001b08 	.word	0x20001b08

0800e700 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b088      	sub	sp, #32
 800e704:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e706:	e048      	b.n	800e79a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e708:	4b2d      	ldr	r3, [pc, #180]	; (800e7c0 <prvSwitchTimerLists+0xc0>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	68db      	ldr	r3, [r3, #12]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e712:	4b2b      	ldr	r3, [pc, #172]	; (800e7c0 <prvSwitchTimerLists+0xc0>)
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	68db      	ldr	r3, [r3, #12]
 800e718:	68db      	ldr	r3, [r3, #12]
 800e71a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	3304      	adds	r3, #4
 800e720:	4618      	mov	r0, r3
 800e722:	f7fd ffef 	bl	800c704 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	6a1b      	ldr	r3, [r3, #32]
 800e72a:	68f8      	ldr	r0, [r7, #12]
 800e72c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e734:	f003 0304 	and.w	r3, r3, #4
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d02e      	beq.n	800e79a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	699b      	ldr	r3, [r3, #24]
 800e740:	693a      	ldr	r2, [r7, #16]
 800e742:	4413      	add	r3, r2
 800e744:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e746:	68ba      	ldr	r2, [r7, #8]
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d90e      	bls.n	800e76c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	68ba      	ldr	r2, [r7, #8]
 800e752:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	68fa      	ldr	r2, [r7, #12]
 800e758:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e75a:	4b19      	ldr	r3, [pc, #100]	; (800e7c0 <prvSwitchTimerLists+0xc0>)
 800e75c:	681a      	ldr	r2, [r3, #0]
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	3304      	adds	r3, #4
 800e762:	4619      	mov	r1, r3
 800e764:	4610      	mov	r0, r2
 800e766:	f7fd ff94 	bl	800c692 <vListInsert>
 800e76a:	e016      	b.n	800e79a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e76c:	2300      	movs	r3, #0
 800e76e:	9300      	str	r3, [sp, #0]
 800e770:	2300      	movs	r3, #0
 800e772:	693a      	ldr	r2, [r7, #16]
 800e774:	2100      	movs	r1, #0
 800e776:	68f8      	ldr	r0, [r7, #12]
 800e778:	f7ff fd60 	bl	800e23c <xTimerGenericCommand>
 800e77c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d10a      	bne.n	800e79a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e788:	f383 8811 	msr	BASEPRI, r3
 800e78c:	f3bf 8f6f 	isb	sy
 800e790:	f3bf 8f4f 	dsb	sy
 800e794:	603b      	str	r3, [r7, #0]
}
 800e796:	bf00      	nop
 800e798:	e7fe      	b.n	800e798 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e79a:	4b09      	ldr	r3, [pc, #36]	; (800e7c0 <prvSwitchTimerLists+0xc0>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d1b1      	bne.n	800e708 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e7a4:	4b06      	ldr	r3, [pc, #24]	; (800e7c0 <prvSwitchTimerLists+0xc0>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e7aa:	4b06      	ldr	r3, [pc, #24]	; (800e7c4 <prvSwitchTimerLists+0xc4>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	4a04      	ldr	r2, [pc, #16]	; (800e7c0 <prvSwitchTimerLists+0xc0>)
 800e7b0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e7b2:	4a04      	ldr	r2, [pc, #16]	; (800e7c4 <prvSwitchTimerLists+0xc4>)
 800e7b4:	697b      	ldr	r3, [r7, #20]
 800e7b6:	6013      	str	r3, [r2, #0]
}
 800e7b8:	bf00      	nop
 800e7ba:	3718      	adds	r7, #24
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd80      	pop	{r7, pc}
 800e7c0:	20001b00 	.word	0x20001b00
 800e7c4:	20001b04 	.word	0x20001b04

0800e7c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b082      	sub	sp, #8
 800e7cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e7ce:	f000 f969 	bl	800eaa4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e7d2:	4b15      	ldr	r3, [pc, #84]	; (800e828 <prvCheckForValidListAndQueue+0x60>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d120      	bne.n	800e81c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e7da:	4814      	ldr	r0, [pc, #80]	; (800e82c <prvCheckForValidListAndQueue+0x64>)
 800e7dc:	f7fd ff08 	bl	800c5f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e7e0:	4813      	ldr	r0, [pc, #76]	; (800e830 <prvCheckForValidListAndQueue+0x68>)
 800e7e2:	f7fd ff05 	bl	800c5f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e7e6:	4b13      	ldr	r3, [pc, #76]	; (800e834 <prvCheckForValidListAndQueue+0x6c>)
 800e7e8:	4a10      	ldr	r2, [pc, #64]	; (800e82c <prvCheckForValidListAndQueue+0x64>)
 800e7ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e7ec:	4b12      	ldr	r3, [pc, #72]	; (800e838 <prvCheckForValidListAndQueue+0x70>)
 800e7ee:	4a10      	ldr	r2, [pc, #64]	; (800e830 <prvCheckForValidListAndQueue+0x68>)
 800e7f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	9300      	str	r3, [sp, #0]
 800e7f6:	4b11      	ldr	r3, [pc, #68]	; (800e83c <prvCheckForValidListAndQueue+0x74>)
 800e7f8:	4a11      	ldr	r2, [pc, #68]	; (800e840 <prvCheckForValidListAndQueue+0x78>)
 800e7fa:	2110      	movs	r1, #16
 800e7fc:	200a      	movs	r0, #10
 800e7fe:	f7fe f813 	bl	800c828 <xQueueGenericCreateStatic>
 800e802:	4603      	mov	r3, r0
 800e804:	4a08      	ldr	r2, [pc, #32]	; (800e828 <prvCheckForValidListAndQueue+0x60>)
 800e806:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e808:	4b07      	ldr	r3, [pc, #28]	; (800e828 <prvCheckForValidListAndQueue+0x60>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d005      	beq.n	800e81c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e810:	4b05      	ldr	r3, [pc, #20]	; (800e828 <prvCheckForValidListAndQueue+0x60>)
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	490b      	ldr	r1, [pc, #44]	; (800e844 <prvCheckForValidListAndQueue+0x7c>)
 800e816:	4618      	mov	r0, r3
 800e818:	f7fe fc66 	bl	800d0e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e81c:	f000 f972 	bl	800eb04 <vPortExitCritical>
}
 800e820:	bf00      	nop
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}
 800e826:	bf00      	nop
 800e828:	20001b08 	.word	0x20001b08
 800e82c:	20001ad8 	.word	0x20001ad8
 800e830:	20001aec 	.word	0x20001aec
 800e834:	20001b00 	.word	0x20001b00
 800e838:	20001b04 	.word	0x20001b04
 800e83c:	20001bb4 	.word	0x20001bb4
 800e840:	20001b14 	.word	0x20001b14
 800e844:	080107c8 	.word	0x080107c8

0800e848 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e848:	b480      	push	{r7}
 800e84a:	b085      	sub	sp, #20
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	60f8      	str	r0, [r7, #12]
 800e850:	60b9      	str	r1, [r7, #8]
 800e852:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	3b04      	subs	r3, #4
 800e858:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e860:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	3b04      	subs	r3, #4
 800e866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	f023 0201 	bic.w	r2, r3, #1
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	3b04      	subs	r3, #4
 800e876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e878:	4a0c      	ldr	r2, [pc, #48]	; (800e8ac <pxPortInitialiseStack+0x64>)
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	3b14      	subs	r3, #20
 800e882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e884:	687a      	ldr	r2, [r7, #4]
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	3b04      	subs	r3, #4
 800e88e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	f06f 0202 	mvn.w	r2, #2
 800e896:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	3b20      	subs	r3, #32
 800e89c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e89e:	68fb      	ldr	r3, [r7, #12]
}
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	3714      	adds	r7, #20
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8aa:	4770      	bx	lr
 800e8ac:	0800e8b1 	.word	0x0800e8b1

0800e8b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e8b0:	b480      	push	{r7}
 800e8b2:	b085      	sub	sp, #20
 800e8b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e8ba:	4b12      	ldr	r3, [pc, #72]	; (800e904 <prvTaskExitError+0x54>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8c2:	d00a      	beq.n	800e8da <prvTaskExitError+0x2a>
	__asm volatile
 800e8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8c8:	f383 8811 	msr	BASEPRI, r3
 800e8cc:	f3bf 8f6f 	isb	sy
 800e8d0:	f3bf 8f4f 	dsb	sy
 800e8d4:	60fb      	str	r3, [r7, #12]
}
 800e8d6:	bf00      	nop
 800e8d8:	e7fe      	b.n	800e8d8 <prvTaskExitError+0x28>
	__asm volatile
 800e8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8de:	f383 8811 	msr	BASEPRI, r3
 800e8e2:	f3bf 8f6f 	isb	sy
 800e8e6:	f3bf 8f4f 	dsb	sy
 800e8ea:	60bb      	str	r3, [r7, #8]
}
 800e8ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e8ee:	bf00      	nop
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d0fc      	beq.n	800e8f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e8f6:	bf00      	nop
 800e8f8:	bf00      	nop
 800e8fa:	3714      	adds	r7, #20
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e902:	4770      	bx	lr
 800e904:	200005c0 	.word	0x200005c0
	...

0800e910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e910:	4b07      	ldr	r3, [pc, #28]	; (800e930 <pxCurrentTCBConst2>)
 800e912:	6819      	ldr	r1, [r3, #0]
 800e914:	6808      	ldr	r0, [r1, #0]
 800e916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e91a:	f380 8809 	msr	PSP, r0
 800e91e:	f3bf 8f6f 	isb	sy
 800e922:	f04f 0000 	mov.w	r0, #0
 800e926:	f380 8811 	msr	BASEPRI, r0
 800e92a:	4770      	bx	lr
 800e92c:	f3af 8000 	nop.w

0800e930 <pxCurrentTCBConst2>:
 800e930:	200015d8 	.word	0x200015d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e934:	bf00      	nop
 800e936:	bf00      	nop

0800e938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e938:	4808      	ldr	r0, [pc, #32]	; (800e95c <prvPortStartFirstTask+0x24>)
 800e93a:	6800      	ldr	r0, [r0, #0]
 800e93c:	6800      	ldr	r0, [r0, #0]
 800e93e:	f380 8808 	msr	MSP, r0
 800e942:	f04f 0000 	mov.w	r0, #0
 800e946:	f380 8814 	msr	CONTROL, r0
 800e94a:	b662      	cpsie	i
 800e94c:	b661      	cpsie	f
 800e94e:	f3bf 8f4f 	dsb	sy
 800e952:	f3bf 8f6f 	isb	sy
 800e956:	df00      	svc	0
 800e958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e95a:	bf00      	nop
 800e95c:	e000ed08 	.word	0xe000ed08

0800e960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b086      	sub	sp, #24
 800e964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e966:	4b46      	ldr	r3, [pc, #280]	; (800ea80 <xPortStartScheduler+0x120>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	4a46      	ldr	r2, [pc, #280]	; (800ea84 <xPortStartScheduler+0x124>)
 800e96c:	4293      	cmp	r3, r2
 800e96e:	d10a      	bne.n	800e986 <xPortStartScheduler+0x26>
	__asm volatile
 800e970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e974:	f383 8811 	msr	BASEPRI, r3
 800e978:	f3bf 8f6f 	isb	sy
 800e97c:	f3bf 8f4f 	dsb	sy
 800e980:	613b      	str	r3, [r7, #16]
}
 800e982:	bf00      	nop
 800e984:	e7fe      	b.n	800e984 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e986:	4b3e      	ldr	r3, [pc, #248]	; (800ea80 <xPortStartScheduler+0x120>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	4a3f      	ldr	r2, [pc, #252]	; (800ea88 <xPortStartScheduler+0x128>)
 800e98c:	4293      	cmp	r3, r2
 800e98e:	d10a      	bne.n	800e9a6 <xPortStartScheduler+0x46>
	__asm volatile
 800e990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e994:	f383 8811 	msr	BASEPRI, r3
 800e998:	f3bf 8f6f 	isb	sy
 800e99c:	f3bf 8f4f 	dsb	sy
 800e9a0:	60fb      	str	r3, [r7, #12]
}
 800e9a2:	bf00      	nop
 800e9a4:	e7fe      	b.n	800e9a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e9a6:	4b39      	ldr	r3, [pc, #228]	; (800ea8c <xPortStartScheduler+0x12c>)
 800e9a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	781b      	ldrb	r3, [r3, #0]
 800e9ae:	b2db      	uxtb	r3, r3
 800e9b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	22ff      	movs	r2, #255	; 0xff
 800e9b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	781b      	ldrb	r3, [r3, #0]
 800e9bc:	b2db      	uxtb	r3, r3
 800e9be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e9c0:	78fb      	ldrb	r3, [r7, #3]
 800e9c2:	b2db      	uxtb	r3, r3
 800e9c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e9c8:	b2da      	uxtb	r2, r3
 800e9ca:	4b31      	ldr	r3, [pc, #196]	; (800ea90 <xPortStartScheduler+0x130>)
 800e9cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e9ce:	4b31      	ldr	r3, [pc, #196]	; (800ea94 <xPortStartScheduler+0x134>)
 800e9d0:	2207      	movs	r2, #7
 800e9d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e9d4:	e009      	b.n	800e9ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e9d6:	4b2f      	ldr	r3, [pc, #188]	; (800ea94 <xPortStartScheduler+0x134>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	3b01      	subs	r3, #1
 800e9dc:	4a2d      	ldr	r2, [pc, #180]	; (800ea94 <xPortStartScheduler+0x134>)
 800e9de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e9e0:	78fb      	ldrb	r3, [r7, #3]
 800e9e2:	b2db      	uxtb	r3, r3
 800e9e4:	005b      	lsls	r3, r3, #1
 800e9e6:	b2db      	uxtb	r3, r3
 800e9e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e9ea:	78fb      	ldrb	r3, [r7, #3]
 800e9ec:	b2db      	uxtb	r3, r3
 800e9ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9f2:	2b80      	cmp	r3, #128	; 0x80
 800e9f4:	d0ef      	beq.n	800e9d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e9f6:	4b27      	ldr	r3, [pc, #156]	; (800ea94 <xPortStartScheduler+0x134>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	f1c3 0307 	rsb	r3, r3, #7
 800e9fe:	2b04      	cmp	r3, #4
 800ea00:	d00a      	beq.n	800ea18 <xPortStartScheduler+0xb8>
	__asm volatile
 800ea02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea06:	f383 8811 	msr	BASEPRI, r3
 800ea0a:	f3bf 8f6f 	isb	sy
 800ea0e:	f3bf 8f4f 	dsb	sy
 800ea12:	60bb      	str	r3, [r7, #8]
}
 800ea14:	bf00      	nop
 800ea16:	e7fe      	b.n	800ea16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ea18:	4b1e      	ldr	r3, [pc, #120]	; (800ea94 <xPortStartScheduler+0x134>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	021b      	lsls	r3, r3, #8
 800ea1e:	4a1d      	ldr	r2, [pc, #116]	; (800ea94 <xPortStartScheduler+0x134>)
 800ea20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ea22:	4b1c      	ldr	r3, [pc, #112]	; (800ea94 <xPortStartScheduler+0x134>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ea2a:	4a1a      	ldr	r2, [pc, #104]	; (800ea94 <xPortStartScheduler+0x134>)
 800ea2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	b2da      	uxtb	r2, r3
 800ea32:	697b      	ldr	r3, [r7, #20]
 800ea34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ea36:	4b18      	ldr	r3, [pc, #96]	; (800ea98 <xPortStartScheduler+0x138>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	4a17      	ldr	r2, [pc, #92]	; (800ea98 <xPortStartScheduler+0x138>)
 800ea3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ea40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ea42:	4b15      	ldr	r3, [pc, #84]	; (800ea98 <xPortStartScheduler+0x138>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	4a14      	ldr	r2, [pc, #80]	; (800ea98 <xPortStartScheduler+0x138>)
 800ea48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ea4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ea4e:	f000 f8dd 	bl	800ec0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ea52:	4b12      	ldr	r3, [pc, #72]	; (800ea9c <xPortStartScheduler+0x13c>)
 800ea54:	2200      	movs	r2, #0
 800ea56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ea58:	f000 f8fc 	bl	800ec54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ea5c:	4b10      	ldr	r3, [pc, #64]	; (800eaa0 <xPortStartScheduler+0x140>)
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	4a0f      	ldr	r2, [pc, #60]	; (800eaa0 <xPortStartScheduler+0x140>)
 800ea62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ea66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ea68:	f7ff ff66 	bl	800e938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ea6c:	f7ff f852 	bl	800db14 <vTaskSwitchContext>
	prvTaskExitError();
 800ea70:	f7ff ff1e 	bl	800e8b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ea74:	2300      	movs	r3, #0
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3718      	adds	r7, #24
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}
 800ea7e:	bf00      	nop
 800ea80:	e000ed00 	.word	0xe000ed00
 800ea84:	410fc271 	.word	0x410fc271
 800ea88:	410fc270 	.word	0x410fc270
 800ea8c:	e000e400 	.word	0xe000e400
 800ea90:	20001c04 	.word	0x20001c04
 800ea94:	20001c08 	.word	0x20001c08
 800ea98:	e000ed20 	.word	0xe000ed20
 800ea9c:	200005c0 	.word	0x200005c0
 800eaa0:	e000ef34 	.word	0xe000ef34

0800eaa4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	b083      	sub	sp, #12
 800eaa8:	af00      	add	r7, sp, #0
	__asm volatile
 800eaaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaae:	f383 8811 	msr	BASEPRI, r3
 800eab2:	f3bf 8f6f 	isb	sy
 800eab6:	f3bf 8f4f 	dsb	sy
 800eaba:	607b      	str	r3, [r7, #4]
}
 800eabc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800eabe:	4b0f      	ldr	r3, [pc, #60]	; (800eafc <vPortEnterCritical+0x58>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	3301      	adds	r3, #1
 800eac4:	4a0d      	ldr	r2, [pc, #52]	; (800eafc <vPortEnterCritical+0x58>)
 800eac6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800eac8:	4b0c      	ldr	r3, [pc, #48]	; (800eafc <vPortEnterCritical+0x58>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	2b01      	cmp	r3, #1
 800eace:	d10f      	bne.n	800eaf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ead0:	4b0b      	ldr	r3, [pc, #44]	; (800eb00 <vPortEnterCritical+0x5c>)
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	b2db      	uxtb	r3, r3
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d00a      	beq.n	800eaf0 <vPortEnterCritical+0x4c>
	__asm volatile
 800eada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eade:	f383 8811 	msr	BASEPRI, r3
 800eae2:	f3bf 8f6f 	isb	sy
 800eae6:	f3bf 8f4f 	dsb	sy
 800eaea:	603b      	str	r3, [r7, #0]
}
 800eaec:	bf00      	nop
 800eaee:	e7fe      	b.n	800eaee <vPortEnterCritical+0x4a>
	}
}
 800eaf0:	bf00      	nop
 800eaf2:	370c      	adds	r7, #12
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafa:	4770      	bx	lr
 800eafc:	200005c0 	.word	0x200005c0
 800eb00:	e000ed04 	.word	0xe000ed04

0800eb04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800eb04:	b480      	push	{r7}
 800eb06:	b083      	sub	sp, #12
 800eb08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800eb0a:	4b12      	ldr	r3, [pc, #72]	; (800eb54 <vPortExitCritical+0x50>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d10a      	bne.n	800eb28 <vPortExitCritical+0x24>
	__asm volatile
 800eb12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb16:	f383 8811 	msr	BASEPRI, r3
 800eb1a:	f3bf 8f6f 	isb	sy
 800eb1e:	f3bf 8f4f 	dsb	sy
 800eb22:	607b      	str	r3, [r7, #4]
}
 800eb24:	bf00      	nop
 800eb26:	e7fe      	b.n	800eb26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800eb28:	4b0a      	ldr	r3, [pc, #40]	; (800eb54 <vPortExitCritical+0x50>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	3b01      	subs	r3, #1
 800eb2e:	4a09      	ldr	r2, [pc, #36]	; (800eb54 <vPortExitCritical+0x50>)
 800eb30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800eb32:	4b08      	ldr	r3, [pc, #32]	; (800eb54 <vPortExitCritical+0x50>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d105      	bne.n	800eb46 <vPortExitCritical+0x42>
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	f383 8811 	msr	BASEPRI, r3
}
 800eb44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800eb46:	bf00      	nop
 800eb48:	370c      	adds	r7, #12
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb50:	4770      	bx	lr
 800eb52:	bf00      	nop
 800eb54:	200005c0 	.word	0x200005c0
	...

0800eb60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800eb60:	f3ef 8009 	mrs	r0, PSP
 800eb64:	f3bf 8f6f 	isb	sy
 800eb68:	4b15      	ldr	r3, [pc, #84]	; (800ebc0 <pxCurrentTCBConst>)
 800eb6a:	681a      	ldr	r2, [r3, #0]
 800eb6c:	f01e 0f10 	tst.w	lr, #16
 800eb70:	bf08      	it	eq
 800eb72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800eb76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb7a:	6010      	str	r0, [r2, #0]
 800eb7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800eb80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800eb84:	f380 8811 	msr	BASEPRI, r0
 800eb88:	f3bf 8f4f 	dsb	sy
 800eb8c:	f3bf 8f6f 	isb	sy
 800eb90:	f7fe ffc0 	bl	800db14 <vTaskSwitchContext>
 800eb94:	f04f 0000 	mov.w	r0, #0
 800eb98:	f380 8811 	msr	BASEPRI, r0
 800eb9c:	bc09      	pop	{r0, r3}
 800eb9e:	6819      	ldr	r1, [r3, #0]
 800eba0:	6808      	ldr	r0, [r1, #0]
 800eba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eba6:	f01e 0f10 	tst.w	lr, #16
 800ebaa:	bf08      	it	eq
 800ebac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ebb0:	f380 8809 	msr	PSP, r0
 800ebb4:	f3bf 8f6f 	isb	sy
 800ebb8:	4770      	bx	lr
 800ebba:	bf00      	nop
 800ebbc:	f3af 8000 	nop.w

0800ebc0 <pxCurrentTCBConst>:
 800ebc0:	200015d8 	.word	0x200015d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ebc4:	bf00      	nop
 800ebc6:	bf00      	nop

0800ebc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b082      	sub	sp, #8
 800ebcc:	af00      	add	r7, sp, #0
	__asm volatile
 800ebce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd2:	f383 8811 	msr	BASEPRI, r3
 800ebd6:	f3bf 8f6f 	isb	sy
 800ebda:	f3bf 8f4f 	dsb	sy
 800ebde:	607b      	str	r3, [r7, #4]
}
 800ebe0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ebe2:	f7fe fedd 	bl	800d9a0 <xTaskIncrementTick>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d003      	beq.n	800ebf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ebec:	4b06      	ldr	r3, [pc, #24]	; (800ec08 <xPortSysTickHandler+0x40>)
 800ebee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebf2:	601a      	str	r2, [r3, #0]
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	f383 8811 	msr	BASEPRI, r3
}
 800ebfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ec00:	bf00      	nop
 800ec02:	3708      	adds	r7, #8
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bd80      	pop	{r7, pc}
 800ec08:	e000ed04 	.word	0xe000ed04

0800ec0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ec10:	4b0b      	ldr	r3, [pc, #44]	; (800ec40 <vPortSetupTimerInterrupt+0x34>)
 800ec12:	2200      	movs	r2, #0
 800ec14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ec16:	4b0b      	ldr	r3, [pc, #44]	; (800ec44 <vPortSetupTimerInterrupt+0x38>)
 800ec18:	2200      	movs	r2, #0
 800ec1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ec1c:	4b0a      	ldr	r3, [pc, #40]	; (800ec48 <vPortSetupTimerInterrupt+0x3c>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	4a0a      	ldr	r2, [pc, #40]	; (800ec4c <vPortSetupTimerInterrupt+0x40>)
 800ec22:	fba2 2303 	umull	r2, r3, r2, r3
 800ec26:	099b      	lsrs	r3, r3, #6
 800ec28:	4a09      	ldr	r2, [pc, #36]	; (800ec50 <vPortSetupTimerInterrupt+0x44>)
 800ec2a:	3b01      	subs	r3, #1
 800ec2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ec2e:	4b04      	ldr	r3, [pc, #16]	; (800ec40 <vPortSetupTimerInterrupt+0x34>)
 800ec30:	2207      	movs	r2, #7
 800ec32:	601a      	str	r2, [r3, #0]
}
 800ec34:	bf00      	nop
 800ec36:	46bd      	mov	sp, r7
 800ec38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3c:	4770      	bx	lr
 800ec3e:	bf00      	nop
 800ec40:	e000e010 	.word	0xe000e010
 800ec44:	e000e018 	.word	0xe000e018
 800ec48:	20000528 	.word	0x20000528
 800ec4c:	10624dd3 	.word	0x10624dd3
 800ec50:	e000e014 	.word	0xe000e014

0800ec54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ec54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ec64 <vPortEnableVFP+0x10>
 800ec58:	6801      	ldr	r1, [r0, #0]
 800ec5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ec5e:	6001      	str	r1, [r0, #0]
 800ec60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ec62:	bf00      	nop
 800ec64:	e000ed88 	.word	0xe000ed88

0800ec68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ec68:	b480      	push	{r7}
 800ec6a:	b085      	sub	sp, #20
 800ec6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ec6e:	f3ef 8305 	mrs	r3, IPSR
 800ec72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	2b0f      	cmp	r3, #15
 800ec78:	d914      	bls.n	800eca4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ec7a:	4a17      	ldr	r2, [pc, #92]	; (800ecd8 <vPortValidateInterruptPriority+0x70>)
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	4413      	add	r3, r2
 800ec80:	781b      	ldrb	r3, [r3, #0]
 800ec82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ec84:	4b15      	ldr	r3, [pc, #84]	; (800ecdc <vPortValidateInterruptPriority+0x74>)
 800ec86:	781b      	ldrb	r3, [r3, #0]
 800ec88:	7afa      	ldrb	r2, [r7, #11]
 800ec8a:	429a      	cmp	r2, r3
 800ec8c:	d20a      	bcs.n	800eca4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ec8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec92:	f383 8811 	msr	BASEPRI, r3
 800ec96:	f3bf 8f6f 	isb	sy
 800ec9a:	f3bf 8f4f 	dsb	sy
 800ec9e:	607b      	str	r3, [r7, #4]
}
 800eca0:	bf00      	nop
 800eca2:	e7fe      	b.n	800eca2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eca4:	4b0e      	ldr	r3, [pc, #56]	; (800ece0 <vPortValidateInterruptPriority+0x78>)
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ecac:	4b0d      	ldr	r3, [pc, #52]	; (800ece4 <vPortValidateInterruptPriority+0x7c>)
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d90a      	bls.n	800ecca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ecb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecb8:	f383 8811 	msr	BASEPRI, r3
 800ecbc:	f3bf 8f6f 	isb	sy
 800ecc0:	f3bf 8f4f 	dsb	sy
 800ecc4:	603b      	str	r3, [r7, #0]
}
 800ecc6:	bf00      	nop
 800ecc8:	e7fe      	b.n	800ecc8 <vPortValidateInterruptPriority+0x60>
	}
 800ecca:	bf00      	nop
 800eccc:	3714      	adds	r7, #20
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd4:	4770      	bx	lr
 800ecd6:	bf00      	nop
 800ecd8:	e000e3f0 	.word	0xe000e3f0
 800ecdc:	20001c04 	.word	0x20001c04
 800ece0:	e000ed0c 	.word	0xe000ed0c
 800ece4:	20001c08 	.word	0x20001c08

0800ece8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b08a      	sub	sp, #40	; 0x28
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ecf4:	f7fe fd98 	bl	800d828 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ecf8:	4b5b      	ldr	r3, [pc, #364]	; (800ee68 <pvPortMalloc+0x180>)
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d101      	bne.n	800ed04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ed00:	f000 f920 	bl	800ef44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ed04:	4b59      	ldr	r3, [pc, #356]	; (800ee6c <pvPortMalloc+0x184>)
 800ed06:	681a      	ldr	r2, [r3, #0]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	4013      	ands	r3, r2
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	f040 8093 	bne.w	800ee38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d01d      	beq.n	800ed54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ed18:	2208      	movs	r2, #8
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	4413      	add	r3, r2
 800ed1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f003 0307 	and.w	r3, r3, #7
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d014      	beq.n	800ed54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	f023 0307 	bic.w	r3, r3, #7
 800ed30:	3308      	adds	r3, #8
 800ed32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f003 0307 	and.w	r3, r3, #7
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d00a      	beq.n	800ed54 <pvPortMalloc+0x6c>
	__asm volatile
 800ed3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed42:	f383 8811 	msr	BASEPRI, r3
 800ed46:	f3bf 8f6f 	isb	sy
 800ed4a:	f3bf 8f4f 	dsb	sy
 800ed4e:	617b      	str	r3, [r7, #20]
}
 800ed50:	bf00      	nop
 800ed52:	e7fe      	b.n	800ed52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d06e      	beq.n	800ee38 <pvPortMalloc+0x150>
 800ed5a:	4b45      	ldr	r3, [pc, #276]	; (800ee70 <pvPortMalloc+0x188>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	687a      	ldr	r2, [r7, #4]
 800ed60:	429a      	cmp	r2, r3
 800ed62:	d869      	bhi.n	800ee38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ed64:	4b43      	ldr	r3, [pc, #268]	; (800ee74 <pvPortMalloc+0x18c>)
 800ed66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ed68:	4b42      	ldr	r3, [pc, #264]	; (800ee74 <pvPortMalloc+0x18c>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ed6e:	e004      	b.n	800ed7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ed70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ed74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ed7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed7c:	685b      	ldr	r3, [r3, #4]
 800ed7e:	687a      	ldr	r2, [r7, #4]
 800ed80:	429a      	cmp	r2, r3
 800ed82:	d903      	bls.n	800ed8c <pvPortMalloc+0xa4>
 800ed84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d1f1      	bne.n	800ed70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ed8c:	4b36      	ldr	r3, [pc, #216]	; (800ee68 <pvPortMalloc+0x180>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed92:	429a      	cmp	r2, r3
 800ed94:	d050      	beq.n	800ee38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ed96:	6a3b      	ldr	r3, [r7, #32]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	2208      	movs	r2, #8
 800ed9c:	4413      	add	r3, r2
 800ed9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eda2:	681a      	ldr	r2, [r3, #0]
 800eda4:	6a3b      	ldr	r3, [r7, #32]
 800eda6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800eda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edaa:	685a      	ldr	r2, [r3, #4]
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	1ad2      	subs	r2, r2, r3
 800edb0:	2308      	movs	r3, #8
 800edb2:	005b      	lsls	r3, r3, #1
 800edb4:	429a      	cmp	r2, r3
 800edb6:	d91f      	bls.n	800edf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800edb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	4413      	add	r3, r2
 800edbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800edc0:	69bb      	ldr	r3, [r7, #24]
 800edc2:	f003 0307 	and.w	r3, r3, #7
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d00a      	beq.n	800ede0 <pvPortMalloc+0xf8>
	__asm volatile
 800edca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edce:	f383 8811 	msr	BASEPRI, r3
 800edd2:	f3bf 8f6f 	isb	sy
 800edd6:	f3bf 8f4f 	dsb	sy
 800edda:	613b      	str	r3, [r7, #16]
}
 800eddc:	bf00      	nop
 800edde:	e7fe      	b.n	800edde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ede0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ede2:	685a      	ldr	r2, [r3, #4]
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	1ad2      	subs	r2, r2, r3
 800ede8:	69bb      	ldr	r3, [r7, #24]
 800edea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800edec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edee:	687a      	ldr	r2, [r7, #4]
 800edf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800edf2:	69b8      	ldr	r0, [r7, #24]
 800edf4:	f000 f908 	bl	800f008 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800edf8:	4b1d      	ldr	r3, [pc, #116]	; (800ee70 <pvPortMalloc+0x188>)
 800edfa:	681a      	ldr	r2, [r3, #0]
 800edfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edfe:	685b      	ldr	r3, [r3, #4]
 800ee00:	1ad3      	subs	r3, r2, r3
 800ee02:	4a1b      	ldr	r2, [pc, #108]	; (800ee70 <pvPortMalloc+0x188>)
 800ee04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ee06:	4b1a      	ldr	r3, [pc, #104]	; (800ee70 <pvPortMalloc+0x188>)
 800ee08:	681a      	ldr	r2, [r3, #0]
 800ee0a:	4b1b      	ldr	r3, [pc, #108]	; (800ee78 <pvPortMalloc+0x190>)
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	429a      	cmp	r2, r3
 800ee10:	d203      	bcs.n	800ee1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ee12:	4b17      	ldr	r3, [pc, #92]	; (800ee70 <pvPortMalloc+0x188>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	4a18      	ldr	r2, [pc, #96]	; (800ee78 <pvPortMalloc+0x190>)
 800ee18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ee1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee1c:	685a      	ldr	r2, [r3, #4]
 800ee1e:	4b13      	ldr	r3, [pc, #76]	; (800ee6c <pvPortMalloc+0x184>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	431a      	orrs	r2, r3
 800ee24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ee28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ee2e:	4b13      	ldr	r3, [pc, #76]	; (800ee7c <pvPortMalloc+0x194>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	3301      	adds	r3, #1
 800ee34:	4a11      	ldr	r2, [pc, #68]	; (800ee7c <pvPortMalloc+0x194>)
 800ee36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ee38:	f7fe fd04 	bl	800d844 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ee3c:	69fb      	ldr	r3, [r7, #28]
 800ee3e:	f003 0307 	and.w	r3, r3, #7
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d00a      	beq.n	800ee5c <pvPortMalloc+0x174>
	__asm volatile
 800ee46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee4a:	f383 8811 	msr	BASEPRI, r3
 800ee4e:	f3bf 8f6f 	isb	sy
 800ee52:	f3bf 8f4f 	dsb	sy
 800ee56:	60fb      	str	r3, [r7, #12]
}
 800ee58:	bf00      	nop
 800ee5a:	e7fe      	b.n	800ee5a <pvPortMalloc+0x172>
	return pvReturn;
 800ee5c:	69fb      	ldr	r3, [r7, #28]
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	3728      	adds	r7, #40	; 0x28
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}
 800ee66:	bf00      	nop
 800ee68:	20006a34 	.word	0x20006a34
 800ee6c:	20006a48 	.word	0x20006a48
 800ee70:	20006a38 	.word	0x20006a38
 800ee74:	20006a2c 	.word	0x20006a2c
 800ee78:	20006a3c 	.word	0x20006a3c
 800ee7c:	20006a40 	.word	0x20006a40

0800ee80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b086      	sub	sp, #24
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d04d      	beq.n	800ef2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ee92:	2308      	movs	r3, #8
 800ee94:	425b      	negs	r3, r3
 800ee96:	697a      	ldr	r2, [r7, #20]
 800ee98:	4413      	add	r3, r2
 800ee9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eea0:	693b      	ldr	r3, [r7, #16]
 800eea2:	685a      	ldr	r2, [r3, #4]
 800eea4:	4b24      	ldr	r3, [pc, #144]	; (800ef38 <vPortFree+0xb8>)
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	4013      	ands	r3, r2
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d10a      	bne.n	800eec4 <vPortFree+0x44>
	__asm volatile
 800eeae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb2:	f383 8811 	msr	BASEPRI, r3
 800eeb6:	f3bf 8f6f 	isb	sy
 800eeba:	f3bf 8f4f 	dsb	sy
 800eebe:	60fb      	str	r3, [r7, #12]
}
 800eec0:	bf00      	nop
 800eec2:	e7fe      	b.n	800eec2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eec4:	693b      	ldr	r3, [r7, #16]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d00a      	beq.n	800eee2 <vPortFree+0x62>
	__asm volatile
 800eecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed0:	f383 8811 	msr	BASEPRI, r3
 800eed4:	f3bf 8f6f 	isb	sy
 800eed8:	f3bf 8f4f 	dsb	sy
 800eedc:	60bb      	str	r3, [r7, #8]
}
 800eede:	bf00      	nop
 800eee0:	e7fe      	b.n	800eee0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eee2:	693b      	ldr	r3, [r7, #16]
 800eee4:	685a      	ldr	r2, [r3, #4]
 800eee6:	4b14      	ldr	r3, [pc, #80]	; (800ef38 <vPortFree+0xb8>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	4013      	ands	r3, r2
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d01e      	beq.n	800ef2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eef0:	693b      	ldr	r3, [r7, #16]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d11a      	bne.n	800ef2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eef8:	693b      	ldr	r3, [r7, #16]
 800eefa:	685a      	ldr	r2, [r3, #4]
 800eefc:	4b0e      	ldr	r3, [pc, #56]	; (800ef38 <vPortFree+0xb8>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	43db      	mvns	r3, r3
 800ef02:	401a      	ands	r2, r3
 800ef04:	693b      	ldr	r3, [r7, #16]
 800ef06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ef08:	f7fe fc8e 	bl	800d828 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ef0c:	693b      	ldr	r3, [r7, #16]
 800ef0e:	685a      	ldr	r2, [r3, #4]
 800ef10:	4b0a      	ldr	r3, [pc, #40]	; (800ef3c <vPortFree+0xbc>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	4413      	add	r3, r2
 800ef16:	4a09      	ldr	r2, [pc, #36]	; (800ef3c <vPortFree+0xbc>)
 800ef18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ef1a:	6938      	ldr	r0, [r7, #16]
 800ef1c:	f000 f874 	bl	800f008 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ef20:	4b07      	ldr	r3, [pc, #28]	; (800ef40 <vPortFree+0xc0>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	3301      	adds	r3, #1
 800ef26:	4a06      	ldr	r2, [pc, #24]	; (800ef40 <vPortFree+0xc0>)
 800ef28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ef2a:	f7fe fc8b 	bl	800d844 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ef2e:	bf00      	nop
 800ef30:	3718      	adds	r7, #24
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}
 800ef36:	bf00      	nop
 800ef38:	20006a48 	.word	0x20006a48
 800ef3c:	20006a38 	.word	0x20006a38
 800ef40:	20006a44 	.word	0x20006a44

0800ef44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ef44:	b480      	push	{r7}
 800ef46:	b085      	sub	sp, #20
 800ef48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ef4a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800ef4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ef50:	4b27      	ldr	r3, [pc, #156]	; (800eff0 <prvHeapInit+0xac>)
 800ef52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f003 0307 	and.w	r3, r3, #7
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d00c      	beq.n	800ef78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	3307      	adds	r3, #7
 800ef62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	f023 0307 	bic.w	r3, r3, #7
 800ef6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ef6c:	68ba      	ldr	r2, [r7, #8]
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	1ad3      	subs	r3, r2, r3
 800ef72:	4a1f      	ldr	r2, [pc, #124]	; (800eff0 <prvHeapInit+0xac>)
 800ef74:	4413      	add	r3, r2
 800ef76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ef7c:	4a1d      	ldr	r2, [pc, #116]	; (800eff4 <prvHeapInit+0xb0>)
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ef82:	4b1c      	ldr	r3, [pc, #112]	; (800eff4 <prvHeapInit+0xb0>)
 800ef84:	2200      	movs	r2, #0
 800ef86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	68ba      	ldr	r2, [r7, #8]
 800ef8c:	4413      	add	r3, r2
 800ef8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ef90:	2208      	movs	r2, #8
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	1a9b      	subs	r3, r3, r2
 800ef96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	f023 0307 	bic.w	r3, r3, #7
 800ef9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	4a15      	ldr	r2, [pc, #84]	; (800eff8 <prvHeapInit+0xb4>)
 800efa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800efa6:	4b14      	ldr	r3, [pc, #80]	; (800eff8 <prvHeapInit+0xb4>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	2200      	movs	r2, #0
 800efac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800efae:	4b12      	ldr	r3, [pc, #72]	; (800eff8 <prvHeapInit+0xb4>)
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	2200      	movs	r2, #0
 800efb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	68fa      	ldr	r2, [r7, #12]
 800efbe:	1ad2      	subs	r2, r2, r3
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800efc4:	4b0c      	ldr	r3, [pc, #48]	; (800eff8 <prvHeapInit+0xb4>)
 800efc6:	681a      	ldr	r2, [r3, #0]
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	685b      	ldr	r3, [r3, #4]
 800efd0:	4a0a      	ldr	r2, [pc, #40]	; (800effc <prvHeapInit+0xb8>)
 800efd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	685b      	ldr	r3, [r3, #4]
 800efd8:	4a09      	ldr	r2, [pc, #36]	; (800f000 <prvHeapInit+0xbc>)
 800efda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800efdc:	4b09      	ldr	r3, [pc, #36]	; (800f004 <prvHeapInit+0xc0>)
 800efde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800efe2:	601a      	str	r2, [r3, #0]
}
 800efe4:	bf00      	nop
 800efe6:	3714      	adds	r7, #20
 800efe8:	46bd      	mov	sp, r7
 800efea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efee:	4770      	bx	lr
 800eff0:	20001c0c 	.word	0x20001c0c
 800eff4:	20006a2c 	.word	0x20006a2c
 800eff8:	20006a34 	.word	0x20006a34
 800effc:	20006a3c 	.word	0x20006a3c
 800f000:	20006a38 	.word	0x20006a38
 800f004:	20006a48 	.word	0x20006a48

0800f008 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f008:	b480      	push	{r7}
 800f00a:	b085      	sub	sp, #20
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f010:	4b28      	ldr	r3, [pc, #160]	; (800f0b4 <prvInsertBlockIntoFreeList+0xac>)
 800f012:	60fb      	str	r3, [r7, #12]
 800f014:	e002      	b.n	800f01c <prvInsertBlockIntoFreeList+0x14>
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	60fb      	str	r3, [r7, #12]
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	687a      	ldr	r2, [r7, #4]
 800f022:	429a      	cmp	r2, r3
 800f024:	d8f7      	bhi.n	800f016 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	685b      	ldr	r3, [r3, #4]
 800f02e:	68ba      	ldr	r2, [r7, #8]
 800f030:	4413      	add	r3, r2
 800f032:	687a      	ldr	r2, [r7, #4]
 800f034:	429a      	cmp	r2, r3
 800f036:	d108      	bne.n	800f04a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	685a      	ldr	r2, [r3, #4]
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	685b      	ldr	r3, [r3, #4]
 800f040:	441a      	add	r2, r3
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	685b      	ldr	r3, [r3, #4]
 800f052:	68ba      	ldr	r2, [r7, #8]
 800f054:	441a      	add	r2, r3
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	429a      	cmp	r2, r3
 800f05c:	d118      	bne.n	800f090 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	681a      	ldr	r2, [r3, #0]
 800f062:	4b15      	ldr	r3, [pc, #84]	; (800f0b8 <prvInsertBlockIntoFreeList+0xb0>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	429a      	cmp	r2, r3
 800f068:	d00d      	beq.n	800f086 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	685a      	ldr	r2, [r3, #4]
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	685b      	ldr	r3, [r3, #4]
 800f074:	441a      	add	r2, r3
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	681a      	ldr	r2, [r3, #0]
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	601a      	str	r2, [r3, #0]
 800f084:	e008      	b.n	800f098 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f086:	4b0c      	ldr	r3, [pc, #48]	; (800f0b8 <prvInsertBlockIntoFreeList+0xb0>)
 800f088:	681a      	ldr	r2, [r3, #0]
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	601a      	str	r2, [r3, #0]
 800f08e:	e003      	b.n	800f098 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	681a      	ldr	r2, [r3, #0]
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f098:	68fa      	ldr	r2, [r7, #12]
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	429a      	cmp	r2, r3
 800f09e:	d002      	beq.n	800f0a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	687a      	ldr	r2, [r7, #4]
 800f0a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f0a6:	bf00      	nop
 800f0a8:	3714      	adds	r7, #20
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b0:	4770      	bx	lr
 800f0b2:	bf00      	nop
 800f0b4:	20006a2c 	.word	0x20006a2c
 800f0b8:	20006a34 	.word	0x20006a34

0800f0bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	4912      	ldr	r1, [pc, #72]	; (800f10c <MX_USB_DEVICE_Init+0x50>)
 800f0c4:	4812      	ldr	r0, [pc, #72]	; (800f110 <MX_USB_DEVICE_Init+0x54>)
 800f0c6:	f7fb fdbd 	bl	800ac44 <USBD_Init>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d001      	beq.n	800f0d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f0d0:	f7f4 f848 	bl	8003164 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f0d4:	490f      	ldr	r1, [pc, #60]	; (800f114 <MX_USB_DEVICE_Init+0x58>)
 800f0d6:	480e      	ldr	r0, [pc, #56]	; (800f110 <MX_USB_DEVICE_Init+0x54>)
 800f0d8:	f7fb fde4 	bl	800aca4 <USBD_RegisterClass>
 800f0dc:	4603      	mov	r3, r0
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d001      	beq.n	800f0e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f0e2:	f7f4 f83f 	bl	8003164 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f0e6:	490c      	ldr	r1, [pc, #48]	; (800f118 <MX_USB_DEVICE_Init+0x5c>)
 800f0e8:	4809      	ldr	r0, [pc, #36]	; (800f110 <MX_USB_DEVICE_Init+0x54>)
 800f0ea:	f7fb fd1b 	bl	800ab24 <USBD_CDC_RegisterInterface>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d001      	beq.n	800f0f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f0f4:	f7f4 f836 	bl	8003164 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f0f8:	4805      	ldr	r0, [pc, #20]	; (800f110 <MX_USB_DEVICE_Init+0x54>)
 800f0fa:	f7fb fe09 	bl	800ad10 <USBD_Start>
 800f0fe:	4603      	mov	r3, r0
 800f100:	2b00      	cmp	r3, #0
 800f102:	d001      	beq.n	800f108 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f104:	f7f4 f82e 	bl	8003164 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f108:	bf00      	nop
 800f10a:	bd80      	pop	{r7, pc}
 800f10c:	200005d8 	.word	0x200005d8
 800f110:	20006a4c 	.word	0x20006a4c
 800f114:	20000540 	.word	0x20000540
 800f118:	200005c4 	.word	0x200005c4

0800f11c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f120:	2200      	movs	r2, #0
 800f122:	4905      	ldr	r1, [pc, #20]	; (800f138 <CDC_Init_FS+0x1c>)
 800f124:	4805      	ldr	r0, [pc, #20]	; (800f13c <CDC_Init_FS+0x20>)
 800f126:	f7fb fd17 	bl	800ab58 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f12a:	4905      	ldr	r1, [pc, #20]	; (800f140 <CDC_Init_FS+0x24>)
 800f12c:	4803      	ldr	r0, [pc, #12]	; (800f13c <CDC_Init_FS+0x20>)
 800f12e:	f7fb fd35 	bl	800ab9c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f132:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f134:	4618      	mov	r0, r3
 800f136:	bd80      	pop	{r7, pc}
 800f138:	20007128 	.word	0x20007128
 800f13c:	20006a4c 	.word	0x20006a4c
 800f140:	20006d28 	.word	0x20006d28

0800f144 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f144:	b480      	push	{r7}
 800f146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f148:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	46bd      	mov	sp, r7
 800f14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f152:	4770      	bx	lr

0800f154 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f154:	b480      	push	{r7}
 800f156:	b083      	sub	sp, #12
 800f158:	af00      	add	r7, sp, #0
 800f15a:	4603      	mov	r3, r0
 800f15c:	6039      	str	r1, [r7, #0]
 800f15e:	71fb      	strb	r3, [r7, #7]
 800f160:	4613      	mov	r3, r2
 800f162:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f164:	79fb      	ldrb	r3, [r7, #7]
 800f166:	2b23      	cmp	r3, #35	; 0x23
 800f168:	d84a      	bhi.n	800f200 <CDC_Control_FS+0xac>
 800f16a:	a201      	add	r2, pc, #4	; (adr r2, 800f170 <CDC_Control_FS+0x1c>)
 800f16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f170:	0800f201 	.word	0x0800f201
 800f174:	0800f201 	.word	0x0800f201
 800f178:	0800f201 	.word	0x0800f201
 800f17c:	0800f201 	.word	0x0800f201
 800f180:	0800f201 	.word	0x0800f201
 800f184:	0800f201 	.word	0x0800f201
 800f188:	0800f201 	.word	0x0800f201
 800f18c:	0800f201 	.word	0x0800f201
 800f190:	0800f201 	.word	0x0800f201
 800f194:	0800f201 	.word	0x0800f201
 800f198:	0800f201 	.word	0x0800f201
 800f19c:	0800f201 	.word	0x0800f201
 800f1a0:	0800f201 	.word	0x0800f201
 800f1a4:	0800f201 	.word	0x0800f201
 800f1a8:	0800f201 	.word	0x0800f201
 800f1ac:	0800f201 	.word	0x0800f201
 800f1b0:	0800f201 	.word	0x0800f201
 800f1b4:	0800f201 	.word	0x0800f201
 800f1b8:	0800f201 	.word	0x0800f201
 800f1bc:	0800f201 	.word	0x0800f201
 800f1c0:	0800f201 	.word	0x0800f201
 800f1c4:	0800f201 	.word	0x0800f201
 800f1c8:	0800f201 	.word	0x0800f201
 800f1cc:	0800f201 	.word	0x0800f201
 800f1d0:	0800f201 	.word	0x0800f201
 800f1d4:	0800f201 	.word	0x0800f201
 800f1d8:	0800f201 	.word	0x0800f201
 800f1dc:	0800f201 	.word	0x0800f201
 800f1e0:	0800f201 	.word	0x0800f201
 800f1e4:	0800f201 	.word	0x0800f201
 800f1e8:	0800f201 	.word	0x0800f201
 800f1ec:	0800f201 	.word	0x0800f201
 800f1f0:	0800f201 	.word	0x0800f201
 800f1f4:	0800f201 	.word	0x0800f201
 800f1f8:	0800f201 	.word	0x0800f201
 800f1fc:	0800f201 	.word	0x0800f201
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f200:	bf00      	nop
  }

  return (USBD_OK);
 800f202:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f204:	4618      	mov	r0, r3
 800f206:	370c      	adds	r7, #12
 800f208:	46bd      	mov	sp, r7
 800f20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20e:	4770      	bx	lr

0800f210 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b082      	sub	sp, #8
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
 800f218:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f21a:	6879      	ldr	r1, [r7, #4]
 800f21c:	4805      	ldr	r0, [pc, #20]	; (800f234 <CDC_Receive_FS+0x24>)
 800f21e:	f7fb fcbd 	bl	800ab9c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f222:	4804      	ldr	r0, [pc, #16]	; (800f234 <CDC_Receive_FS+0x24>)
 800f224:	f7fb fcd8 	bl	800abd8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f228:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f22a:	4618      	mov	r0, r3
 800f22c:	3708      	adds	r7, #8
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}
 800f232:	bf00      	nop
 800f234:	20006a4c 	.word	0x20006a4c

0800f238 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f238:	b480      	push	{r7}
 800f23a:	b087      	sub	sp, #28
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	60f8      	str	r0, [r7, #12]
 800f240:	60b9      	str	r1, [r7, #8]
 800f242:	4613      	mov	r3, r2
 800f244:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f246:	2300      	movs	r3, #0
 800f248:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f24a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f24e:	4618      	mov	r0, r3
 800f250:	371c      	adds	r7, #28
 800f252:	46bd      	mov	sp, r7
 800f254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f258:	4770      	bx	lr
	...

0800f25c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f25c:	b480      	push	{r7}
 800f25e:	b083      	sub	sp, #12
 800f260:	af00      	add	r7, sp, #0
 800f262:	4603      	mov	r3, r0
 800f264:	6039      	str	r1, [r7, #0]
 800f266:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	2212      	movs	r2, #18
 800f26c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f26e:	4b03      	ldr	r3, [pc, #12]	; (800f27c <USBD_FS_DeviceDescriptor+0x20>)
}
 800f270:	4618      	mov	r0, r3
 800f272:	370c      	adds	r7, #12
 800f274:	46bd      	mov	sp, r7
 800f276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27a:	4770      	bx	lr
 800f27c:	200005f4 	.word	0x200005f4

0800f280 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f280:	b480      	push	{r7}
 800f282:	b083      	sub	sp, #12
 800f284:	af00      	add	r7, sp, #0
 800f286:	4603      	mov	r3, r0
 800f288:	6039      	str	r1, [r7, #0]
 800f28a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	2204      	movs	r2, #4
 800f290:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f292:	4b03      	ldr	r3, [pc, #12]	; (800f2a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f294:	4618      	mov	r0, r3
 800f296:	370c      	adds	r7, #12
 800f298:	46bd      	mov	sp, r7
 800f29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29e:	4770      	bx	lr
 800f2a0:	20000608 	.word	0x20000608

0800f2a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b082      	sub	sp, #8
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	6039      	str	r1, [r7, #0]
 800f2ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f2b0:	79fb      	ldrb	r3, [r7, #7]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d105      	bne.n	800f2c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f2b6:	683a      	ldr	r2, [r7, #0]
 800f2b8:	4907      	ldr	r1, [pc, #28]	; (800f2d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800f2ba:	4808      	ldr	r0, [pc, #32]	; (800f2dc <USBD_FS_ProductStrDescriptor+0x38>)
 800f2bc:	f7fc fed4 	bl	800c068 <USBD_GetString>
 800f2c0:	e004      	b.n	800f2cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f2c2:	683a      	ldr	r2, [r7, #0]
 800f2c4:	4904      	ldr	r1, [pc, #16]	; (800f2d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800f2c6:	4805      	ldr	r0, [pc, #20]	; (800f2dc <USBD_FS_ProductStrDescriptor+0x38>)
 800f2c8:	f7fc fece 	bl	800c068 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f2cc:	4b02      	ldr	r3, [pc, #8]	; (800f2d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3708      	adds	r7, #8
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}
 800f2d6:	bf00      	nop
 800f2d8:	20007528 	.word	0x20007528
 800f2dc:	080107d0 	.word	0x080107d0

0800f2e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b082      	sub	sp, #8
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	6039      	str	r1, [r7, #0]
 800f2ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f2ec:	683a      	ldr	r2, [r7, #0]
 800f2ee:	4904      	ldr	r1, [pc, #16]	; (800f300 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f2f0:	4804      	ldr	r0, [pc, #16]	; (800f304 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f2f2:	f7fc feb9 	bl	800c068 <USBD_GetString>
  return USBD_StrDesc;
 800f2f6:	4b02      	ldr	r3, [pc, #8]	; (800f300 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	3708      	adds	r7, #8
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}
 800f300:	20007528 	.word	0x20007528
 800f304:	080107e8 	.word	0x080107e8

0800f308 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b082      	sub	sp, #8
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	4603      	mov	r3, r0
 800f310:	6039      	str	r1, [r7, #0]
 800f312:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	221a      	movs	r2, #26
 800f318:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f31a:	f000 f843 	bl	800f3a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f31e:	4b02      	ldr	r3, [pc, #8]	; (800f328 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f320:	4618      	mov	r0, r3
 800f322:	3708      	adds	r7, #8
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}
 800f328:	2000060c 	.word	0x2000060c

0800f32c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b082      	sub	sp, #8
 800f330:	af00      	add	r7, sp, #0
 800f332:	4603      	mov	r3, r0
 800f334:	6039      	str	r1, [r7, #0]
 800f336:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f338:	79fb      	ldrb	r3, [r7, #7]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d105      	bne.n	800f34a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f33e:	683a      	ldr	r2, [r7, #0]
 800f340:	4907      	ldr	r1, [pc, #28]	; (800f360 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f342:	4808      	ldr	r0, [pc, #32]	; (800f364 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f344:	f7fc fe90 	bl	800c068 <USBD_GetString>
 800f348:	e004      	b.n	800f354 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f34a:	683a      	ldr	r2, [r7, #0]
 800f34c:	4904      	ldr	r1, [pc, #16]	; (800f360 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f34e:	4805      	ldr	r0, [pc, #20]	; (800f364 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f350:	f7fc fe8a 	bl	800c068 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f354:	4b02      	ldr	r3, [pc, #8]	; (800f360 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f356:	4618      	mov	r0, r3
 800f358:	3708      	adds	r7, #8
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}
 800f35e:	bf00      	nop
 800f360:	20007528 	.word	0x20007528
 800f364:	080107fc 	.word	0x080107fc

0800f368 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b082      	sub	sp, #8
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	4603      	mov	r3, r0
 800f370:	6039      	str	r1, [r7, #0]
 800f372:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f374:	79fb      	ldrb	r3, [r7, #7]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d105      	bne.n	800f386 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f37a:	683a      	ldr	r2, [r7, #0]
 800f37c:	4907      	ldr	r1, [pc, #28]	; (800f39c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f37e:	4808      	ldr	r0, [pc, #32]	; (800f3a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f380:	f7fc fe72 	bl	800c068 <USBD_GetString>
 800f384:	e004      	b.n	800f390 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f386:	683a      	ldr	r2, [r7, #0]
 800f388:	4904      	ldr	r1, [pc, #16]	; (800f39c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f38a:	4805      	ldr	r0, [pc, #20]	; (800f3a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f38c:	f7fc fe6c 	bl	800c068 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f390:	4b02      	ldr	r3, [pc, #8]	; (800f39c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f392:	4618      	mov	r0, r3
 800f394:	3708      	adds	r7, #8
 800f396:	46bd      	mov	sp, r7
 800f398:	bd80      	pop	{r7, pc}
 800f39a:	bf00      	nop
 800f39c:	20007528 	.word	0x20007528
 800f3a0:	08010808 	.word	0x08010808

0800f3a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b084      	sub	sp, #16
 800f3a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f3aa:	4b0f      	ldr	r3, [pc, #60]	; (800f3e8 <Get_SerialNum+0x44>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f3b0:	4b0e      	ldr	r3, [pc, #56]	; (800f3ec <Get_SerialNum+0x48>)
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f3b6:	4b0e      	ldr	r3, [pc, #56]	; (800f3f0 <Get_SerialNum+0x4c>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f3bc:	68fa      	ldr	r2, [r7, #12]
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	4413      	add	r3, r2
 800f3c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d009      	beq.n	800f3de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f3ca:	2208      	movs	r2, #8
 800f3cc:	4909      	ldr	r1, [pc, #36]	; (800f3f4 <Get_SerialNum+0x50>)
 800f3ce:	68f8      	ldr	r0, [r7, #12]
 800f3d0:	f000 f814 	bl	800f3fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f3d4:	2204      	movs	r2, #4
 800f3d6:	4908      	ldr	r1, [pc, #32]	; (800f3f8 <Get_SerialNum+0x54>)
 800f3d8:	68b8      	ldr	r0, [r7, #8]
 800f3da:	f000 f80f 	bl	800f3fc <IntToUnicode>
  }
}
 800f3de:	bf00      	nop
 800f3e0:	3710      	adds	r7, #16
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}
 800f3e6:	bf00      	nop
 800f3e8:	1fff7a10 	.word	0x1fff7a10
 800f3ec:	1fff7a14 	.word	0x1fff7a14
 800f3f0:	1fff7a18 	.word	0x1fff7a18
 800f3f4:	2000060e 	.word	0x2000060e
 800f3f8:	2000061e 	.word	0x2000061e

0800f3fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f3fc:	b480      	push	{r7}
 800f3fe:	b087      	sub	sp, #28
 800f400:	af00      	add	r7, sp, #0
 800f402:	60f8      	str	r0, [r7, #12]
 800f404:	60b9      	str	r1, [r7, #8]
 800f406:	4613      	mov	r3, r2
 800f408:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f40a:	2300      	movs	r3, #0
 800f40c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f40e:	2300      	movs	r3, #0
 800f410:	75fb      	strb	r3, [r7, #23]
 800f412:	e027      	b.n	800f464 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	0f1b      	lsrs	r3, r3, #28
 800f418:	2b09      	cmp	r3, #9
 800f41a:	d80b      	bhi.n	800f434 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	0f1b      	lsrs	r3, r3, #28
 800f420:	b2da      	uxtb	r2, r3
 800f422:	7dfb      	ldrb	r3, [r7, #23]
 800f424:	005b      	lsls	r3, r3, #1
 800f426:	4619      	mov	r1, r3
 800f428:	68bb      	ldr	r3, [r7, #8]
 800f42a:	440b      	add	r3, r1
 800f42c:	3230      	adds	r2, #48	; 0x30
 800f42e:	b2d2      	uxtb	r2, r2
 800f430:	701a      	strb	r2, [r3, #0]
 800f432:	e00a      	b.n	800f44a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	0f1b      	lsrs	r3, r3, #28
 800f438:	b2da      	uxtb	r2, r3
 800f43a:	7dfb      	ldrb	r3, [r7, #23]
 800f43c:	005b      	lsls	r3, r3, #1
 800f43e:	4619      	mov	r1, r3
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	440b      	add	r3, r1
 800f444:	3237      	adds	r2, #55	; 0x37
 800f446:	b2d2      	uxtb	r2, r2
 800f448:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	011b      	lsls	r3, r3, #4
 800f44e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f450:	7dfb      	ldrb	r3, [r7, #23]
 800f452:	005b      	lsls	r3, r3, #1
 800f454:	3301      	adds	r3, #1
 800f456:	68ba      	ldr	r2, [r7, #8]
 800f458:	4413      	add	r3, r2
 800f45a:	2200      	movs	r2, #0
 800f45c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f45e:	7dfb      	ldrb	r3, [r7, #23]
 800f460:	3301      	adds	r3, #1
 800f462:	75fb      	strb	r3, [r7, #23]
 800f464:	7dfa      	ldrb	r2, [r7, #23]
 800f466:	79fb      	ldrb	r3, [r7, #7]
 800f468:	429a      	cmp	r2, r3
 800f46a:	d3d3      	bcc.n	800f414 <IntToUnicode+0x18>
  }
}
 800f46c:	bf00      	nop
 800f46e:	bf00      	nop
 800f470:	371c      	adds	r7, #28
 800f472:	46bd      	mov	sp, r7
 800f474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f478:	4770      	bx	lr
	...

0800f47c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b08a      	sub	sp, #40	; 0x28
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f484:	f107 0314 	add.w	r3, r7, #20
 800f488:	2200      	movs	r2, #0
 800f48a:	601a      	str	r2, [r3, #0]
 800f48c:	605a      	str	r2, [r3, #4]
 800f48e:	609a      	str	r2, [r3, #8]
 800f490:	60da      	str	r2, [r3, #12]
 800f492:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f49c:	d13a      	bne.n	800f514 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f49e:	2300      	movs	r3, #0
 800f4a0:	613b      	str	r3, [r7, #16]
 800f4a2:	4b1e      	ldr	r3, [pc, #120]	; (800f51c <HAL_PCD_MspInit+0xa0>)
 800f4a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4a6:	4a1d      	ldr	r2, [pc, #116]	; (800f51c <HAL_PCD_MspInit+0xa0>)
 800f4a8:	f043 0301 	orr.w	r3, r3, #1
 800f4ac:	6313      	str	r3, [r2, #48]	; 0x30
 800f4ae:	4b1b      	ldr	r3, [pc, #108]	; (800f51c <HAL_PCD_MspInit+0xa0>)
 800f4b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4b2:	f003 0301 	and.w	r3, r3, #1
 800f4b6:	613b      	str	r3, [r7, #16]
 800f4b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f4ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f4be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f4c0:	2302      	movs	r3, #2
 800f4c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f4c8:	2303      	movs	r3, #3
 800f4ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f4cc:	230a      	movs	r3, #10
 800f4ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f4d0:	f107 0314 	add.w	r3, r7, #20
 800f4d4:	4619      	mov	r1, r3
 800f4d6:	4812      	ldr	r0, [pc, #72]	; (800f520 <HAL_PCD_MspInit+0xa4>)
 800f4d8:	f7f4 fd3c 	bl	8003f54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f4dc:	4b0f      	ldr	r3, [pc, #60]	; (800f51c <HAL_PCD_MspInit+0xa0>)
 800f4de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4e0:	4a0e      	ldr	r2, [pc, #56]	; (800f51c <HAL_PCD_MspInit+0xa0>)
 800f4e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4e6:	6353      	str	r3, [r2, #52]	; 0x34
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	60fb      	str	r3, [r7, #12]
 800f4ec:	4b0b      	ldr	r3, [pc, #44]	; (800f51c <HAL_PCD_MspInit+0xa0>)
 800f4ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4f0:	4a0a      	ldr	r2, [pc, #40]	; (800f51c <HAL_PCD_MspInit+0xa0>)
 800f4f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f4f6:	6453      	str	r3, [r2, #68]	; 0x44
 800f4f8:	4b08      	ldr	r3, [pc, #32]	; (800f51c <HAL_PCD_MspInit+0xa0>)
 800f4fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f500:	60fb      	str	r3, [r7, #12]
 800f502:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f504:	2200      	movs	r2, #0
 800f506:	2105      	movs	r1, #5
 800f508:	2043      	movs	r0, #67	; 0x43
 800f50a:	f7f4 fcf9 	bl	8003f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f50e:	2043      	movs	r0, #67	; 0x43
 800f510:	f7f4 fd12 	bl	8003f38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f514:	bf00      	nop
 800f516:	3728      	adds	r7, #40	; 0x28
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}
 800f51c:	40023800 	.word	0x40023800
 800f520:	40020000 	.word	0x40020000

0800f524 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b082      	sub	sp, #8
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f538:	4619      	mov	r1, r3
 800f53a:	4610      	mov	r0, r2
 800f53c:	f7fb fc35 	bl	800adaa <USBD_LL_SetupStage>
}
 800f540:	bf00      	nop
 800f542:	3708      	adds	r7, #8
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}

0800f548 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b082      	sub	sp, #8
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
 800f550:	460b      	mov	r3, r1
 800f552:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f55a:	78fa      	ldrb	r2, [r7, #3]
 800f55c:	6879      	ldr	r1, [r7, #4]
 800f55e:	4613      	mov	r3, r2
 800f560:	00db      	lsls	r3, r3, #3
 800f562:	4413      	add	r3, r2
 800f564:	009b      	lsls	r3, r3, #2
 800f566:	440b      	add	r3, r1
 800f568:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f56c:	681a      	ldr	r2, [r3, #0]
 800f56e:	78fb      	ldrb	r3, [r7, #3]
 800f570:	4619      	mov	r1, r3
 800f572:	f7fb fc6f 	bl	800ae54 <USBD_LL_DataOutStage>
}
 800f576:	bf00      	nop
 800f578:	3708      	adds	r7, #8
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}

0800f57e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f57e:	b580      	push	{r7, lr}
 800f580:	b082      	sub	sp, #8
 800f582:	af00      	add	r7, sp, #0
 800f584:	6078      	str	r0, [r7, #4]
 800f586:	460b      	mov	r3, r1
 800f588:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f590:	78fa      	ldrb	r2, [r7, #3]
 800f592:	6879      	ldr	r1, [r7, #4]
 800f594:	4613      	mov	r3, r2
 800f596:	00db      	lsls	r3, r3, #3
 800f598:	4413      	add	r3, r2
 800f59a:	009b      	lsls	r3, r3, #2
 800f59c:	440b      	add	r3, r1
 800f59e:	334c      	adds	r3, #76	; 0x4c
 800f5a0:	681a      	ldr	r2, [r3, #0]
 800f5a2:	78fb      	ldrb	r3, [r7, #3]
 800f5a4:	4619      	mov	r1, r3
 800f5a6:	f7fb fd08 	bl	800afba <USBD_LL_DataInStage>
}
 800f5aa:	bf00      	nop
 800f5ac:	3708      	adds	r7, #8
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	bd80      	pop	{r7, pc}

0800f5b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5b2:	b580      	push	{r7, lr}
 800f5b4:	b082      	sub	sp, #8
 800f5b6:	af00      	add	r7, sp, #0
 800f5b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	f7fb fe3c 	bl	800b23e <USBD_LL_SOF>
}
 800f5c6:	bf00      	nop
 800f5c8:	3708      	adds	r7, #8
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}

0800f5ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5ce:	b580      	push	{r7, lr}
 800f5d0:	b084      	sub	sp, #16
 800f5d2:	af00      	add	r7, sp, #0
 800f5d4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f5d6:	2301      	movs	r3, #1
 800f5d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	68db      	ldr	r3, [r3, #12]
 800f5de:	2b02      	cmp	r3, #2
 800f5e0:	d001      	beq.n	800f5e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f5e2:	f7f3 fdbf 	bl	8003164 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f5ec:	7bfa      	ldrb	r2, [r7, #15]
 800f5ee:	4611      	mov	r1, r2
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	f7fb fde6 	bl	800b1c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7fb fd8e 	bl	800b11e <USBD_LL_Reset>
}
 800f602:	bf00      	nop
 800f604:	3710      	adds	r7, #16
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}
	...

0800f60c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b082      	sub	sp, #8
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f61a:	4618      	mov	r0, r3
 800f61c:	f7fb fde1 	bl	800b1e2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	687a      	ldr	r2, [r7, #4]
 800f62c:	6812      	ldr	r2, [r2, #0]
 800f62e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f632:	f043 0301 	orr.w	r3, r3, #1
 800f636:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6a1b      	ldr	r3, [r3, #32]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d005      	beq.n	800f64c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f640:	4b04      	ldr	r3, [pc, #16]	; (800f654 <HAL_PCD_SuspendCallback+0x48>)
 800f642:	691b      	ldr	r3, [r3, #16]
 800f644:	4a03      	ldr	r2, [pc, #12]	; (800f654 <HAL_PCD_SuspendCallback+0x48>)
 800f646:	f043 0306 	orr.w	r3, r3, #6
 800f64a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f64c:	bf00      	nop
 800f64e:	3708      	adds	r7, #8
 800f650:	46bd      	mov	sp, r7
 800f652:	bd80      	pop	{r7, pc}
 800f654:	e000ed00 	.word	0xe000ed00

0800f658 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b082      	sub	sp, #8
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f666:	4618      	mov	r0, r3
 800f668:	f7fb fdd1 	bl	800b20e <USBD_LL_Resume>
}
 800f66c:	bf00      	nop
 800f66e:	3708      	adds	r7, #8
 800f670:	46bd      	mov	sp, r7
 800f672:	bd80      	pop	{r7, pc}

0800f674 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b082      	sub	sp, #8
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
 800f67c:	460b      	mov	r3, r1
 800f67e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f686:	78fa      	ldrb	r2, [r7, #3]
 800f688:	4611      	mov	r1, r2
 800f68a:	4618      	mov	r0, r3
 800f68c:	f7fb fe29 	bl	800b2e2 <USBD_LL_IsoOUTIncomplete>
}
 800f690:	bf00      	nop
 800f692:	3708      	adds	r7, #8
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}

0800f698 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b082      	sub	sp, #8
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
 800f6a0:	460b      	mov	r3, r1
 800f6a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f6aa:	78fa      	ldrb	r2, [r7, #3]
 800f6ac:	4611      	mov	r1, r2
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f7fb fde5 	bl	800b27e <USBD_LL_IsoINIncomplete>
}
 800f6b4:	bf00      	nop
 800f6b6:	3708      	adds	r7, #8
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}

0800f6bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b082      	sub	sp, #8
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f7fb fe3b 	bl	800b346 <USBD_LL_DevConnected>
}
 800f6d0:	bf00      	nop
 800f6d2:	3708      	adds	r7, #8
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	bd80      	pop	{r7, pc}

0800f6d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b082      	sub	sp, #8
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	f7fb fe38 	bl	800b35c <USBD_LL_DevDisconnected>
}
 800f6ec:	bf00      	nop
 800f6ee:	3708      	adds	r7, #8
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	bd80      	pop	{r7, pc}

0800f6f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b082      	sub	sp, #8
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	781b      	ldrb	r3, [r3, #0]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d13c      	bne.n	800f77e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f704:	4a20      	ldr	r2, [pc, #128]	; (800f788 <USBD_LL_Init+0x94>)
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	4a1e      	ldr	r2, [pc, #120]	; (800f788 <USBD_LL_Init+0x94>)
 800f710:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f714:	4b1c      	ldr	r3, [pc, #112]	; (800f788 <USBD_LL_Init+0x94>)
 800f716:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f71a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f71c:	4b1a      	ldr	r3, [pc, #104]	; (800f788 <USBD_LL_Init+0x94>)
 800f71e:	2204      	movs	r2, #4
 800f720:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f722:	4b19      	ldr	r3, [pc, #100]	; (800f788 <USBD_LL_Init+0x94>)
 800f724:	2202      	movs	r2, #2
 800f726:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f728:	4b17      	ldr	r3, [pc, #92]	; (800f788 <USBD_LL_Init+0x94>)
 800f72a:	2200      	movs	r2, #0
 800f72c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f72e:	4b16      	ldr	r3, [pc, #88]	; (800f788 <USBD_LL_Init+0x94>)
 800f730:	2202      	movs	r2, #2
 800f732:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f734:	4b14      	ldr	r3, [pc, #80]	; (800f788 <USBD_LL_Init+0x94>)
 800f736:	2200      	movs	r2, #0
 800f738:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f73a:	4b13      	ldr	r3, [pc, #76]	; (800f788 <USBD_LL_Init+0x94>)
 800f73c:	2200      	movs	r2, #0
 800f73e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f740:	4b11      	ldr	r3, [pc, #68]	; (800f788 <USBD_LL_Init+0x94>)
 800f742:	2200      	movs	r2, #0
 800f744:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f746:	4b10      	ldr	r3, [pc, #64]	; (800f788 <USBD_LL_Init+0x94>)
 800f748:	2200      	movs	r2, #0
 800f74a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f74c:	4b0e      	ldr	r3, [pc, #56]	; (800f788 <USBD_LL_Init+0x94>)
 800f74e:	2200      	movs	r2, #0
 800f750:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f752:	480d      	ldr	r0, [pc, #52]	; (800f788 <USBD_LL_Init+0x94>)
 800f754:	f7f5 fd8b 	bl	800526e <HAL_PCD_Init>
 800f758:	4603      	mov	r3, r0
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d001      	beq.n	800f762 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f75e:	f7f3 fd01 	bl	8003164 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f762:	2180      	movs	r1, #128	; 0x80
 800f764:	4808      	ldr	r0, [pc, #32]	; (800f788 <USBD_LL_Init+0x94>)
 800f766:	f7f6 ffe2 	bl	800672e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f76a:	2240      	movs	r2, #64	; 0x40
 800f76c:	2100      	movs	r1, #0
 800f76e:	4806      	ldr	r0, [pc, #24]	; (800f788 <USBD_LL_Init+0x94>)
 800f770:	f7f6 ff96 	bl	80066a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f774:	2280      	movs	r2, #128	; 0x80
 800f776:	2101      	movs	r1, #1
 800f778:	4803      	ldr	r0, [pc, #12]	; (800f788 <USBD_LL_Init+0x94>)
 800f77a:	f7f6 ff91 	bl	80066a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f77e:	2300      	movs	r3, #0
}
 800f780:	4618      	mov	r0, r3
 800f782:	3708      	adds	r7, #8
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}
 800f788:	20007728 	.word	0x20007728

0800f78c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b084      	sub	sp, #16
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f794:	2300      	movs	r3, #0
 800f796:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f798:	2300      	movs	r3, #0
 800f79a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f7f5 fe80 	bl	80054a8 <HAL_PCD_Start>
 800f7a8:	4603      	mov	r3, r0
 800f7aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f7ac:	7bfb      	ldrb	r3, [r7, #15]
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f000 f942 	bl	800fa38 <USBD_Get_USB_Status>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f7b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	3710      	adds	r7, #16
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	bd80      	pop	{r7, pc}

0800f7c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f7c2:	b580      	push	{r7, lr}
 800f7c4:	b084      	sub	sp, #16
 800f7c6:	af00      	add	r7, sp, #0
 800f7c8:	6078      	str	r0, [r7, #4]
 800f7ca:	4608      	mov	r0, r1
 800f7cc:	4611      	mov	r1, r2
 800f7ce:	461a      	mov	r2, r3
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	70fb      	strb	r3, [r7, #3]
 800f7d4:	460b      	mov	r3, r1
 800f7d6:	70bb      	strb	r3, [r7, #2]
 800f7d8:	4613      	mov	r3, r2
 800f7da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7dc:	2300      	movs	r3, #0
 800f7de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f7ea:	78bb      	ldrb	r3, [r7, #2]
 800f7ec:	883a      	ldrh	r2, [r7, #0]
 800f7ee:	78f9      	ldrb	r1, [r7, #3]
 800f7f0:	f7f6 fb51 	bl	8005e96 <HAL_PCD_EP_Open>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f7f8:	7bfb      	ldrb	r3, [r7, #15]
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f000 f91c 	bl	800fa38 <USBD_Get_USB_Status>
 800f800:	4603      	mov	r3, r0
 800f802:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f804:	7bbb      	ldrb	r3, [r7, #14]
}
 800f806:	4618      	mov	r0, r3
 800f808:	3710      	adds	r7, #16
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}

0800f80e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f80e:	b580      	push	{r7, lr}
 800f810:	b084      	sub	sp, #16
 800f812:	af00      	add	r7, sp, #0
 800f814:	6078      	str	r0, [r7, #4]
 800f816:	460b      	mov	r3, r1
 800f818:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f81a:	2300      	movs	r3, #0
 800f81c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f81e:	2300      	movs	r3, #0
 800f820:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f828:	78fa      	ldrb	r2, [r7, #3]
 800f82a:	4611      	mov	r1, r2
 800f82c:	4618      	mov	r0, r3
 800f82e:	f7f6 fb9a 	bl	8005f66 <HAL_PCD_EP_Close>
 800f832:	4603      	mov	r3, r0
 800f834:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f836:	7bfb      	ldrb	r3, [r7, #15]
 800f838:	4618      	mov	r0, r3
 800f83a:	f000 f8fd 	bl	800fa38 <USBD_Get_USB_Status>
 800f83e:	4603      	mov	r3, r0
 800f840:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f842:	7bbb      	ldrb	r3, [r7, #14]
}
 800f844:	4618      	mov	r0, r3
 800f846:	3710      	adds	r7, #16
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}

0800f84c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b084      	sub	sp, #16
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
 800f854:	460b      	mov	r3, r1
 800f856:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f858:	2300      	movs	r3, #0
 800f85a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f85c:	2300      	movs	r3, #0
 800f85e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f866:	78fa      	ldrb	r2, [r7, #3]
 800f868:	4611      	mov	r1, r2
 800f86a:	4618      	mov	r0, r3
 800f86c:	f7f6 fc72 	bl	8006154 <HAL_PCD_EP_SetStall>
 800f870:	4603      	mov	r3, r0
 800f872:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f874:	7bfb      	ldrb	r3, [r7, #15]
 800f876:	4618      	mov	r0, r3
 800f878:	f000 f8de 	bl	800fa38 <USBD_Get_USB_Status>
 800f87c:	4603      	mov	r3, r0
 800f87e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f880:	7bbb      	ldrb	r3, [r7, #14]
}
 800f882:	4618      	mov	r0, r3
 800f884:	3710      	adds	r7, #16
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}

0800f88a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f88a:	b580      	push	{r7, lr}
 800f88c:	b084      	sub	sp, #16
 800f88e:	af00      	add	r7, sp, #0
 800f890:	6078      	str	r0, [r7, #4]
 800f892:	460b      	mov	r3, r1
 800f894:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f896:	2300      	movs	r3, #0
 800f898:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f89a:	2300      	movs	r3, #0
 800f89c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f8a4:	78fa      	ldrb	r2, [r7, #3]
 800f8a6:	4611      	mov	r1, r2
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f7f6 fcb7 	bl	800621c <HAL_PCD_EP_ClrStall>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f8b2:	7bfb      	ldrb	r3, [r7, #15]
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f000 f8bf 	bl	800fa38 <USBD_Get_USB_Status>
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f8be:	7bbb      	ldrb	r3, [r7, #14]
}
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	3710      	adds	r7, #16
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd80      	pop	{r7, pc}

0800f8c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f8c8:	b480      	push	{r7}
 800f8ca:	b085      	sub	sp, #20
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
 800f8d0:	460b      	mov	r3, r1
 800f8d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f8da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f8dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	da0b      	bge.n	800f8fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f8e4:	78fb      	ldrb	r3, [r7, #3]
 800f8e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f8ea:	68f9      	ldr	r1, [r7, #12]
 800f8ec:	4613      	mov	r3, r2
 800f8ee:	00db      	lsls	r3, r3, #3
 800f8f0:	4413      	add	r3, r2
 800f8f2:	009b      	lsls	r3, r3, #2
 800f8f4:	440b      	add	r3, r1
 800f8f6:	333e      	adds	r3, #62	; 0x3e
 800f8f8:	781b      	ldrb	r3, [r3, #0]
 800f8fa:	e00b      	b.n	800f914 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f8fc:	78fb      	ldrb	r3, [r7, #3]
 800f8fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f902:	68f9      	ldr	r1, [r7, #12]
 800f904:	4613      	mov	r3, r2
 800f906:	00db      	lsls	r3, r3, #3
 800f908:	4413      	add	r3, r2
 800f90a:	009b      	lsls	r3, r3, #2
 800f90c:	440b      	add	r3, r1
 800f90e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f912:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f914:	4618      	mov	r0, r3
 800f916:	3714      	adds	r7, #20
 800f918:	46bd      	mov	sp, r7
 800f91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91e:	4770      	bx	lr

0800f920 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b084      	sub	sp, #16
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
 800f928:	460b      	mov	r3, r1
 800f92a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f92c:	2300      	movs	r3, #0
 800f92e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f930:	2300      	movs	r3, #0
 800f932:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f93a:	78fa      	ldrb	r2, [r7, #3]
 800f93c:	4611      	mov	r1, r2
 800f93e:	4618      	mov	r0, r3
 800f940:	f7f6 fa84 	bl	8005e4c <HAL_PCD_SetAddress>
 800f944:	4603      	mov	r3, r0
 800f946:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f948:	7bfb      	ldrb	r3, [r7, #15]
 800f94a:	4618      	mov	r0, r3
 800f94c:	f000 f874 	bl	800fa38 <USBD_Get_USB_Status>
 800f950:	4603      	mov	r3, r0
 800f952:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f954:	7bbb      	ldrb	r3, [r7, #14]
}
 800f956:	4618      	mov	r0, r3
 800f958:	3710      	adds	r7, #16
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}

0800f95e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f95e:	b580      	push	{r7, lr}
 800f960:	b086      	sub	sp, #24
 800f962:	af00      	add	r7, sp, #0
 800f964:	60f8      	str	r0, [r7, #12]
 800f966:	607a      	str	r2, [r7, #4]
 800f968:	603b      	str	r3, [r7, #0]
 800f96a:	460b      	mov	r3, r1
 800f96c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f96e:	2300      	movs	r3, #0
 800f970:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f972:	2300      	movs	r3, #0
 800f974:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f97c:	7af9      	ldrb	r1, [r7, #11]
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	687a      	ldr	r2, [r7, #4]
 800f982:	f7f6 fb9d 	bl	80060c0 <HAL_PCD_EP_Transmit>
 800f986:	4603      	mov	r3, r0
 800f988:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f98a:	7dfb      	ldrb	r3, [r7, #23]
 800f98c:	4618      	mov	r0, r3
 800f98e:	f000 f853 	bl	800fa38 <USBD_Get_USB_Status>
 800f992:	4603      	mov	r3, r0
 800f994:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f996:	7dbb      	ldrb	r3, [r7, #22]
}
 800f998:	4618      	mov	r0, r3
 800f99a:	3718      	adds	r7, #24
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}

0800f9a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b086      	sub	sp, #24
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	60f8      	str	r0, [r7, #12]
 800f9a8:	607a      	str	r2, [r7, #4]
 800f9aa:	603b      	str	r3, [r7, #0]
 800f9ac:	460b      	mov	r3, r1
 800f9ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f9be:	7af9      	ldrb	r1, [r7, #11]
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	687a      	ldr	r2, [r7, #4]
 800f9c4:	f7f6 fb19 	bl	8005ffa <HAL_PCD_EP_Receive>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f9cc:	7dfb      	ldrb	r3, [r7, #23]
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f000 f832 	bl	800fa38 <USBD_Get_USB_Status>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f9d8:	7dbb      	ldrb	r3, [r7, #22]
}
 800f9da:	4618      	mov	r0, r3
 800f9dc:	3718      	adds	r7, #24
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	bd80      	pop	{r7, pc}

0800f9e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f9e2:	b580      	push	{r7, lr}
 800f9e4:	b082      	sub	sp, #8
 800f9e6:	af00      	add	r7, sp, #0
 800f9e8:	6078      	str	r0, [r7, #4]
 800f9ea:	460b      	mov	r3, r1
 800f9ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f9f4:	78fa      	ldrb	r2, [r7, #3]
 800f9f6:	4611      	mov	r1, r2
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f7f6 fb49 	bl	8006090 <HAL_PCD_EP_GetRxCount>
 800f9fe:	4603      	mov	r3, r0
}
 800fa00:	4618      	mov	r0, r3
 800fa02:	3708      	adds	r7, #8
 800fa04:	46bd      	mov	sp, r7
 800fa06:	bd80      	pop	{r7, pc}

0800fa08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fa08:	b480      	push	{r7}
 800fa0a:	b083      	sub	sp, #12
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fa10:	4b03      	ldr	r3, [pc, #12]	; (800fa20 <USBD_static_malloc+0x18>)
}
 800fa12:	4618      	mov	r0, r3
 800fa14:	370c      	adds	r7, #12
 800fa16:	46bd      	mov	sp, r7
 800fa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1c:	4770      	bx	lr
 800fa1e:	bf00      	nop
 800fa20:	20007c34 	.word	0x20007c34

0800fa24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fa24:	b480      	push	{r7}
 800fa26:	b083      	sub	sp, #12
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]

}
 800fa2c:	bf00      	nop
 800fa2e:	370c      	adds	r7, #12
 800fa30:	46bd      	mov	sp, r7
 800fa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa36:	4770      	bx	lr

0800fa38 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fa38:	b480      	push	{r7}
 800fa3a:	b085      	sub	sp, #20
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	4603      	mov	r3, r0
 800fa40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa42:	2300      	movs	r3, #0
 800fa44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fa46:	79fb      	ldrb	r3, [r7, #7]
 800fa48:	2b03      	cmp	r3, #3
 800fa4a:	d817      	bhi.n	800fa7c <USBD_Get_USB_Status+0x44>
 800fa4c:	a201      	add	r2, pc, #4	; (adr r2, 800fa54 <USBD_Get_USB_Status+0x1c>)
 800fa4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa52:	bf00      	nop
 800fa54:	0800fa65 	.word	0x0800fa65
 800fa58:	0800fa6b 	.word	0x0800fa6b
 800fa5c:	0800fa71 	.word	0x0800fa71
 800fa60:	0800fa77 	.word	0x0800fa77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fa64:	2300      	movs	r3, #0
 800fa66:	73fb      	strb	r3, [r7, #15]
    break;
 800fa68:	e00b      	b.n	800fa82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fa6a:	2303      	movs	r3, #3
 800fa6c:	73fb      	strb	r3, [r7, #15]
    break;
 800fa6e:	e008      	b.n	800fa82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fa70:	2301      	movs	r3, #1
 800fa72:	73fb      	strb	r3, [r7, #15]
    break;
 800fa74:	e005      	b.n	800fa82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fa76:	2303      	movs	r3, #3
 800fa78:	73fb      	strb	r3, [r7, #15]
    break;
 800fa7a:	e002      	b.n	800fa82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fa7c:	2303      	movs	r3, #3
 800fa7e:	73fb      	strb	r3, [r7, #15]
    break;
 800fa80:	bf00      	nop
  }
  return usb_status;
 800fa82:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa84:	4618      	mov	r0, r3
 800fa86:	3714      	adds	r7, #20
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8e:	4770      	bx	lr

0800fa90 <__errno>:
 800fa90:	4b01      	ldr	r3, [pc, #4]	; (800fa98 <__errno+0x8>)
 800fa92:	6818      	ldr	r0, [r3, #0]
 800fa94:	4770      	bx	lr
 800fa96:	bf00      	nop
 800fa98:	20000628 	.word	0x20000628

0800fa9c <__libc_init_array>:
 800fa9c:	b570      	push	{r4, r5, r6, lr}
 800fa9e:	4d0d      	ldr	r5, [pc, #52]	; (800fad4 <__libc_init_array+0x38>)
 800faa0:	4c0d      	ldr	r4, [pc, #52]	; (800fad8 <__libc_init_array+0x3c>)
 800faa2:	1b64      	subs	r4, r4, r5
 800faa4:	10a4      	asrs	r4, r4, #2
 800faa6:	2600      	movs	r6, #0
 800faa8:	42a6      	cmp	r6, r4
 800faaa:	d109      	bne.n	800fac0 <__libc_init_array+0x24>
 800faac:	4d0b      	ldr	r5, [pc, #44]	; (800fadc <__libc_init_array+0x40>)
 800faae:	4c0c      	ldr	r4, [pc, #48]	; (800fae0 <__libc_init_array+0x44>)
 800fab0:	f000 fcba 	bl	8010428 <_init>
 800fab4:	1b64      	subs	r4, r4, r5
 800fab6:	10a4      	asrs	r4, r4, #2
 800fab8:	2600      	movs	r6, #0
 800faba:	42a6      	cmp	r6, r4
 800fabc:	d105      	bne.n	800faca <__libc_init_array+0x2e>
 800fabe:	bd70      	pop	{r4, r5, r6, pc}
 800fac0:	f855 3b04 	ldr.w	r3, [r5], #4
 800fac4:	4798      	blx	r3
 800fac6:	3601      	adds	r6, #1
 800fac8:	e7ee      	b.n	800faa8 <__libc_init_array+0xc>
 800faca:	f855 3b04 	ldr.w	r3, [r5], #4
 800face:	4798      	blx	r3
 800fad0:	3601      	adds	r6, #1
 800fad2:	e7f2      	b.n	800faba <__libc_init_array+0x1e>
 800fad4:	08010cb8 	.word	0x08010cb8
 800fad8:	08010cb8 	.word	0x08010cb8
 800fadc:	08010cb8 	.word	0x08010cb8
 800fae0:	08010cbc 	.word	0x08010cbc

0800fae4 <malloc>:
 800fae4:	4b02      	ldr	r3, [pc, #8]	; (800faf0 <malloc+0xc>)
 800fae6:	4601      	mov	r1, r0
 800fae8:	6818      	ldr	r0, [r3, #0]
 800faea:	f000 b88d 	b.w	800fc08 <_malloc_r>
 800faee:	bf00      	nop
 800faf0:	20000628 	.word	0x20000628

0800faf4 <free>:
 800faf4:	4b02      	ldr	r3, [pc, #8]	; (800fb00 <free+0xc>)
 800faf6:	4601      	mov	r1, r0
 800faf8:	6818      	ldr	r0, [r3, #0]
 800fafa:	f000 b819 	b.w	800fb30 <_free_r>
 800fafe:	bf00      	nop
 800fb00:	20000628 	.word	0x20000628

0800fb04 <memcpy>:
 800fb04:	440a      	add	r2, r1
 800fb06:	4291      	cmp	r1, r2
 800fb08:	f100 33ff 	add.w	r3, r0, #4294967295
 800fb0c:	d100      	bne.n	800fb10 <memcpy+0xc>
 800fb0e:	4770      	bx	lr
 800fb10:	b510      	push	{r4, lr}
 800fb12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb1a:	4291      	cmp	r1, r2
 800fb1c:	d1f9      	bne.n	800fb12 <memcpy+0xe>
 800fb1e:	bd10      	pop	{r4, pc}

0800fb20 <memset>:
 800fb20:	4402      	add	r2, r0
 800fb22:	4603      	mov	r3, r0
 800fb24:	4293      	cmp	r3, r2
 800fb26:	d100      	bne.n	800fb2a <memset+0xa>
 800fb28:	4770      	bx	lr
 800fb2a:	f803 1b01 	strb.w	r1, [r3], #1
 800fb2e:	e7f9      	b.n	800fb24 <memset+0x4>

0800fb30 <_free_r>:
 800fb30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb32:	2900      	cmp	r1, #0
 800fb34:	d044      	beq.n	800fbc0 <_free_r+0x90>
 800fb36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb3a:	9001      	str	r0, [sp, #4]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	f1a1 0404 	sub.w	r4, r1, #4
 800fb42:	bfb8      	it	lt
 800fb44:	18e4      	addlt	r4, r4, r3
 800fb46:	f000 f91f 	bl	800fd88 <__malloc_lock>
 800fb4a:	4a1e      	ldr	r2, [pc, #120]	; (800fbc4 <_free_r+0x94>)
 800fb4c:	9801      	ldr	r0, [sp, #4]
 800fb4e:	6813      	ldr	r3, [r2, #0]
 800fb50:	b933      	cbnz	r3, 800fb60 <_free_r+0x30>
 800fb52:	6063      	str	r3, [r4, #4]
 800fb54:	6014      	str	r4, [r2, #0]
 800fb56:	b003      	add	sp, #12
 800fb58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fb5c:	f000 b91a 	b.w	800fd94 <__malloc_unlock>
 800fb60:	42a3      	cmp	r3, r4
 800fb62:	d908      	bls.n	800fb76 <_free_r+0x46>
 800fb64:	6825      	ldr	r5, [r4, #0]
 800fb66:	1961      	adds	r1, r4, r5
 800fb68:	428b      	cmp	r3, r1
 800fb6a:	bf01      	itttt	eq
 800fb6c:	6819      	ldreq	r1, [r3, #0]
 800fb6e:	685b      	ldreq	r3, [r3, #4]
 800fb70:	1949      	addeq	r1, r1, r5
 800fb72:	6021      	streq	r1, [r4, #0]
 800fb74:	e7ed      	b.n	800fb52 <_free_r+0x22>
 800fb76:	461a      	mov	r2, r3
 800fb78:	685b      	ldr	r3, [r3, #4]
 800fb7a:	b10b      	cbz	r3, 800fb80 <_free_r+0x50>
 800fb7c:	42a3      	cmp	r3, r4
 800fb7e:	d9fa      	bls.n	800fb76 <_free_r+0x46>
 800fb80:	6811      	ldr	r1, [r2, #0]
 800fb82:	1855      	adds	r5, r2, r1
 800fb84:	42a5      	cmp	r5, r4
 800fb86:	d10b      	bne.n	800fba0 <_free_r+0x70>
 800fb88:	6824      	ldr	r4, [r4, #0]
 800fb8a:	4421      	add	r1, r4
 800fb8c:	1854      	adds	r4, r2, r1
 800fb8e:	42a3      	cmp	r3, r4
 800fb90:	6011      	str	r1, [r2, #0]
 800fb92:	d1e0      	bne.n	800fb56 <_free_r+0x26>
 800fb94:	681c      	ldr	r4, [r3, #0]
 800fb96:	685b      	ldr	r3, [r3, #4]
 800fb98:	6053      	str	r3, [r2, #4]
 800fb9a:	4421      	add	r1, r4
 800fb9c:	6011      	str	r1, [r2, #0]
 800fb9e:	e7da      	b.n	800fb56 <_free_r+0x26>
 800fba0:	d902      	bls.n	800fba8 <_free_r+0x78>
 800fba2:	230c      	movs	r3, #12
 800fba4:	6003      	str	r3, [r0, #0]
 800fba6:	e7d6      	b.n	800fb56 <_free_r+0x26>
 800fba8:	6825      	ldr	r5, [r4, #0]
 800fbaa:	1961      	adds	r1, r4, r5
 800fbac:	428b      	cmp	r3, r1
 800fbae:	bf04      	itt	eq
 800fbb0:	6819      	ldreq	r1, [r3, #0]
 800fbb2:	685b      	ldreq	r3, [r3, #4]
 800fbb4:	6063      	str	r3, [r4, #4]
 800fbb6:	bf04      	itt	eq
 800fbb8:	1949      	addeq	r1, r1, r5
 800fbba:	6021      	streq	r1, [r4, #0]
 800fbbc:	6054      	str	r4, [r2, #4]
 800fbbe:	e7ca      	b.n	800fb56 <_free_r+0x26>
 800fbc0:	b003      	add	sp, #12
 800fbc2:	bd30      	pop	{r4, r5, pc}
 800fbc4:	20007e54 	.word	0x20007e54

0800fbc8 <sbrk_aligned>:
 800fbc8:	b570      	push	{r4, r5, r6, lr}
 800fbca:	4e0e      	ldr	r6, [pc, #56]	; (800fc04 <sbrk_aligned+0x3c>)
 800fbcc:	460c      	mov	r4, r1
 800fbce:	6831      	ldr	r1, [r6, #0]
 800fbd0:	4605      	mov	r5, r0
 800fbd2:	b911      	cbnz	r1, 800fbda <sbrk_aligned+0x12>
 800fbd4:	f000 f88c 	bl	800fcf0 <_sbrk_r>
 800fbd8:	6030      	str	r0, [r6, #0]
 800fbda:	4621      	mov	r1, r4
 800fbdc:	4628      	mov	r0, r5
 800fbde:	f000 f887 	bl	800fcf0 <_sbrk_r>
 800fbe2:	1c43      	adds	r3, r0, #1
 800fbe4:	d00a      	beq.n	800fbfc <sbrk_aligned+0x34>
 800fbe6:	1cc4      	adds	r4, r0, #3
 800fbe8:	f024 0403 	bic.w	r4, r4, #3
 800fbec:	42a0      	cmp	r0, r4
 800fbee:	d007      	beq.n	800fc00 <sbrk_aligned+0x38>
 800fbf0:	1a21      	subs	r1, r4, r0
 800fbf2:	4628      	mov	r0, r5
 800fbf4:	f000 f87c 	bl	800fcf0 <_sbrk_r>
 800fbf8:	3001      	adds	r0, #1
 800fbfa:	d101      	bne.n	800fc00 <sbrk_aligned+0x38>
 800fbfc:	f04f 34ff 	mov.w	r4, #4294967295
 800fc00:	4620      	mov	r0, r4
 800fc02:	bd70      	pop	{r4, r5, r6, pc}
 800fc04:	20007e58 	.word	0x20007e58

0800fc08 <_malloc_r>:
 800fc08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc0c:	1ccd      	adds	r5, r1, #3
 800fc0e:	f025 0503 	bic.w	r5, r5, #3
 800fc12:	3508      	adds	r5, #8
 800fc14:	2d0c      	cmp	r5, #12
 800fc16:	bf38      	it	cc
 800fc18:	250c      	movcc	r5, #12
 800fc1a:	2d00      	cmp	r5, #0
 800fc1c:	4607      	mov	r7, r0
 800fc1e:	db01      	blt.n	800fc24 <_malloc_r+0x1c>
 800fc20:	42a9      	cmp	r1, r5
 800fc22:	d905      	bls.n	800fc30 <_malloc_r+0x28>
 800fc24:	230c      	movs	r3, #12
 800fc26:	603b      	str	r3, [r7, #0]
 800fc28:	2600      	movs	r6, #0
 800fc2a:	4630      	mov	r0, r6
 800fc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc30:	4e2e      	ldr	r6, [pc, #184]	; (800fcec <_malloc_r+0xe4>)
 800fc32:	f000 f8a9 	bl	800fd88 <__malloc_lock>
 800fc36:	6833      	ldr	r3, [r6, #0]
 800fc38:	461c      	mov	r4, r3
 800fc3a:	bb34      	cbnz	r4, 800fc8a <_malloc_r+0x82>
 800fc3c:	4629      	mov	r1, r5
 800fc3e:	4638      	mov	r0, r7
 800fc40:	f7ff ffc2 	bl	800fbc8 <sbrk_aligned>
 800fc44:	1c43      	adds	r3, r0, #1
 800fc46:	4604      	mov	r4, r0
 800fc48:	d14d      	bne.n	800fce6 <_malloc_r+0xde>
 800fc4a:	6834      	ldr	r4, [r6, #0]
 800fc4c:	4626      	mov	r6, r4
 800fc4e:	2e00      	cmp	r6, #0
 800fc50:	d140      	bne.n	800fcd4 <_malloc_r+0xcc>
 800fc52:	6823      	ldr	r3, [r4, #0]
 800fc54:	4631      	mov	r1, r6
 800fc56:	4638      	mov	r0, r7
 800fc58:	eb04 0803 	add.w	r8, r4, r3
 800fc5c:	f000 f848 	bl	800fcf0 <_sbrk_r>
 800fc60:	4580      	cmp	r8, r0
 800fc62:	d13a      	bne.n	800fcda <_malloc_r+0xd2>
 800fc64:	6821      	ldr	r1, [r4, #0]
 800fc66:	3503      	adds	r5, #3
 800fc68:	1a6d      	subs	r5, r5, r1
 800fc6a:	f025 0503 	bic.w	r5, r5, #3
 800fc6e:	3508      	adds	r5, #8
 800fc70:	2d0c      	cmp	r5, #12
 800fc72:	bf38      	it	cc
 800fc74:	250c      	movcc	r5, #12
 800fc76:	4629      	mov	r1, r5
 800fc78:	4638      	mov	r0, r7
 800fc7a:	f7ff ffa5 	bl	800fbc8 <sbrk_aligned>
 800fc7e:	3001      	adds	r0, #1
 800fc80:	d02b      	beq.n	800fcda <_malloc_r+0xd2>
 800fc82:	6823      	ldr	r3, [r4, #0]
 800fc84:	442b      	add	r3, r5
 800fc86:	6023      	str	r3, [r4, #0]
 800fc88:	e00e      	b.n	800fca8 <_malloc_r+0xa0>
 800fc8a:	6822      	ldr	r2, [r4, #0]
 800fc8c:	1b52      	subs	r2, r2, r5
 800fc8e:	d41e      	bmi.n	800fcce <_malloc_r+0xc6>
 800fc90:	2a0b      	cmp	r2, #11
 800fc92:	d916      	bls.n	800fcc2 <_malloc_r+0xba>
 800fc94:	1961      	adds	r1, r4, r5
 800fc96:	42a3      	cmp	r3, r4
 800fc98:	6025      	str	r5, [r4, #0]
 800fc9a:	bf18      	it	ne
 800fc9c:	6059      	strne	r1, [r3, #4]
 800fc9e:	6863      	ldr	r3, [r4, #4]
 800fca0:	bf08      	it	eq
 800fca2:	6031      	streq	r1, [r6, #0]
 800fca4:	5162      	str	r2, [r4, r5]
 800fca6:	604b      	str	r3, [r1, #4]
 800fca8:	4638      	mov	r0, r7
 800fcaa:	f104 060b 	add.w	r6, r4, #11
 800fcae:	f000 f871 	bl	800fd94 <__malloc_unlock>
 800fcb2:	f026 0607 	bic.w	r6, r6, #7
 800fcb6:	1d23      	adds	r3, r4, #4
 800fcb8:	1af2      	subs	r2, r6, r3
 800fcba:	d0b6      	beq.n	800fc2a <_malloc_r+0x22>
 800fcbc:	1b9b      	subs	r3, r3, r6
 800fcbe:	50a3      	str	r3, [r4, r2]
 800fcc0:	e7b3      	b.n	800fc2a <_malloc_r+0x22>
 800fcc2:	6862      	ldr	r2, [r4, #4]
 800fcc4:	42a3      	cmp	r3, r4
 800fcc6:	bf0c      	ite	eq
 800fcc8:	6032      	streq	r2, [r6, #0]
 800fcca:	605a      	strne	r2, [r3, #4]
 800fccc:	e7ec      	b.n	800fca8 <_malloc_r+0xa0>
 800fcce:	4623      	mov	r3, r4
 800fcd0:	6864      	ldr	r4, [r4, #4]
 800fcd2:	e7b2      	b.n	800fc3a <_malloc_r+0x32>
 800fcd4:	4634      	mov	r4, r6
 800fcd6:	6876      	ldr	r6, [r6, #4]
 800fcd8:	e7b9      	b.n	800fc4e <_malloc_r+0x46>
 800fcda:	230c      	movs	r3, #12
 800fcdc:	603b      	str	r3, [r7, #0]
 800fcde:	4638      	mov	r0, r7
 800fce0:	f000 f858 	bl	800fd94 <__malloc_unlock>
 800fce4:	e7a1      	b.n	800fc2a <_malloc_r+0x22>
 800fce6:	6025      	str	r5, [r4, #0]
 800fce8:	e7de      	b.n	800fca8 <_malloc_r+0xa0>
 800fcea:	bf00      	nop
 800fcec:	20007e54 	.word	0x20007e54

0800fcf0 <_sbrk_r>:
 800fcf0:	b538      	push	{r3, r4, r5, lr}
 800fcf2:	4d06      	ldr	r5, [pc, #24]	; (800fd0c <_sbrk_r+0x1c>)
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	4604      	mov	r4, r0
 800fcf8:	4608      	mov	r0, r1
 800fcfa:	602b      	str	r3, [r5, #0]
 800fcfc:	f7f3 ff70 	bl	8003be0 <_sbrk>
 800fd00:	1c43      	adds	r3, r0, #1
 800fd02:	d102      	bne.n	800fd0a <_sbrk_r+0x1a>
 800fd04:	682b      	ldr	r3, [r5, #0]
 800fd06:	b103      	cbz	r3, 800fd0a <_sbrk_r+0x1a>
 800fd08:	6023      	str	r3, [r4, #0]
 800fd0a:	bd38      	pop	{r3, r4, r5, pc}
 800fd0c:	20007e5c 	.word	0x20007e5c

0800fd10 <siprintf>:
 800fd10:	b40e      	push	{r1, r2, r3}
 800fd12:	b500      	push	{lr}
 800fd14:	b09c      	sub	sp, #112	; 0x70
 800fd16:	ab1d      	add	r3, sp, #116	; 0x74
 800fd18:	9002      	str	r0, [sp, #8]
 800fd1a:	9006      	str	r0, [sp, #24]
 800fd1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fd20:	4809      	ldr	r0, [pc, #36]	; (800fd48 <siprintf+0x38>)
 800fd22:	9107      	str	r1, [sp, #28]
 800fd24:	9104      	str	r1, [sp, #16]
 800fd26:	4909      	ldr	r1, [pc, #36]	; (800fd4c <siprintf+0x3c>)
 800fd28:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd2c:	9105      	str	r1, [sp, #20]
 800fd2e:	6800      	ldr	r0, [r0, #0]
 800fd30:	9301      	str	r3, [sp, #4]
 800fd32:	a902      	add	r1, sp, #8
 800fd34:	f000 f890 	bl	800fe58 <_svfiprintf_r>
 800fd38:	9b02      	ldr	r3, [sp, #8]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	701a      	strb	r2, [r3, #0]
 800fd3e:	b01c      	add	sp, #112	; 0x70
 800fd40:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd44:	b003      	add	sp, #12
 800fd46:	4770      	bx	lr
 800fd48:	20000628 	.word	0x20000628
 800fd4c:	ffff0208 	.word	0xffff0208

0800fd50 <strcpy>:
 800fd50:	4603      	mov	r3, r0
 800fd52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd56:	f803 2b01 	strb.w	r2, [r3], #1
 800fd5a:	2a00      	cmp	r2, #0
 800fd5c:	d1f9      	bne.n	800fd52 <strcpy+0x2>
 800fd5e:	4770      	bx	lr

0800fd60 <strncpy>:
 800fd60:	b510      	push	{r4, lr}
 800fd62:	3901      	subs	r1, #1
 800fd64:	4603      	mov	r3, r0
 800fd66:	b132      	cbz	r2, 800fd76 <strncpy+0x16>
 800fd68:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fd6c:	f803 4b01 	strb.w	r4, [r3], #1
 800fd70:	3a01      	subs	r2, #1
 800fd72:	2c00      	cmp	r4, #0
 800fd74:	d1f7      	bne.n	800fd66 <strncpy+0x6>
 800fd76:	441a      	add	r2, r3
 800fd78:	2100      	movs	r1, #0
 800fd7a:	4293      	cmp	r3, r2
 800fd7c:	d100      	bne.n	800fd80 <strncpy+0x20>
 800fd7e:	bd10      	pop	{r4, pc}
 800fd80:	f803 1b01 	strb.w	r1, [r3], #1
 800fd84:	e7f9      	b.n	800fd7a <strncpy+0x1a>
	...

0800fd88 <__malloc_lock>:
 800fd88:	4801      	ldr	r0, [pc, #4]	; (800fd90 <__malloc_lock+0x8>)
 800fd8a:	f000 baf9 	b.w	8010380 <__retarget_lock_acquire_recursive>
 800fd8e:	bf00      	nop
 800fd90:	20007e60 	.word	0x20007e60

0800fd94 <__malloc_unlock>:
 800fd94:	4801      	ldr	r0, [pc, #4]	; (800fd9c <__malloc_unlock+0x8>)
 800fd96:	f000 baf4 	b.w	8010382 <__retarget_lock_release_recursive>
 800fd9a:	bf00      	nop
 800fd9c:	20007e60 	.word	0x20007e60

0800fda0 <__ssputs_r>:
 800fda0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fda4:	688e      	ldr	r6, [r1, #8]
 800fda6:	429e      	cmp	r6, r3
 800fda8:	4682      	mov	sl, r0
 800fdaa:	460c      	mov	r4, r1
 800fdac:	4690      	mov	r8, r2
 800fdae:	461f      	mov	r7, r3
 800fdb0:	d838      	bhi.n	800fe24 <__ssputs_r+0x84>
 800fdb2:	898a      	ldrh	r2, [r1, #12]
 800fdb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fdb8:	d032      	beq.n	800fe20 <__ssputs_r+0x80>
 800fdba:	6825      	ldr	r5, [r4, #0]
 800fdbc:	6909      	ldr	r1, [r1, #16]
 800fdbe:	eba5 0901 	sub.w	r9, r5, r1
 800fdc2:	6965      	ldr	r5, [r4, #20]
 800fdc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fdc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fdcc:	3301      	adds	r3, #1
 800fdce:	444b      	add	r3, r9
 800fdd0:	106d      	asrs	r5, r5, #1
 800fdd2:	429d      	cmp	r5, r3
 800fdd4:	bf38      	it	cc
 800fdd6:	461d      	movcc	r5, r3
 800fdd8:	0553      	lsls	r3, r2, #21
 800fdda:	d531      	bpl.n	800fe40 <__ssputs_r+0xa0>
 800fddc:	4629      	mov	r1, r5
 800fdde:	f7ff ff13 	bl	800fc08 <_malloc_r>
 800fde2:	4606      	mov	r6, r0
 800fde4:	b950      	cbnz	r0, 800fdfc <__ssputs_r+0x5c>
 800fde6:	230c      	movs	r3, #12
 800fde8:	f8ca 3000 	str.w	r3, [sl]
 800fdec:	89a3      	ldrh	r3, [r4, #12]
 800fdee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fdf2:	81a3      	strh	r3, [r4, #12]
 800fdf4:	f04f 30ff 	mov.w	r0, #4294967295
 800fdf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdfc:	6921      	ldr	r1, [r4, #16]
 800fdfe:	464a      	mov	r2, r9
 800fe00:	f7ff fe80 	bl	800fb04 <memcpy>
 800fe04:	89a3      	ldrh	r3, [r4, #12]
 800fe06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fe0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe0e:	81a3      	strh	r3, [r4, #12]
 800fe10:	6126      	str	r6, [r4, #16]
 800fe12:	6165      	str	r5, [r4, #20]
 800fe14:	444e      	add	r6, r9
 800fe16:	eba5 0509 	sub.w	r5, r5, r9
 800fe1a:	6026      	str	r6, [r4, #0]
 800fe1c:	60a5      	str	r5, [r4, #8]
 800fe1e:	463e      	mov	r6, r7
 800fe20:	42be      	cmp	r6, r7
 800fe22:	d900      	bls.n	800fe26 <__ssputs_r+0x86>
 800fe24:	463e      	mov	r6, r7
 800fe26:	6820      	ldr	r0, [r4, #0]
 800fe28:	4632      	mov	r2, r6
 800fe2a:	4641      	mov	r1, r8
 800fe2c:	f000 faaa 	bl	8010384 <memmove>
 800fe30:	68a3      	ldr	r3, [r4, #8]
 800fe32:	1b9b      	subs	r3, r3, r6
 800fe34:	60a3      	str	r3, [r4, #8]
 800fe36:	6823      	ldr	r3, [r4, #0]
 800fe38:	4433      	add	r3, r6
 800fe3a:	6023      	str	r3, [r4, #0]
 800fe3c:	2000      	movs	r0, #0
 800fe3e:	e7db      	b.n	800fdf8 <__ssputs_r+0x58>
 800fe40:	462a      	mov	r2, r5
 800fe42:	f000 fab9 	bl	80103b8 <_realloc_r>
 800fe46:	4606      	mov	r6, r0
 800fe48:	2800      	cmp	r0, #0
 800fe4a:	d1e1      	bne.n	800fe10 <__ssputs_r+0x70>
 800fe4c:	6921      	ldr	r1, [r4, #16]
 800fe4e:	4650      	mov	r0, sl
 800fe50:	f7ff fe6e 	bl	800fb30 <_free_r>
 800fe54:	e7c7      	b.n	800fde6 <__ssputs_r+0x46>
	...

0800fe58 <_svfiprintf_r>:
 800fe58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe5c:	4698      	mov	r8, r3
 800fe5e:	898b      	ldrh	r3, [r1, #12]
 800fe60:	061b      	lsls	r3, r3, #24
 800fe62:	b09d      	sub	sp, #116	; 0x74
 800fe64:	4607      	mov	r7, r0
 800fe66:	460d      	mov	r5, r1
 800fe68:	4614      	mov	r4, r2
 800fe6a:	d50e      	bpl.n	800fe8a <_svfiprintf_r+0x32>
 800fe6c:	690b      	ldr	r3, [r1, #16]
 800fe6e:	b963      	cbnz	r3, 800fe8a <_svfiprintf_r+0x32>
 800fe70:	2140      	movs	r1, #64	; 0x40
 800fe72:	f7ff fec9 	bl	800fc08 <_malloc_r>
 800fe76:	6028      	str	r0, [r5, #0]
 800fe78:	6128      	str	r0, [r5, #16]
 800fe7a:	b920      	cbnz	r0, 800fe86 <_svfiprintf_r+0x2e>
 800fe7c:	230c      	movs	r3, #12
 800fe7e:	603b      	str	r3, [r7, #0]
 800fe80:	f04f 30ff 	mov.w	r0, #4294967295
 800fe84:	e0d1      	b.n	801002a <_svfiprintf_r+0x1d2>
 800fe86:	2340      	movs	r3, #64	; 0x40
 800fe88:	616b      	str	r3, [r5, #20]
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	9309      	str	r3, [sp, #36]	; 0x24
 800fe8e:	2320      	movs	r3, #32
 800fe90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fe94:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe98:	2330      	movs	r3, #48	; 0x30
 800fe9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010044 <_svfiprintf_r+0x1ec>
 800fe9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fea2:	f04f 0901 	mov.w	r9, #1
 800fea6:	4623      	mov	r3, r4
 800fea8:	469a      	mov	sl, r3
 800feaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800feae:	b10a      	cbz	r2, 800feb4 <_svfiprintf_r+0x5c>
 800feb0:	2a25      	cmp	r2, #37	; 0x25
 800feb2:	d1f9      	bne.n	800fea8 <_svfiprintf_r+0x50>
 800feb4:	ebba 0b04 	subs.w	fp, sl, r4
 800feb8:	d00b      	beq.n	800fed2 <_svfiprintf_r+0x7a>
 800feba:	465b      	mov	r3, fp
 800febc:	4622      	mov	r2, r4
 800febe:	4629      	mov	r1, r5
 800fec0:	4638      	mov	r0, r7
 800fec2:	f7ff ff6d 	bl	800fda0 <__ssputs_r>
 800fec6:	3001      	adds	r0, #1
 800fec8:	f000 80aa 	beq.w	8010020 <_svfiprintf_r+0x1c8>
 800fecc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fece:	445a      	add	r2, fp
 800fed0:	9209      	str	r2, [sp, #36]	; 0x24
 800fed2:	f89a 3000 	ldrb.w	r3, [sl]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	f000 80a2 	beq.w	8010020 <_svfiprintf_r+0x1c8>
 800fedc:	2300      	movs	r3, #0
 800fede:	f04f 32ff 	mov.w	r2, #4294967295
 800fee2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fee6:	f10a 0a01 	add.w	sl, sl, #1
 800feea:	9304      	str	r3, [sp, #16]
 800feec:	9307      	str	r3, [sp, #28]
 800feee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fef2:	931a      	str	r3, [sp, #104]	; 0x68
 800fef4:	4654      	mov	r4, sl
 800fef6:	2205      	movs	r2, #5
 800fef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fefc:	4851      	ldr	r0, [pc, #324]	; (8010044 <_svfiprintf_r+0x1ec>)
 800fefe:	f7f0 f977 	bl	80001f0 <memchr>
 800ff02:	9a04      	ldr	r2, [sp, #16]
 800ff04:	b9d8      	cbnz	r0, 800ff3e <_svfiprintf_r+0xe6>
 800ff06:	06d0      	lsls	r0, r2, #27
 800ff08:	bf44      	itt	mi
 800ff0a:	2320      	movmi	r3, #32
 800ff0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff10:	0711      	lsls	r1, r2, #28
 800ff12:	bf44      	itt	mi
 800ff14:	232b      	movmi	r3, #43	; 0x2b
 800ff16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff1a:	f89a 3000 	ldrb.w	r3, [sl]
 800ff1e:	2b2a      	cmp	r3, #42	; 0x2a
 800ff20:	d015      	beq.n	800ff4e <_svfiprintf_r+0xf6>
 800ff22:	9a07      	ldr	r2, [sp, #28]
 800ff24:	4654      	mov	r4, sl
 800ff26:	2000      	movs	r0, #0
 800ff28:	f04f 0c0a 	mov.w	ip, #10
 800ff2c:	4621      	mov	r1, r4
 800ff2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff32:	3b30      	subs	r3, #48	; 0x30
 800ff34:	2b09      	cmp	r3, #9
 800ff36:	d94e      	bls.n	800ffd6 <_svfiprintf_r+0x17e>
 800ff38:	b1b0      	cbz	r0, 800ff68 <_svfiprintf_r+0x110>
 800ff3a:	9207      	str	r2, [sp, #28]
 800ff3c:	e014      	b.n	800ff68 <_svfiprintf_r+0x110>
 800ff3e:	eba0 0308 	sub.w	r3, r0, r8
 800ff42:	fa09 f303 	lsl.w	r3, r9, r3
 800ff46:	4313      	orrs	r3, r2
 800ff48:	9304      	str	r3, [sp, #16]
 800ff4a:	46a2      	mov	sl, r4
 800ff4c:	e7d2      	b.n	800fef4 <_svfiprintf_r+0x9c>
 800ff4e:	9b03      	ldr	r3, [sp, #12]
 800ff50:	1d19      	adds	r1, r3, #4
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	9103      	str	r1, [sp, #12]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	bfbb      	ittet	lt
 800ff5a:	425b      	neglt	r3, r3
 800ff5c:	f042 0202 	orrlt.w	r2, r2, #2
 800ff60:	9307      	strge	r3, [sp, #28]
 800ff62:	9307      	strlt	r3, [sp, #28]
 800ff64:	bfb8      	it	lt
 800ff66:	9204      	strlt	r2, [sp, #16]
 800ff68:	7823      	ldrb	r3, [r4, #0]
 800ff6a:	2b2e      	cmp	r3, #46	; 0x2e
 800ff6c:	d10c      	bne.n	800ff88 <_svfiprintf_r+0x130>
 800ff6e:	7863      	ldrb	r3, [r4, #1]
 800ff70:	2b2a      	cmp	r3, #42	; 0x2a
 800ff72:	d135      	bne.n	800ffe0 <_svfiprintf_r+0x188>
 800ff74:	9b03      	ldr	r3, [sp, #12]
 800ff76:	1d1a      	adds	r2, r3, #4
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	9203      	str	r2, [sp, #12]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	bfb8      	it	lt
 800ff80:	f04f 33ff 	movlt.w	r3, #4294967295
 800ff84:	3402      	adds	r4, #2
 800ff86:	9305      	str	r3, [sp, #20]
 800ff88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010054 <_svfiprintf_r+0x1fc>
 800ff8c:	7821      	ldrb	r1, [r4, #0]
 800ff8e:	2203      	movs	r2, #3
 800ff90:	4650      	mov	r0, sl
 800ff92:	f7f0 f92d 	bl	80001f0 <memchr>
 800ff96:	b140      	cbz	r0, 800ffaa <_svfiprintf_r+0x152>
 800ff98:	2340      	movs	r3, #64	; 0x40
 800ff9a:	eba0 000a 	sub.w	r0, r0, sl
 800ff9e:	fa03 f000 	lsl.w	r0, r3, r0
 800ffa2:	9b04      	ldr	r3, [sp, #16]
 800ffa4:	4303      	orrs	r3, r0
 800ffa6:	3401      	adds	r4, #1
 800ffa8:	9304      	str	r3, [sp, #16]
 800ffaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffae:	4826      	ldr	r0, [pc, #152]	; (8010048 <_svfiprintf_r+0x1f0>)
 800ffb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ffb4:	2206      	movs	r2, #6
 800ffb6:	f7f0 f91b 	bl	80001f0 <memchr>
 800ffba:	2800      	cmp	r0, #0
 800ffbc:	d038      	beq.n	8010030 <_svfiprintf_r+0x1d8>
 800ffbe:	4b23      	ldr	r3, [pc, #140]	; (801004c <_svfiprintf_r+0x1f4>)
 800ffc0:	bb1b      	cbnz	r3, 801000a <_svfiprintf_r+0x1b2>
 800ffc2:	9b03      	ldr	r3, [sp, #12]
 800ffc4:	3307      	adds	r3, #7
 800ffc6:	f023 0307 	bic.w	r3, r3, #7
 800ffca:	3308      	adds	r3, #8
 800ffcc:	9303      	str	r3, [sp, #12]
 800ffce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffd0:	4433      	add	r3, r6
 800ffd2:	9309      	str	r3, [sp, #36]	; 0x24
 800ffd4:	e767      	b.n	800fea6 <_svfiprintf_r+0x4e>
 800ffd6:	fb0c 3202 	mla	r2, ip, r2, r3
 800ffda:	460c      	mov	r4, r1
 800ffdc:	2001      	movs	r0, #1
 800ffde:	e7a5      	b.n	800ff2c <_svfiprintf_r+0xd4>
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	3401      	adds	r4, #1
 800ffe4:	9305      	str	r3, [sp, #20]
 800ffe6:	4619      	mov	r1, r3
 800ffe8:	f04f 0c0a 	mov.w	ip, #10
 800ffec:	4620      	mov	r0, r4
 800ffee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fff2:	3a30      	subs	r2, #48	; 0x30
 800fff4:	2a09      	cmp	r2, #9
 800fff6:	d903      	bls.n	8010000 <_svfiprintf_r+0x1a8>
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d0c5      	beq.n	800ff88 <_svfiprintf_r+0x130>
 800fffc:	9105      	str	r1, [sp, #20]
 800fffe:	e7c3      	b.n	800ff88 <_svfiprintf_r+0x130>
 8010000:	fb0c 2101 	mla	r1, ip, r1, r2
 8010004:	4604      	mov	r4, r0
 8010006:	2301      	movs	r3, #1
 8010008:	e7f0      	b.n	800ffec <_svfiprintf_r+0x194>
 801000a:	ab03      	add	r3, sp, #12
 801000c:	9300      	str	r3, [sp, #0]
 801000e:	462a      	mov	r2, r5
 8010010:	4b0f      	ldr	r3, [pc, #60]	; (8010050 <_svfiprintf_r+0x1f8>)
 8010012:	a904      	add	r1, sp, #16
 8010014:	4638      	mov	r0, r7
 8010016:	f3af 8000 	nop.w
 801001a:	1c42      	adds	r2, r0, #1
 801001c:	4606      	mov	r6, r0
 801001e:	d1d6      	bne.n	800ffce <_svfiprintf_r+0x176>
 8010020:	89ab      	ldrh	r3, [r5, #12]
 8010022:	065b      	lsls	r3, r3, #25
 8010024:	f53f af2c 	bmi.w	800fe80 <_svfiprintf_r+0x28>
 8010028:	9809      	ldr	r0, [sp, #36]	; 0x24
 801002a:	b01d      	add	sp, #116	; 0x74
 801002c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010030:	ab03      	add	r3, sp, #12
 8010032:	9300      	str	r3, [sp, #0]
 8010034:	462a      	mov	r2, r5
 8010036:	4b06      	ldr	r3, [pc, #24]	; (8010050 <_svfiprintf_r+0x1f8>)
 8010038:	a904      	add	r1, sp, #16
 801003a:	4638      	mov	r0, r7
 801003c:	f000 f87a 	bl	8010134 <_printf_i>
 8010040:	e7eb      	b.n	801001a <_svfiprintf_r+0x1c2>
 8010042:	bf00      	nop
 8010044:	08010c7c 	.word	0x08010c7c
 8010048:	08010c86 	.word	0x08010c86
 801004c:	00000000 	.word	0x00000000
 8010050:	0800fda1 	.word	0x0800fda1
 8010054:	08010c82 	.word	0x08010c82

08010058 <_printf_common>:
 8010058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801005c:	4616      	mov	r6, r2
 801005e:	4699      	mov	r9, r3
 8010060:	688a      	ldr	r2, [r1, #8]
 8010062:	690b      	ldr	r3, [r1, #16]
 8010064:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010068:	4293      	cmp	r3, r2
 801006a:	bfb8      	it	lt
 801006c:	4613      	movlt	r3, r2
 801006e:	6033      	str	r3, [r6, #0]
 8010070:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010074:	4607      	mov	r7, r0
 8010076:	460c      	mov	r4, r1
 8010078:	b10a      	cbz	r2, 801007e <_printf_common+0x26>
 801007a:	3301      	adds	r3, #1
 801007c:	6033      	str	r3, [r6, #0]
 801007e:	6823      	ldr	r3, [r4, #0]
 8010080:	0699      	lsls	r1, r3, #26
 8010082:	bf42      	ittt	mi
 8010084:	6833      	ldrmi	r3, [r6, #0]
 8010086:	3302      	addmi	r3, #2
 8010088:	6033      	strmi	r3, [r6, #0]
 801008a:	6825      	ldr	r5, [r4, #0]
 801008c:	f015 0506 	ands.w	r5, r5, #6
 8010090:	d106      	bne.n	80100a0 <_printf_common+0x48>
 8010092:	f104 0a19 	add.w	sl, r4, #25
 8010096:	68e3      	ldr	r3, [r4, #12]
 8010098:	6832      	ldr	r2, [r6, #0]
 801009a:	1a9b      	subs	r3, r3, r2
 801009c:	42ab      	cmp	r3, r5
 801009e:	dc26      	bgt.n	80100ee <_printf_common+0x96>
 80100a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80100a4:	1e13      	subs	r3, r2, #0
 80100a6:	6822      	ldr	r2, [r4, #0]
 80100a8:	bf18      	it	ne
 80100aa:	2301      	movne	r3, #1
 80100ac:	0692      	lsls	r2, r2, #26
 80100ae:	d42b      	bmi.n	8010108 <_printf_common+0xb0>
 80100b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80100b4:	4649      	mov	r1, r9
 80100b6:	4638      	mov	r0, r7
 80100b8:	47c0      	blx	r8
 80100ba:	3001      	adds	r0, #1
 80100bc:	d01e      	beq.n	80100fc <_printf_common+0xa4>
 80100be:	6823      	ldr	r3, [r4, #0]
 80100c0:	68e5      	ldr	r5, [r4, #12]
 80100c2:	6832      	ldr	r2, [r6, #0]
 80100c4:	f003 0306 	and.w	r3, r3, #6
 80100c8:	2b04      	cmp	r3, #4
 80100ca:	bf08      	it	eq
 80100cc:	1aad      	subeq	r5, r5, r2
 80100ce:	68a3      	ldr	r3, [r4, #8]
 80100d0:	6922      	ldr	r2, [r4, #16]
 80100d2:	bf0c      	ite	eq
 80100d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80100d8:	2500      	movne	r5, #0
 80100da:	4293      	cmp	r3, r2
 80100dc:	bfc4      	itt	gt
 80100de:	1a9b      	subgt	r3, r3, r2
 80100e0:	18ed      	addgt	r5, r5, r3
 80100e2:	2600      	movs	r6, #0
 80100e4:	341a      	adds	r4, #26
 80100e6:	42b5      	cmp	r5, r6
 80100e8:	d11a      	bne.n	8010120 <_printf_common+0xc8>
 80100ea:	2000      	movs	r0, #0
 80100ec:	e008      	b.n	8010100 <_printf_common+0xa8>
 80100ee:	2301      	movs	r3, #1
 80100f0:	4652      	mov	r2, sl
 80100f2:	4649      	mov	r1, r9
 80100f4:	4638      	mov	r0, r7
 80100f6:	47c0      	blx	r8
 80100f8:	3001      	adds	r0, #1
 80100fa:	d103      	bne.n	8010104 <_printf_common+0xac>
 80100fc:	f04f 30ff 	mov.w	r0, #4294967295
 8010100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010104:	3501      	adds	r5, #1
 8010106:	e7c6      	b.n	8010096 <_printf_common+0x3e>
 8010108:	18e1      	adds	r1, r4, r3
 801010a:	1c5a      	adds	r2, r3, #1
 801010c:	2030      	movs	r0, #48	; 0x30
 801010e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010112:	4422      	add	r2, r4
 8010114:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010118:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801011c:	3302      	adds	r3, #2
 801011e:	e7c7      	b.n	80100b0 <_printf_common+0x58>
 8010120:	2301      	movs	r3, #1
 8010122:	4622      	mov	r2, r4
 8010124:	4649      	mov	r1, r9
 8010126:	4638      	mov	r0, r7
 8010128:	47c0      	blx	r8
 801012a:	3001      	adds	r0, #1
 801012c:	d0e6      	beq.n	80100fc <_printf_common+0xa4>
 801012e:	3601      	adds	r6, #1
 8010130:	e7d9      	b.n	80100e6 <_printf_common+0x8e>
	...

08010134 <_printf_i>:
 8010134:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010138:	7e0f      	ldrb	r7, [r1, #24]
 801013a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801013c:	2f78      	cmp	r7, #120	; 0x78
 801013e:	4691      	mov	r9, r2
 8010140:	4680      	mov	r8, r0
 8010142:	460c      	mov	r4, r1
 8010144:	469a      	mov	sl, r3
 8010146:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801014a:	d807      	bhi.n	801015c <_printf_i+0x28>
 801014c:	2f62      	cmp	r7, #98	; 0x62
 801014e:	d80a      	bhi.n	8010166 <_printf_i+0x32>
 8010150:	2f00      	cmp	r7, #0
 8010152:	f000 80d8 	beq.w	8010306 <_printf_i+0x1d2>
 8010156:	2f58      	cmp	r7, #88	; 0x58
 8010158:	f000 80a3 	beq.w	80102a2 <_printf_i+0x16e>
 801015c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010160:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010164:	e03a      	b.n	80101dc <_printf_i+0xa8>
 8010166:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801016a:	2b15      	cmp	r3, #21
 801016c:	d8f6      	bhi.n	801015c <_printf_i+0x28>
 801016e:	a101      	add	r1, pc, #4	; (adr r1, 8010174 <_printf_i+0x40>)
 8010170:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010174:	080101cd 	.word	0x080101cd
 8010178:	080101e1 	.word	0x080101e1
 801017c:	0801015d 	.word	0x0801015d
 8010180:	0801015d 	.word	0x0801015d
 8010184:	0801015d 	.word	0x0801015d
 8010188:	0801015d 	.word	0x0801015d
 801018c:	080101e1 	.word	0x080101e1
 8010190:	0801015d 	.word	0x0801015d
 8010194:	0801015d 	.word	0x0801015d
 8010198:	0801015d 	.word	0x0801015d
 801019c:	0801015d 	.word	0x0801015d
 80101a0:	080102ed 	.word	0x080102ed
 80101a4:	08010211 	.word	0x08010211
 80101a8:	080102cf 	.word	0x080102cf
 80101ac:	0801015d 	.word	0x0801015d
 80101b0:	0801015d 	.word	0x0801015d
 80101b4:	0801030f 	.word	0x0801030f
 80101b8:	0801015d 	.word	0x0801015d
 80101bc:	08010211 	.word	0x08010211
 80101c0:	0801015d 	.word	0x0801015d
 80101c4:	0801015d 	.word	0x0801015d
 80101c8:	080102d7 	.word	0x080102d7
 80101cc:	682b      	ldr	r3, [r5, #0]
 80101ce:	1d1a      	adds	r2, r3, #4
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	602a      	str	r2, [r5, #0]
 80101d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80101d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80101dc:	2301      	movs	r3, #1
 80101de:	e0a3      	b.n	8010328 <_printf_i+0x1f4>
 80101e0:	6820      	ldr	r0, [r4, #0]
 80101e2:	6829      	ldr	r1, [r5, #0]
 80101e4:	0606      	lsls	r6, r0, #24
 80101e6:	f101 0304 	add.w	r3, r1, #4
 80101ea:	d50a      	bpl.n	8010202 <_printf_i+0xce>
 80101ec:	680e      	ldr	r6, [r1, #0]
 80101ee:	602b      	str	r3, [r5, #0]
 80101f0:	2e00      	cmp	r6, #0
 80101f2:	da03      	bge.n	80101fc <_printf_i+0xc8>
 80101f4:	232d      	movs	r3, #45	; 0x2d
 80101f6:	4276      	negs	r6, r6
 80101f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101fc:	485e      	ldr	r0, [pc, #376]	; (8010378 <_printf_i+0x244>)
 80101fe:	230a      	movs	r3, #10
 8010200:	e019      	b.n	8010236 <_printf_i+0x102>
 8010202:	680e      	ldr	r6, [r1, #0]
 8010204:	602b      	str	r3, [r5, #0]
 8010206:	f010 0f40 	tst.w	r0, #64	; 0x40
 801020a:	bf18      	it	ne
 801020c:	b236      	sxthne	r6, r6
 801020e:	e7ef      	b.n	80101f0 <_printf_i+0xbc>
 8010210:	682b      	ldr	r3, [r5, #0]
 8010212:	6820      	ldr	r0, [r4, #0]
 8010214:	1d19      	adds	r1, r3, #4
 8010216:	6029      	str	r1, [r5, #0]
 8010218:	0601      	lsls	r1, r0, #24
 801021a:	d501      	bpl.n	8010220 <_printf_i+0xec>
 801021c:	681e      	ldr	r6, [r3, #0]
 801021e:	e002      	b.n	8010226 <_printf_i+0xf2>
 8010220:	0646      	lsls	r6, r0, #25
 8010222:	d5fb      	bpl.n	801021c <_printf_i+0xe8>
 8010224:	881e      	ldrh	r6, [r3, #0]
 8010226:	4854      	ldr	r0, [pc, #336]	; (8010378 <_printf_i+0x244>)
 8010228:	2f6f      	cmp	r7, #111	; 0x6f
 801022a:	bf0c      	ite	eq
 801022c:	2308      	moveq	r3, #8
 801022e:	230a      	movne	r3, #10
 8010230:	2100      	movs	r1, #0
 8010232:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010236:	6865      	ldr	r5, [r4, #4]
 8010238:	60a5      	str	r5, [r4, #8]
 801023a:	2d00      	cmp	r5, #0
 801023c:	bfa2      	ittt	ge
 801023e:	6821      	ldrge	r1, [r4, #0]
 8010240:	f021 0104 	bicge.w	r1, r1, #4
 8010244:	6021      	strge	r1, [r4, #0]
 8010246:	b90e      	cbnz	r6, 801024c <_printf_i+0x118>
 8010248:	2d00      	cmp	r5, #0
 801024a:	d04d      	beq.n	80102e8 <_printf_i+0x1b4>
 801024c:	4615      	mov	r5, r2
 801024e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010252:	fb03 6711 	mls	r7, r3, r1, r6
 8010256:	5dc7      	ldrb	r7, [r0, r7]
 8010258:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801025c:	4637      	mov	r7, r6
 801025e:	42bb      	cmp	r3, r7
 8010260:	460e      	mov	r6, r1
 8010262:	d9f4      	bls.n	801024e <_printf_i+0x11a>
 8010264:	2b08      	cmp	r3, #8
 8010266:	d10b      	bne.n	8010280 <_printf_i+0x14c>
 8010268:	6823      	ldr	r3, [r4, #0]
 801026a:	07de      	lsls	r6, r3, #31
 801026c:	d508      	bpl.n	8010280 <_printf_i+0x14c>
 801026e:	6923      	ldr	r3, [r4, #16]
 8010270:	6861      	ldr	r1, [r4, #4]
 8010272:	4299      	cmp	r1, r3
 8010274:	bfde      	ittt	le
 8010276:	2330      	movle	r3, #48	; 0x30
 8010278:	f805 3c01 	strble.w	r3, [r5, #-1]
 801027c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010280:	1b52      	subs	r2, r2, r5
 8010282:	6122      	str	r2, [r4, #16]
 8010284:	f8cd a000 	str.w	sl, [sp]
 8010288:	464b      	mov	r3, r9
 801028a:	aa03      	add	r2, sp, #12
 801028c:	4621      	mov	r1, r4
 801028e:	4640      	mov	r0, r8
 8010290:	f7ff fee2 	bl	8010058 <_printf_common>
 8010294:	3001      	adds	r0, #1
 8010296:	d14c      	bne.n	8010332 <_printf_i+0x1fe>
 8010298:	f04f 30ff 	mov.w	r0, #4294967295
 801029c:	b004      	add	sp, #16
 801029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102a2:	4835      	ldr	r0, [pc, #212]	; (8010378 <_printf_i+0x244>)
 80102a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80102a8:	6829      	ldr	r1, [r5, #0]
 80102aa:	6823      	ldr	r3, [r4, #0]
 80102ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80102b0:	6029      	str	r1, [r5, #0]
 80102b2:	061d      	lsls	r5, r3, #24
 80102b4:	d514      	bpl.n	80102e0 <_printf_i+0x1ac>
 80102b6:	07df      	lsls	r7, r3, #31
 80102b8:	bf44      	itt	mi
 80102ba:	f043 0320 	orrmi.w	r3, r3, #32
 80102be:	6023      	strmi	r3, [r4, #0]
 80102c0:	b91e      	cbnz	r6, 80102ca <_printf_i+0x196>
 80102c2:	6823      	ldr	r3, [r4, #0]
 80102c4:	f023 0320 	bic.w	r3, r3, #32
 80102c8:	6023      	str	r3, [r4, #0]
 80102ca:	2310      	movs	r3, #16
 80102cc:	e7b0      	b.n	8010230 <_printf_i+0xfc>
 80102ce:	6823      	ldr	r3, [r4, #0]
 80102d0:	f043 0320 	orr.w	r3, r3, #32
 80102d4:	6023      	str	r3, [r4, #0]
 80102d6:	2378      	movs	r3, #120	; 0x78
 80102d8:	4828      	ldr	r0, [pc, #160]	; (801037c <_printf_i+0x248>)
 80102da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80102de:	e7e3      	b.n	80102a8 <_printf_i+0x174>
 80102e0:	0659      	lsls	r1, r3, #25
 80102e2:	bf48      	it	mi
 80102e4:	b2b6      	uxthmi	r6, r6
 80102e6:	e7e6      	b.n	80102b6 <_printf_i+0x182>
 80102e8:	4615      	mov	r5, r2
 80102ea:	e7bb      	b.n	8010264 <_printf_i+0x130>
 80102ec:	682b      	ldr	r3, [r5, #0]
 80102ee:	6826      	ldr	r6, [r4, #0]
 80102f0:	6961      	ldr	r1, [r4, #20]
 80102f2:	1d18      	adds	r0, r3, #4
 80102f4:	6028      	str	r0, [r5, #0]
 80102f6:	0635      	lsls	r5, r6, #24
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	d501      	bpl.n	8010300 <_printf_i+0x1cc>
 80102fc:	6019      	str	r1, [r3, #0]
 80102fe:	e002      	b.n	8010306 <_printf_i+0x1d2>
 8010300:	0670      	lsls	r0, r6, #25
 8010302:	d5fb      	bpl.n	80102fc <_printf_i+0x1c8>
 8010304:	8019      	strh	r1, [r3, #0]
 8010306:	2300      	movs	r3, #0
 8010308:	6123      	str	r3, [r4, #16]
 801030a:	4615      	mov	r5, r2
 801030c:	e7ba      	b.n	8010284 <_printf_i+0x150>
 801030e:	682b      	ldr	r3, [r5, #0]
 8010310:	1d1a      	adds	r2, r3, #4
 8010312:	602a      	str	r2, [r5, #0]
 8010314:	681d      	ldr	r5, [r3, #0]
 8010316:	6862      	ldr	r2, [r4, #4]
 8010318:	2100      	movs	r1, #0
 801031a:	4628      	mov	r0, r5
 801031c:	f7ef ff68 	bl	80001f0 <memchr>
 8010320:	b108      	cbz	r0, 8010326 <_printf_i+0x1f2>
 8010322:	1b40      	subs	r0, r0, r5
 8010324:	6060      	str	r0, [r4, #4]
 8010326:	6863      	ldr	r3, [r4, #4]
 8010328:	6123      	str	r3, [r4, #16]
 801032a:	2300      	movs	r3, #0
 801032c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010330:	e7a8      	b.n	8010284 <_printf_i+0x150>
 8010332:	6923      	ldr	r3, [r4, #16]
 8010334:	462a      	mov	r2, r5
 8010336:	4649      	mov	r1, r9
 8010338:	4640      	mov	r0, r8
 801033a:	47d0      	blx	sl
 801033c:	3001      	adds	r0, #1
 801033e:	d0ab      	beq.n	8010298 <_printf_i+0x164>
 8010340:	6823      	ldr	r3, [r4, #0]
 8010342:	079b      	lsls	r3, r3, #30
 8010344:	d413      	bmi.n	801036e <_printf_i+0x23a>
 8010346:	68e0      	ldr	r0, [r4, #12]
 8010348:	9b03      	ldr	r3, [sp, #12]
 801034a:	4298      	cmp	r0, r3
 801034c:	bfb8      	it	lt
 801034e:	4618      	movlt	r0, r3
 8010350:	e7a4      	b.n	801029c <_printf_i+0x168>
 8010352:	2301      	movs	r3, #1
 8010354:	4632      	mov	r2, r6
 8010356:	4649      	mov	r1, r9
 8010358:	4640      	mov	r0, r8
 801035a:	47d0      	blx	sl
 801035c:	3001      	adds	r0, #1
 801035e:	d09b      	beq.n	8010298 <_printf_i+0x164>
 8010360:	3501      	adds	r5, #1
 8010362:	68e3      	ldr	r3, [r4, #12]
 8010364:	9903      	ldr	r1, [sp, #12]
 8010366:	1a5b      	subs	r3, r3, r1
 8010368:	42ab      	cmp	r3, r5
 801036a:	dcf2      	bgt.n	8010352 <_printf_i+0x21e>
 801036c:	e7eb      	b.n	8010346 <_printf_i+0x212>
 801036e:	2500      	movs	r5, #0
 8010370:	f104 0619 	add.w	r6, r4, #25
 8010374:	e7f5      	b.n	8010362 <_printf_i+0x22e>
 8010376:	bf00      	nop
 8010378:	08010c8d 	.word	0x08010c8d
 801037c:	08010c9e 	.word	0x08010c9e

08010380 <__retarget_lock_acquire_recursive>:
 8010380:	4770      	bx	lr

08010382 <__retarget_lock_release_recursive>:
 8010382:	4770      	bx	lr

08010384 <memmove>:
 8010384:	4288      	cmp	r0, r1
 8010386:	b510      	push	{r4, lr}
 8010388:	eb01 0402 	add.w	r4, r1, r2
 801038c:	d902      	bls.n	8010394 <memmove+0x10>
 801038e:	4284      	cmp	r4, r0
 8010390:	4623      	mov	r3, r4
 8010392:	d807      	bhi.n	80103a4 <memmove+0x20>
 8010394:	1e43      	subs	r3, r0, #1
 8010396:	42a1      	cmp	r1, r4
 8010398:	d008      	beq.n	80103ac <memmove+0x28>
 801039a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801039e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80103a2:	e7f8      	b.n	8010396 <memmove+0x12>
 80103a4:	4402      	add	r2, r0
 80103a6:	4601      	mov	r1, r0
 80103a8:	428a      	cmp	r2, r1
 80103aa:	d100      	bne.n	80103ae <memmove+0x2a>
 80103ac:	bd10      	pop	{r4, pc}
 80103ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80103b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80103b6:	e7f7      	b.n	80103a8 <memmove+0x24>

080103b8 <_realloc_r>:
 80103b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103bc:	4680      	mov	r8, r0
 80103be:	4614      	mov	r4, r2
 80103c0:	460e      	mov	r6, r1
 80103c2:	b921      	cbnz	r1, 80103ce <_realloc_r+0x16>
 80103c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103c8:	4611      	mov	r1, r2
 80103ca:	f7ff bc1d 	b.w	800fc08 <_malloc_r>
 80103ce:	b92a      	cbnz	r2, 80103dc <_realloc_r+0x24>
 80103d0:	f7ff fbae 	bl	800fb30 <_free_r>
 80103d4:	4625      	mov	r5, r4
 80103d6:	4628      	mov	r0, r5
 80103d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103dc:	f000 f81b 	bl	8010416 <_malloc_usable_size_r>
 80103e0:	4284      	cmp	r4, r0
 80103e2:	4607      	mov	r7, r0
 80103e4:	d802      	bhi.n	80103ec <_realloc_r+0x34>
 80103e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80103ea:	d812      	bhi.n	8010412 <_realloc_r+0x5a>
 80103ec:	4621      	mov	r1, r4
 80103ee:	4640      	mov	r0, r8
 80103f0:	f7ff fc0a 	bl	800fc08 <_malloc_r>
 80103f4:	4605      	mov	r5, r0
 80103f6:	2800      	cmp	r0, #0
 80103f8:	d0ed      	beq.n	80103d6 <_realloc_r+0x1e>
 80103fa:	42bc      	cmp	r4, r7
 80103fc:	4622      	mov	r2, r4
 80103fe:	4631      	mov	r1, r6
 8010400:	bf28      	it	cs
 8010402:	463a      	movcs	r2, r7
 8010404:	f7ff fb7e 	bl	800fb04 <memcpy>
 8010408:	4631      	mov	r1, r6
 801040a:	4640      	mov	r0, r8
 801040c:	f7ff fb90 	bl	800fb30 <_free_r>
 8010410:	e7e1      	b.n	80103d6 <_realloc_r+0x1e>
 8010412:	4635      	mov	r5, r6
 8010414:	e7df      	b.n	80103d6 <_realloc_r+0x1e>

08010416 <_malloc_usable_size_r>:
 8010416:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801041a:	1f18      	subs	r0, r3, #4
 801041c:	2b00      	cmp	r3, #0
 801041e:	bfbc      	itt	lt
 8010420:	580b      	ldrlt	r3, [r1, r0]
 8010422:	18c0      	addlt	r0, r0, r3
 8010424:	4770      	bx	lr
	...

08010428 <_init>:
 8010428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801042a:	bf00      	nop
 801042c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801042e:	bc08      	pop	{r3}
 8010430:	469e      	mov	lr, r3
 8010432:	4770      	bx	lr

08010434 <_fini>:
 8010434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010436:	bf00      	nop
 8010438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801043a:	bc08      	pop	{r3}
 801043c:	469e      	mov	lr, r3
 801043e:	4770      	bx	lr
